/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import dao.DaoOrcamento;
import dao.DaoProduto;
import java.awt.Toolkit;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Orcamento;
import model.Produto;
import model.Servico;
import model.VendaPeca;

/**
 *
 * @author Luiz
 */
public class FrmListagemOrcamento extends javax.swing.JFrame {

    /**
     * Creates new form FrmCadastroOrcamento
     */
    public FrmListagemOrcamento(int nvlAdm) throws SQLException, ClassNotFoundException {
        initComponents();
        atualizarTabela();
        iniciarTabelaPeca();
    }

    public FrmListagemOrcamento(int codigoServico, boolean flag) {

    }

    boolean flagCriarAlterar;
    Servico s = new Servico();
    boolean flagPeca;
    long limitePeca = 0;
    double valorTotal;
    double valorMaoDeObra;
    double valorPecas;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngPeca = new javax.swing.ButtonGroup();
        panPrincipal = new javax.swing.JPanel();
        btnPagarOrcamento = new javax.swing.JButton();
        panProdMaoObra = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        txtMaoDeObra = new javax.swing.JTextField();
        panCamposProd = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtCodPeca = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtNomePeca = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtQuantidadePeca = new javax.swing.JTextField();
        txtCategoria = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtQtdEstoque = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtValorUnitario = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtValorXQtd = new javax.swing.JTextField();
        btnAdicionarPeca = new javax.swing.JButton();
        btnListarPeca = new javax.swing.JButton();
        lblPecaExiste = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtValorTotal = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPecas = new javax.swing.JTable();
        btnRemoveLinhaPeca = new javax.swing.JButton();
        btnExcluirTodasPecas = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblOrcamento = new javax.swing.JTable();
        cmbFiltro = new javax.swing.JComboBox<>();
        txtPesquisa = new javax.swing.JTextField();
        lblDescrever = new javax.swing.JLabel();
        btnFechar = new javax.swing.JButton();
        btnAlterar = new javax.swing.JButton();
        btnDeletar = new javax.swing.JButton();
        btnAtualizar = new javax.swing.JButton();
        lblPesquisar = new javax.swing.JLabel();
        btnFecharFrame = new javax.swing.JButton();
        lblBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Listar Orçamentos");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/img/logopng32.png")));
        setMinimumSize(new java.awt.Dimension(1152, 648));
        setResizable(false);
        getContentPane().setLayout(null);

        panPrincipal.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panPrincipal.setOpaque(false);
        panPrincipal.setLayout(null);

        btnPagarOrcamento.setText("Pagar Orçamento");
        btnPagarOrcamento.setEnabled(false);
        btnPagarOrcamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPagarOrcamentoActionPerformed(evt);
            }
        });
        panPrincipal.add(btnPagarOrcamento);
        btnPagarOrcamento.setBounds(170, 50, 200, 30);

        panProdMaoObra.setBorder(javax.swing.BorderFactory.createTitledBorder("Adicionar produtos e mão de obra"));
        panProdMaoObra.setOpaque(false);
        panProdMaoObra.setLayout(null);

        jLabel8.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        jLabel8.setText("Mão de obra total:");
        panProdMaoObra.add(jLabel8);
        jLabel8.setBounds(10, 10, 190, 25);

        txtMaoDeObra.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        txtMaoDeObra.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMaoDeObraFocusLost(evt);
            }
        });
        txtMaoDeObra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaoDeObraActionPerformed(evt);
            }
        });
        panProdMaoObra.add(txtMaoDeObra);
        txtMaoDeObra.setBounds(220, 10, 150, 25);

        panCamposProd.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panCamposProd.setOpaque(false);
        panCamposProd.setLayout(null);

        jLabel5.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        jLabel5.setText("Quantidade em Estoque:");
        panCamposProd.add(jLabel5);
        jLabel5.setBounds(210, 95, 156, 25);

        txtCodPeca.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        txtCodPeca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodPecaActionPerformed(evt);
            }
        });
        txtCodPeca.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCodPecaKeyReleased(evt);
            }
        });
        panCamposProd.add(txtCodPeca);
        txtCodPeca.setBounds(120, 5, 120, 25);

        jLabel6.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        jLabel6.setText("Nome:");
        panCamposProd.add(jLabel6);
        jLabel6.setBounds(10, 65, 42, 25);

        txtNomePeca.setEditable(false);
        txtNomePeca.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        txtNomePeca.setFocusable(false);
        txtNomePeca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomePecaActionPerformed(evt);
            }
        });
        panCamposProd.add(txtNomePeca);
        txtNomePeca.setBounds(120, 65, 370, 25);

        jLabel7.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        jLabel7.setText("Categoria:");
        panCamposProd.add(jLabel7);
        jLabel7.setBounds(10, 125, 63, 25);

        jLabel10.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        jLabel10.setText("Quantidade:");
        panCamposProd.add(jLabel10);
        jLabel10.setBounds(260, 5, 76, 25);

        txtQuantidadePeca.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        txtQuantidadePeca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQuantidadePecaActionPerformed(evt);
            }
        });
        txtQuantidadePeca.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtQuantidadePecaKeyReleased(evt);
            }
        });
        panCamposProd.add(txtQuantidadePeca);
        txtQuantidadePeca.setBounds(350, 5, 100, 25);

        txtCategoria.setEditable(false);
        txtCategoria.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        txtCategoria.setFocusable(false);
        txtCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCategoriaActionPerformed(evt);
            }
        });
        panCamposProd.add(txtCategoria);
        txtCategoria.setBounds(120, 125, 140, 25);

        jLabel12.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        jLabel12.setText("Código da Peça: ");
        panCamposProd.add(jLabel12);
        jLabel12.setBounds(10, 5, 107, 25);

        txtQtdEstoque.setEditable(false);
        txtQtdEstoque.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        txtQtdEstoque.setFocusable(false);
        txtQtdEstoque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQtdEstoqueActionPerformed(evt);
            }
        });
        panCamposProd.add(txtQtdEstoque);
        txtQtdEstoque.setBounds(380, 95, 110, 25);

        jLabel13.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        jLabel13.setText("Valor Unitário:");
        panCamposProd.add(jLabel13);
        jLabel13.setBounds(10, 95, 89, 25);

        txtValorUnitario.setEditable(false);
        txtValorUnitario.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        txtValorUnitario.setFocusable(false);
        txtValorUnitario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtValorUnitarioActionPerformed(evt);
            }
        });
        panCamposProd.add(txtValorUnitario);
        txtValorUnitario.setBounds(120, 95, 80, 25);

        jLabel14.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        jLabel14.setText("Valor un. x qtd");
        panCamposProd.add(jLabel14);
        jLabel14.setBounds(280, 125, 130, 25);

        txtValorXQtd.setEditable(false);
        txtValorXQtd.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        txtValorXQtd.setFocusable(false);
        txtValorXQtd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtValorXQtdActionPerformed(evt);
            }
        });
        panCamposProd.add(txtValorXQtd);
        txtValorXQtd.setBounds(380, 125, 110, 25);

        btnAdicionarPeca.setText("Adicionar produto ao orçamento");
        btnAdicionarPeca.setEnabled(false);
        btnAdicionarPeca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarPecaActionPerformed(evt);
            }
        });
        panCamposProd.add(btnAdicionarPeca);
        btnAdicionarPeca.setBounds(170, 153, 200, 25);

        btnListarPeca.setText("Listar produto");
        btnListarPeca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarPecaActionPerformed(evt);
            }
        });
        panCamposProd.add(btnListarPeca);
        btnListarPeca.setBounds(190, 35, 130, 20);

        lblPecaExiste.setText("Peça não encontrada.");
        panCamposProd.add(lblPecaExiste);
        lblPecaExiste.setBounds(10, 35, 190, 25);

        panProdMaoObra.add(panCamposProd);
        panCamposProd.setBounds(10, 37, 500, 183);
        panCamposProd.getAccessibleContext().setAccessibleName("Venda de peça");

        jLabel9.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        jLabel9.setText("Valor Total:");
        panProdMaoObra.add(jLabel9);
        jLabel9.setBounds(10, 223, 190, 25);

        txtValorTotal.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        txtValorTotal.setFocusable(false);
        txtValorTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtValorTotalActionPerformed(evt);
            }
        });
        panProdMaoObra.add(txtValorTotal);
        txtValorTotal.setBounds(160, 223, 150, 25);

        tblPecas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblPecas);

        panProdMaoObra.add(jScrollPane1);
        jScrollPane1.setBounds(10, 274, 500, 230);

        btnRemoveLinhaPeca.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        btnRemoveLinhaPeca.setText("Excluir produto selecionado");
        btnRemoveLinhaPeca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveLinhaPecaActionPerformed(evt);
            }
        });
        panProdMaoObra.add(btnRemoveLinhaPeca);
        btnRemoveLinhaPeca.setBounds(170, 250, 150, 20);

        btnExcluirTodasPecas.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        btnExcluirTodasPecas.setText("Excluir todos os produtos");
        btnExcluirTodasPecas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirTodasPecasActionPerformed(evt);
            }
        });
        panProdMaoObra.add(btnExcluirTodasPecas);
        btnExcluirTodasPecas.setBounds(370, 250, 140, 20);

        panPrincipal.add(panProdMaoObra);
        panProdMaoObra.setBounds(590, 0, 520, 510);

        tblOrcamento.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblOrcamento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblOrcamentoMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblOrcamento);

        panPrincipal.add(jScrollPane2);
        jScrollPane2.setBounds(20, 90, 540, 360);

        cmbFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Código Orçamento", "Código Serviço", "Status", "Valor Mão De Obra", "Valor Total" }));
        panPrincipal.add(cmbFiltro);
        cmbFiltro.setBounds(150, 10, 130, 25);

        txtPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPesquisaActionPerformed(evt);
            }
        });
        txtPesquisa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPesquisaKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPesquisaKeyTyped(evt);
            }
        });
        panPrincipal.add(txtPesquisa);
        txtPesquisa.setBounds(380, 10, 190, 25);

        lblDescrever.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblDescrever.setText("Descrição:");
        panPrincipal.add(lblDescrever);
        lblDescrever.setBounds(290, 10, 83, 25);

        btnFechar.setText("Fechar");
        btnFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFecharActionPerformed(evt);
            }
        });
        panPrincipal.add(btnFechar);
        btnFechar.setBounds(460, 480, 100, 23);

        btnAlterar.setText("Alterar");
        btnAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarActionPerformed(evt);
            }
        });
        panPrincipal.add(btnAlterar);
        btnAlterar.setBounds(250, 480, 180, 23);

        btnDeletar.setText("Deletar");
        btnDeletar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletarActionPerformed(evt);
            }
        });
        panPrincipal.add(btnDeletar);
        btnDeletar.setBounds(150, 480, 67, 23);

        btnAtualizar.setText("Atualizar Tabela");
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });
        panPrincipal.add(btnAtualizar);
        btnAtualizar.setBounds(10, 480, 120, 23);

        lblPesquisar.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblPesquisar.setText("Pesquisar por: ");
        panPrincipal.add(lblPesquisar);
        lblPesquisar.setBounds(20, 10, 120, 25);

        getContentPane().add(panPrincipal);
        panPrincipal.setBounds(10, 10, 1125, 520);

        btnFecharFrame.setText("Fechar ");
        btnFecharFrame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFecharFrameActionPerformed(evt);
            }
        });
        getContentPane().add(btnFecharFrame);
        btnFecharFrame.setBounds(1055, 550, 80, 30);

        lblBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fundo.png"))); // NOI18N
        getContentPane().add(lblBackground);
        lblBackground.setBounds(0, -20, 1150, 670);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtCodPecaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodPecaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodPecaActionPerformed

    private void txtNomePecaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomePecaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomePecaActionPerformed

    private void txtValorTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtValorTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtValorTotalActionPerformed

    private void txtQuantidadePecaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQuantidadePecaActionPerformed

    }//GEN-LAST:event_txtQuantidadePecaActionPerformed

    private void txtCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCategoriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCategoriaActionPerformed

    private void txtQtdEstoqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQtdEstoqueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQtdEstoqueActionPerformed

    private void txtValorUnitarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtValorUnitarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtValorUnitarioActionPerformed

    private void txtValorXQtdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtValorXQtdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtValorXQtdActionPerformed

    private void btnListarPecaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarPecaActionPerformed
        control.Janelas.abrirListagemProduto();
    }//GEN-LAST:event_btnListarPecaActionPerformed

    private void txtCodPecaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodPecaKeyReleased
        if (txtCodPeca.getText().equals("")) {
            limparPeca();
            lblPecaExiste.setText("Digite um código de peça.");
            btnAdicionarPeca.setEnabled(false);
        } else {
            try {
                flagPeca = DaoProduto.existePeca((txtCodPeca.getText()));
                if (flagPeca) {
                    lblPecaExiste.setText("Peça encontrada.");
                    popularPeca((txtCodPeca.getText()));
                    btnAdicionarPeca.setEnabled(true);

                } else {
                    lblPecaExiste.setText("Peça não encontrada.");
                    limparPeca();
                    btnAdicionarPeca.setEnabled(false);
                }
            } catch (SQLException ex) {
                Logger.getLogger(FrmListagemOrcamento.class.getName()).log(Level.SEVERE, null, ex);
                limparPeca();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FrmListagemOrcamento.class.getName()).log(Level.SEVERE, null, ex);
                limparPeca();
            } catch (NumberFormatException nfe) {
                lblPecaExiste.setText("Peça não encontrada.");
                limparPeca();
                btnAdicionarPeca.setEnabled(false);
            }
        }
    }//GEN-LAST:event_txtCodPecaKeyReleased

    private void txtQuantidadePecaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQuantidadePecaKeyReleased
        long qtd;
        float produto;
        float vlunit;
        try {
            qtd = Long.parseLong(txtQuantidadePeca.getText());
            if (qtd > limitePeca) {
                txtQuantidadePeca.setText("" + limitePeca);
                qtd = limitePeca;
                vlunit = Float.parseFloat(txtValorUnitario.getText());
                produto = qtd * vlunit;
                txtValorXQtd.setText("" + produto);
            } else {
                vlunit = Float.parseFloat(txtValorUnitario.getText());
                produto = qtd * vlunit;
                txtValorXQtd.setText("" + produto);
            }
        } catch (NumberFormatException ex) {
            txtQuantidadePeca.setText("");
        }
    }//GEN-LAST:event_txtQuantidadePecaKeyReleased

    private void btnAdicionarPecaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarPecaActionPerformed
        boolean flag = true;
        long flagQtd = Long.parseLong(txtQuantidadePeca.getText());
        if (flagQtd <= 0 || txtQtdEstoque.equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Digite uma quantidade válida.");
        } else {
            DefaultTableModel model = (DefaultTableModel) tblPecas.getModel();
            Object rowData[] = new Object[6];
            rowData[0] = (String) txtCodPeca.getText();
            rowData[1] = (String) txtNomePeca.getText();
            rowData[2] = (String) txtCategoria.getText();
            rowData[3] = (String) txtValorUnitario.getText();
            rowData[4] = (String) txtQuantidadePeca.getText();
            rowData[5] = (String) txtValorXQtd.getText();

            String aux = (String) rowData[0];
            String aux2 = "";
            for (int i = 0; i < model.getRowCount(); i++) {
                aux2 = (String) model.getValueAt(i, 0);
                if (aux.equals(aux2)) {
                    flag = false;
                }
            }
            if (flag) {
                model.addRow(rowData);
                tblPecas.setModel(model);
                txtCodPeca.setText("");
                limparPeca();
                txtCodPeca.requestFocus();
            }
        }

        atualizarValorTotal();
    }//GEN-LAST:event_btnAdicionarPecaActionPerformed

    private void btnExcluirTodasPecasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirTodasPecasActionPerformed
        iniciarTabelaPeca();
        atualizarValorTotal();
    }//GEN-LAST:event_btnExcluirTodasPecasActionPerformed

    private void btnRemoveLinhaPecaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveLinhaPecaActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblPecas.getModel();
        if (model.getRowCount() != 0) {
            model.removeRow(tblPecas.getSelectedRow());
            tblPecas.setModel(model);
        }
        atualizarValorTotal();
    }//GEN-LAST:event_btnRemoveLinhaPecaActionPerformed

    private void btnFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFecharActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnFecharActionPerformed

    private void txtMaoDeObraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMaoDeObraActionPerformed

    }//GEN-LAST:event_txtMaoDeObraActionPerformed

    private void txtMaoDeObraFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMaoDeObraFocusLost
        maoDeObraFocusLost();
    }//GEN-LAST:event_txtMaoDeObraFocusLost

    private void txtPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPesquisaActionPerformed

    }//GEN-LAST:event_txtPesquisaActionPerformed

    private void txtPesquisaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisaKeyReleased
        // Chamando método de listagem com filtro, se txt preenchido
        //        try {
        //criando variável de controle
        int controle = 0;

        //Se campo de texto não estiver vazio
        if (txtPesquisa.getText().trim() != "") {
            controle = 1;
            atualizarTabelaFiltrada();
            txtMaoDeObra.setText("0");
            iniciarTabelaPeca();
            atualizarValorTotal();
        }

        //Se a variável de controle for 0, diz-se que o campo está vazio e, portanto, atualiza a JTable
        if (controle == 0) {
            try {
                atualizarTabela();
                txtMaoDeObra.setText("0");
                iniciarTabelaPeca();
                atualizarValorTotal();
            } catch (SQLException ex) {
                Logger.getLogger(FrmListagemOrcamento.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FrmListagemOrcamento.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        //        } catch (Exception ex) {
        //            System.out.println("Exceção: " + ex);
        //        }
    }//GEN-LAST:event_txtPesquisaKeyReleased

    private void txtPesquisaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisaKeyTyped

    }//GEN-LAST:event_txtPesquisaKeyTyped

    private void btnDeletarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletarActionPerformed
        int aux = 9;
        aux = JOptionPane.showConfirmDialog(rootPane, "Deseja realmente excluir o orçamento?");
        if (aux == 0) {
            try {
                DaoOrcamento.deletarOrcamento(Integer.parseInt((String) tblOrcamento.getValueAt(tblOrcamento.getSelectedRow(), 0)));
                atualizarTabela();
            } catch (SQLException ex) {
                Logger.getLogger(FrmListagemOrcamento.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FrmListagemOrcamento.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnDeletarActionPerformed

    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed
        try {
            atualizarTabela();
        } catch (SQLException ex) {
            Logger.getLogger(FrmListagemOrcamento.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FrmListagemOrcamento.class.getName()).log(Level.SEVERE, null, ex);
        }
        txtMaoDeObra.setText("0");
        iniciarTabelaPeca();
        atualizarValorTotal();
    }//GEN-LAST:event_btnAtualizarActionPerformed

    private void tblOrcamentoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblOrcamentoMouseClicked
        if (tblOrcamento.getRowCount() != 0) {
            popularTabelaPeca(Integer.parseInt((String) tblOrcamento.getValueAt(tblOrcamento.getSelectedRow(), 0)));
            txtMaoDeObra.setText((String) tblOrcamento.getValueAt(tblOrcamento.getSelectedRow(), 4));
            String aux = "";
            aux = (String) tblOrcamento.getValueAt(tblOrcamento.getSelectedRow(), 2);
            switch (aux) {
                case "Pago":
                    btnPagarOrcamento.setEnabled(false);
                    break;
                case "Ativo":
                    btnPagarOrcamento.setEnabled(true);
                    break;

            }

        } else {

        }
    }//GEN-LAST:event_tblOrcamentoMouseClicked

    private void btnAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarActionPerformed

        if (valorTotal > 0) {
            Orcamento o = new Orcamento();
            s.setCodigoServico(((String) tblOrcamento.getValueAt(tblOrcamento.getSelectedRow(), 1)));
            o.setServico(s);
            o.setMaoDeObra(Double.parseDouble(txtMaoDeObra.getText()));
            ArrayList<VendaPeca> lista = new ArrayList<>();
            for (int i = 0; i < tblPecas.getRowCount(); i++) {
                Produto p = new Produto();
                p.setCodigoPeca((String) tblPecas.getValueAt(i, 0));
                p.setNomePeca((String) tblPecas.getValueAt(i, 1));
                p.setCategoriaPeca((String) tblPecas.getValueAt(i, 2));
                p.setValorUnitario((String) tblPecas.getValueAt(i, 3));
                p.setQuantidadePeca(((String) tblPecas.getValueAt(i, 4)));
                VendaPeca vp = new VendaPeca();
                vp.setPeca(p);
                vp.setQuantidadeVendida(p.getQuantidadePeca());
                lista.add(vp);
            }
            o.setPecas(lista);
            o.setValorTotal(0.0);
            for (int i = 0; i < lista.size(); i++) {
                o.setValorTotal(o.getValorTotal() + (lista.get(i).getPeca().getValorUnitarioBanco() * lista.get(i).getQuantidadeVendida()));
            }
            o.setValorTotal(o.getValorTotal() + o.getMaoDeObra());
            try {
                if (tblPecas.getRowCount() != 0) {
                    DaoOrcamento.criarOrcamento(o, true, false);
                } else {
                    DaoOrcamento.criarOrcamento(o, false, false);
                }
                atualizarTabela();
                txtMaoDeObra.setText("0");
                iniciarTabelaPeca();
                atualizarValorTotal();

            } catch (SQLException ex) {
                Logger.getLogger(FrmCadastroOrcamento.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FrmCadastroOrcamento.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            JOptionPane.showMessageDialog(rootPane, "Insira um valor de mão de obra e/ou peça.");
        }


    }//GEN-LAST:event_btnAlterarActionPerformed

    private void btnPagarOrcamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPagarOrcamentoActionPerformed

        ArrayList<VendaPeca> lista = new ArrayList<>();
        for (int i = 0; i < tblPecas.getRowCount(); i++) {
            Produto p = new Produto();
            p.setCodigoPeca((String) tblPecas.getValueAt(i, 0));
            p.setNomePeca((String) tblPecas.getValueAt(i, 1));
            p.setCategoriaPeca((String) tblPecas.getValueAt(i, 2));
            p.setValorUnitario((String) tblPecas.getValueAt(i, 3));
            p.setQuantidadePeca((String) tblPecas.getValueAt(i, 4));
            VendaPeca vp = new VendaPeca();
            vp.setPeca(p);
            vp.setQuantidadeVendida(p.getQuantidadePeca());
            lista.add(vp);
        }

        if (tblPecas.getRowCount() != 0) {
            DaoProduto.atualizarEstoque(lista);
            try {
                DaoOrcamento.pagarOrcamento(((String) tblOrcamento.getValueAt(tblOrcamento.getSelectedRow(), 1)), true);
            } catch (SQLException | ClassNotFoundException ex) {
                Logger.getLogger(FrmListagemOrcamento.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                atualizarTabela();
            } catch (SQLException | ClassNotFoundException ex) {
                Logger.getLogger(FrmListagemOrcamento.class.getName()).log(Level.SEVERE, null, ex);
            }
            iniciarTabelaPeca();
            txtValorTotal.setText("0");
            txtCodPeca.requestFocus();
        } else {
            try {
                DaoOrcamento.pagarOrcamento(((String) tblOrcamento.getValueAt(tblOrcamento.getSelectedRow(), 1)), true);
            } catch (SQLException | ClassNotFoundException ex) {
                Logger.getLogger(FrmListagemOrcamento.class.getName()).log(Level.SEVERE, null, ex);
            }

        }


    }//GEN-LAST:event_btnPagarOrcamentoActionPerformed

    private void btnFecharFrameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFecharFrameActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnFecharFrameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmListagemOrcamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmListagemOrcamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmListagemOrcamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmListagemOrcamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new FrmListagemOrcamento(control.SynchroSoft.getNvlAdm()).setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(FrmListagemOrcamento.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(FrmListagemOrcamento.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    public void popularPeca(String codigo) throws SQLException, ClassNotFoundException {
        Produto p = new Produto();
        p = DaoProduto.popularPeca(codigo);
        limitePeca = p.getQuantidadePeca();
        txtNomePeca.setText("" + p.getNomePeca());
        txtValorUnitario.setText("" + p.getValorUnitarioSTR());
        txtQtdEstoque.setText("" + p.getQuantidadePeca());
        txtCategoria.setText("" + p.getCategoriaPeca());
    }

    public void limparPeca() {
        txtQuantidadePeca.setText("0");
        txtNomePeca.setText("");
        txtValorUnitario.setText("0.00");
        txtQtdEstoque.setText("0");
        txtCategoria.setText("");
        txtValorXQtd.setText("");
        limitePeca = 0;

    }

    public void maoDeObraFocusLost() {
        try {
            valorMaoDeObra = Double.parseDouble(txtMaoDeObra.getText());
        } catch (NumberFormatException nfe) {
            txtMaoDeObra.setText("0");
            valorMaoDeObra = 0;

        }
        atualizarValorTotal();
    }

    public void atualizarTabela() throws SQLException, ClassNotFoundException {
        ArrayList<Orcamento> lista = new ArrayList<>();
        lista = DaoOrcamento.listarOrcamento();
        String[] nomeColunas = {"Código Orçamento", "Código Serviço", "Status", "Valor Orçamento", "Valor Mão de Obra"};
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {

                    return false;
                }
            };
            tblOrcamento.setModel(model);
            model.setColumnIdentifiers(nomeColunas);
            model.setRowCount(0);

            Object rowData[] = new Object[5];
            for (int i = 0; i < lista.size(); i++) {
                rowData[0] = Integer.toString(lista.get(i).getCodigoOrcamento());
                rowData[1] = lista.get(i).getServico().getCodigoServico();
                if (lista.get(i).getStatusOrcamento() == 0) {
                    rowData[2] = "Ativo";
                } else {
                    rowData[2] = "Pago";
                }
                rowData[3] = Double.toString(lista.get(i).getValorTotal());
                rowData[4] = Double.toString(lista.get(i).getMaoDeObra());

                model.addRow(rowData);
            }
        } catch (Exception ex) {
            System.out.println("Erro ao reiniciar tabela.\n\n" + ex.getMessage());
        }
    }

    public void atualizarTabelaFiltrada() {
        ArrayList<Orcamento> lista = new ArrayList<>();
        lista = DaoOrcamento.listarOrcamentoFiltrada((String) cmbFiltro.getSelectedItem(), txtPesquisa.getText().trim().toLowerCase());
        String[] nomeColunas = {"Código Orçamento", "Código Serviço", "Status", "Valor Orçamento", "Valor Mão de Obra"};
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {

                    return false;
                }
            };
            tblOrcamento.setModel(model);
            model.setColumnIdentifiers(nomeColunas);
            model.setRowCount(0);

            Object rowData[] = new Object[5];
            for (int i = 0; i < lista.size(); i++) {
                rowData[0] = Integer.toString(lista.get(i).getCodigoOrcamento());
                rowData[1] = lista.get(i).getServico().getCodigoServico();
                if (lista.get(i).getStatusOrcamento() == 0) {
                    rowData[2] = "Ativo";
                } else {
                    rowData[2] = "Pago";
                }
                rowData[3] = Double.toString(lista.get(i).getValorTotal());
                rowData[4] = Double.toString(lista.get(i).getMaoDeObra());

                model.addRow(rowData);
            }
        } catch (Exception ex) {
            System.out.println("Erro ao reiniciar tabela.\n\n" + ex.getMessage());
        }
    }

    private void iniciarTabelaPeca() {
        String[] nomeColunas = {"Código", "Nome", "Categoria", "Valor Unitário", "Quantidade", "Valor Sub Total"};
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {

                    return false;
                }
            };
            tblPecas.setModel(model);
            model.setColumnIdentifiers(nomeColunas);
            model.setRowCount(0);
        } catch (Exception ex) {
            System.out.println("Erro ao reiniciar tabela peças.\n\n" + ex.getMessage());
        }
    }

    private void popularTabelaPeca(int codigoOrcamento) {
        ArrayList<Produto> lista = new ArrayList<>();
        lista = DaoOrcamento.listarPecaOrcamento(codigoOrcamento);
        String[] nomeColunas = {"Código", "Nome", "Categoria", "Valor Unitário", "Quantidade", "Valor x Quantidade"};
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {

                    return false;
                }
            };
            tblPecas.setModel(model);
            model.setColumnIdentifiers(nomeColunas);
            model.setRowCount(0);
            Object rowData[] = new Object[6];
            for (int i = 0; i < lista.size(); i++) {
                rowData[0] = lista.get(i).getCodigoPeca();
                rowData[1] = lista.get(i).getNomePeca();
                rowData[2] = lista.get(i).getCategoriaPeca();
                rowData[3] = lista.get(i).getValorUnitarioSTR();
                rowData[4] = Long.toString(lista.get(i).getQuantidadePeca());
                Float aux;
                aux = (lista.get(i).getValorUnitarioBanco() * lista.get(i).getQuantidadePeca());
                rowData[5] = Float.toString(aux);
                model.addRow(rowData);
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "Erro ao iniciar tabela de Peças.\n\n" + ex.getMessage(), "Erro de Carregamento", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdicionarPeca;
    private javax.swing.JButton btnAlterar;
    private javax.swing.JButton btnAtualizar;
    private javax.swing.JButton btnDeletar;
    private javax.swing.JButton btnExcluirTodasPecas;
    private javax.swing.JButton btnFechar;
    private javax.swing.JButton btnFecharFrame;
    private javax.swing.JButton btnListarPeca;
    private javax.swing.JButton btnPagarOrcamento;
    private javax.swing.JButton btnRemoveLinhaPeca;
    private javax.swing.ButtonGroup btngPeca;
    private javax.swing.JComboBox<String> cmbFiltro;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JLabel lblDescrever;
    private javax.swing.JLabel lblPecaExiste;
    private javax.swing.JLabel lblPesquisar;
    private javax.swing.JPanel panCamposProd;
    private javax.swing.JPanel panPrincipal;
    private javax.swing.JPanel panProdMaoObra;
    private javax.swing.JTable tblOrcamento;
    private javax.swing.JTable tblPecas;
    private javax.swing.JTextField txtCategoria;
    private javax.swing.JTextField txtCodPeca;
    private javax.swing.JTextField txtMaoDeObra;
    private javax.swing.JTextField txtNomePeca;
    private javax.swing.JTextField txtPesquisa;
    private javax.swing.JTextField txtQtdEstoque;
    private javax.swing.JTextField txtQuantidadePeca;
    private javax.swing.JTextField txtValorTotal;
    private javax.swing.JTextField txtValorUnitario;
    private javax.swing.JTextField txtValorXQtd;
    // End of variables declaration//GEN-END:variables

    private void atualizarValorTotal() {

        valorPecas = 0;
        for (int i = 0; i < tblPecas.getRowCount(); i++) {
            valorPecas += Double.parseDouble((String) tblPecas.getValueAt(i, 5));
        }

        valorTotal = valorPecas + valorMaoDeObra;
        txtValorTotal.setText("" + valorTotal);

    }

}
