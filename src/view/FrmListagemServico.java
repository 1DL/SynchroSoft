/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import dao.DaoFuncionario;
import dao.DaoOrcamento;
import dao.DaoPessoa;
import dao.DaoServico;
import java.awt.Toolkit;
import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import model.Endereco;
import model.Funcionario;
import model.Pessoa;
import model.PessoaFisica;
import model.PessoaJuridica;
import model.Servico;

/**
 *
 * @author LuizV1
 */
public class FrmListagemServico extends javax.swing.JFrame {

    boolean flagOrcamento;
    boolean cepCadastrado;
    boolean cpfCadastrado;
    boolean cnpjCadastrado;
    boolean servCadastrado;
    Endereco endExibicao;
    PessoaFisica pessoaFisicaExibicao;
    PessoaJuridica pessoaJuridicaExibicao;
    Pessoa pessoaExibicao;
    boolean flagFuncionario;
    Funcionario f = new Funcionario();
    boolean flagAtivo = false;

    public FrmListagemServico(int nvlAdm) {
        initComponents();
        atualizarTabela();
        iniciarTabelaFuncionario();
        txtDataDepois.setText("" + new Date(Calendar.getInstance().getTimeInMillis()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoTipoCliente = new javax.swing.ButtonGroup();
        db = new javax.swing.JFileChooser();
        panPrincipal = new javax.swing.JPanel();
        btnAlterar = new javax.swing.JButton();
        cmbFiltro = new javax.swing.JComboBox<>();
        lblDescrever = new javax.swing.JLabel();
        btnDeletar = new javax.swing.JButton();
        lblPesquisar = new javax.swing.JLabel();
        btnAtualizarTabela = new javax.swing.JButton();
        txtPesquisa = new javax.swing.JTextField();
        panDadosServico = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        cmbTipoServico = new javax.swing.JComboBox<>();
        lblCep = new javax.swing.JLabel();
        txtCep = new javax.swing.JTextField();
        lblOrcamento = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        rbtFisica = new javax.swing.JRadioButton();
        rbtJuridica = new javax.swing.JRadioButton();
        lblCampoCpfCnpj = new javax.swing.JLabel();
        btnOrcamento = new javax.swing.JButton();
        lblAtivo = new javax.swing.JLabel();
        txtCpfCnpj = new javax.swing.JTextField();
        btnAtivarDesativar = new javax.swing.JButton();
        btnCadastrarPessoaJ = new javax.swing.JButton();
        lblCpfCnpjExiste = new javax.swing.JLabel();
        lblCep2 = new javax.swing.JLabel();
        txtCodFunc = new javax.swing.JTextField();
        lblSelecionarFunc = new javax.swing.JLabel();
        btnSelecionarfunc = new javax.swing.JButton();
        btnListarFunc = new javax.swing.JButton();
        lblCep3 = new javax.swing.JLabel();
        btnArquivoRelatorio = new javax.swing.JButton();
        lblRelatorio = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        panDadosCliente = new javax.swing.JPanel();
        lblNomeFicticio = new javax.swing.JLabel();
        txtNomePessoaFicticio = new javax.swing.JTextField();
        lblTelefone = new javax.swing.JLabel();
        txtTelefone = new javax.swing.JTextField();
        lblCelularRamal = new javax.swing.JLabel();
        lblLogradouro = new javax.swing.JLabel();
        txtLogradouro = new javax.swing.JTextField();
        lblCidade = new javax.swing.JLabel();
        txtCidade = new javax.swing.JTextField();
        lblEstado = new javax.swing.JLabel();
        txtEstado = new javax.swing.JTextField();
        lblBairro = new javax.swing.JLabel();
        txtBairro = new javax.swing.JTextField();
        lblNumeroLog = new javax.swing.JLabel();
        txtNumero = new javax.swing.JTextField();
        txtCelularRamal = new javax.swing.JTextField();
        lblRazaoSocial = new javax.swing.JLabel();
        txtRazaoSocial = new javax.swing.JTextField();
        lblSexoDesc = new javax.swing.JLabel();
        lblSexoValor = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblFuncionarioTrabalhando = new javax.swing.JTable();
        btnRemoveLinhaFunc = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        lblCodigoServico = new javax.swing.JLabel();
        lblCodigoServicoInicial = new javax.swing.JLabel();
        txtCodigoServico = new javax.swing.JTextField();
        lblExisteServico = new javax.swing.JLabel();
        lblDataCadastro = new javax.swing.JLabel();
        txtfDataServico = new javax.swing.JFormattedTextField();
        btnHoje1 = new javax.swing.JButton();
        btnCadastrarPessoaJ1 = new javax.swing.JButton();
        lblCpfCnpjExiste1 = new javax.swing.JLabel();
        lblNomeFuncValor = new javax.swing.JLabel();
        lblDiretorioArquivo = new javax.swing.JLabel();
        btnRemoverArquivo = new javax.swing.JButton();
        btnLimparTabela = new javax.swing.JButton();
        btnCadastrarProduto = new javax.swing.JButton();
        btnHoje = new javax.swing.JButton();
        txtDataDepois = new javax.swing.JTextField();
        lblPesquisarData1 = new javax.swing.JLabel();
        txtDataAntes = new javax.swing.JTextField();
        lblPesquisarData2 = new javax.swing.JLabel();
        btnFecharFrame = new javax.swing.JButton();
        btnMenuPrincipal = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblListagemServico = new javax.swing.JTable();
        lblServicoEncontrado = new javax.swing.JLabel();
        lblBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Listar Serviços");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/img/logopng32.png")));
        setMaximumSize(new java.awt.Dimension(1152, 648));
        setMinimumSize(new java.awt.Dimension(1152, 648));
        setPreferredSize(new java.awt.Dimension(1152, 648));
        setResizable(false);
        getContentPane().setLayout(null);

        panPrincipal.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panPrincipal.setOpaque(false);
        panPrincipal.setLayout(null);

        btnAlterar.setText("Alterar");
        btnAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarActionPerformed(evt);
            }
        });
        panPrincipal.add(btnAlterar);
        btnAlterar.setBounds(980, 340, 130, 30);

        cmbFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Código Serviço", "Status Serviço", "Tipo Serviço", "Descrição Serviço", "Data Início", "Data Encerramento" }));
        cmbFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFiltroActionPerformed(evt);
            }
        });
        panPrincipal.add(cmbFiltro);
        cmbFiltro.setBounds(140, 3, 240, 25);

        lblDescrever.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblDescrever.setText("Descrição:");
        panPrincipal.add(lblDescrever);
        lblDescrever.setBounds(400, 3, 83, 25);

        btnDeletar.setText("Deletar registro selecionado");
        btnDeletar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletarActionPerformed(evt);
            }
        });
        panPrincipal.add(btnDeletar);
        btnDeletar.setBounds(10, 340, 170, 30);

        lblPesquisar.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblPesquisar.setText("Pesquisar por: ");
        panPrincipal.add(lblPesquisar);
        lblPesquisar.setBounds(10, 3, 160, 25);

        btnAtualizarTabela.setText("Listar todos os registros");
        btnAtualizarTabela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarTabelaActionPerformed(evt);
            }
        });
        panPrincipal.add(btnAtualizarTabela);
        btnAtualizarTabela.setBounds(550, 340, 147, 30);

        txtPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPesquisaActionPerformed(evt);
            }
        });
        txtPesquisa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPesquisaKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPesquisaKeyTyped(evt);
            }
        });
        panPrincipal.add(txtPesquisa);
        txtPesquisa.setBounds(500, 3, 180, 25);

        panDadosServico.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados do serviço selecionado"));
        panDadosServico.setOpaque(false);
        panDadosServico.setLayout(null);

        jLabel3.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        jLabel3.setText("Tipo de serviço:");
        panDadosServico.add(jLabel3);
        jLabel3.setBounds(360, 10, 130, 18);

        cmbTipoServico.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Preventivo", "Corretivo", "Emergencial" }));
        cmbTipoServico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTipoServicoActionPerformed(evt);
            }
        });
        panDadosServico.add(cmbTipoServico);
        cmbTipoServico.setBounds(493, 10, 80, 18);

        lblCep.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblCep.setText("CEP:");
        panDadosServico.add(lblCep);
        lblCep.setBounds(310, 30, 60, 18);

        txtCep.setEditable(false);
        txtCep.setEnabled(false);
        txtCep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCepActionPerformed(evt);
            }
        });
        txtCep.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCepKeyReleased(evt);
            }
        });
        panDadosServico.add(txtCep);
        txtCep.setBounds(350, 30, 110, 18);

        lblOrcamento.setText("Existe ou não Orçamento");
        panDadosServico.add(lblOrcamento);
        lblOrcamento.setBounds(920, 90, 130, 25);

        jLabel4.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        jLabel4.setText("Tipo de Cliente:");
        panDadosServico.add(jLabel4);
        jLabel4.setBounds(10, 30, 160, 18);

        grupoTipoCliente.add(rbtFisica);
        rbtFisica.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        rbtFisica.setSelected(true);
        rbtFisica.setText("Física");
        rbtFisica.setOpaque(false);
        rbtFisica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtFisicaActionPerformed(evt);
            }
        });
        panDadosServico.add(rbtFisica);
        rbtFisica.setBounds(140, 30, 69, 18);

        grupoTipoCliente.add(rbtJuridica);
        rbtJuridica.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        rbtJuridica.setText("Jurídica");
        rbtJuridica.setOpaque(false);
        rbtJuridica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtJuridicaActionPerformed(evt);
            }
        });
        panDadosServico.add(rbtJuridica);
        rbtJuridica.setBounds(210, 30, 85, 18);

        lblCampoCpfCnpj.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        lblCampoCpfCnpj.setText("CPF:");
        panDadosServico.add(lblCampoCpfCnpj);
        lblCampoCpfCnpj.setBounds(700, 30, 40, 18);

        btnOrcamento.setText("Criar orçamento");
        btnOrcamento.setEnabled(false);
        btnOrcamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrcamentoActionPerformed(evt);
            }
        });
        panDadosServico.add(btnOrcamento);
        btnOrcamento.setBounds(910, 110, 130, 30);

        lblAtivo.setText("Serviço já ativado ou não");
        panDadosServico.add(lblAtivo);
        lblAtivo.setBounds(920, 140, 130, 25);

        txtCpfCnpj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCpfCnpjActionPerformed(evt);
            }
        });
        txtCpfCnpj.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCpfCnpjKeyReleased(evt);
            }
        });
        panDadosServico.add(txtCpfCnpj);
        txtCpfCnpj.setBounds(740, 30, 120, 18);

        btnAtivarDesativar.setText("Ativar Serviço");
        btnAtivarDesativar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtivarDesativarActionPerformed(evt);
            }
        });
        panDadosServico.add(btnAtivarDesativar);
        btnAtivarDesativar.setBounds(930, 160, 100, 30);

        btnCadastrarPessoaJ.setText("Cadastrar Pessoa");
        btnCadastrarPessoaJ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarPessoaJActionPerformed(evt);
            }
        });
        panDadosServico.add(btnCadastrarPessoaJ);
        btnCadastrarPessoaJ.setBounds(960, 30, 120, 18);

        lblCpfCnpjExiste.setText("CPF Inválido");
        panDadosServico.add(lblCpfCnpjExiste);
        lblCpfCnpjExiste.setBounds(860, 30, 130, 18);

        lblCep2.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        lblCep2.setText("Cód. Funcionário:");
        panDadosServico.add(lblCep2);
        lblCep2.setBounds(10, 70, 140, 18);

        txtCodFunc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodFuncActionPerformed(evt);
            }
        });
        txtCodFunc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCodFuncKeyReleased(evt);
            }
        });
        panDadosServico.add(txtCodFunc);
        txtCodFunc.setBounds(150, 70, 120, 18);

        lblSelecionarFunc.setText("Inválido");
        panDadosServico.add(lblSelecionarFunc);
        lblSelecionarFunc.setBounds(270, 70, 130, 18);

        btnSelecionarfunc.setText("Selecionar Funcionário");
        btnSelecionarfunc.setEnabled(false);
        btnSelecionarfunc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelecionarfuncActionPerformed(evt);
            }
        });
        panDadosServico.add(btnSelecionarfunc);
        btnSelecionarfunc.setBounds(390, 70, 139, 18);

        btnListarFunc.setText("Listar Funcionários");
        btnListarFunc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarFuncActionPerformed(evt);
            }
        });
        panDadosServico.add(btnListarFunc);
        btnListarFunc.setBounds(530, 70, 130, 18);

        lblCep3.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        lblCep3.setText("Funcionário:");
        panDadosServico.add(lblCep3);
        lblCep3.setBounds(660, 70, 100, 18);

        btnArquivoRelatorio.setText("Trocar");
        btnArquivoRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArquivoRelatorioActionPerformed(evt);
            }
        });
        panDadosServico.add(btnArquivoRelatorio);
        btnArquivoRelatorio.setBounds(350, 50, 80, 18);

        lblRelatorio.setText("Nenhum arquivo selecionado.");
        panDadosServico.add(lblRelatorio);
        lblRelatorio.setBounds(190, 50, 150, 18);

        jLabel5.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        jLabel5.setText("Relatório do serviço:");
        panDadosServico.add(jLabel5);
        jLabel5.setBounds(10, 50, 170, 18);

        panDadosCliente.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados do Cliente"));
        panDadosCliente.setOpaque(false);
        panDadosCliente.setLayout(null);

        lblNomeFicticio.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        lblNomeFicticio.setText("Nome");
        panDadosCliente.add(lblNomeFicticio);
        lblNomeFicticio.setBounds(16, 10, 140, 18);

        txtNomePessoaFicticio.setEditable(false);
        panDadosCliente.add(txtNomePessoaFicticio);
        txtNomePessoaFicticio.setBounds(160, 10, 310, 18);

        lblTelefone.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        lblTelefone.setText("Telefone");
        panDadosCliente.add(lblTelefone);
        lblTelefone.setBounds(20, 50, 140, 18);

        txtTelefone.setEditable(false);
        panDadosCliente.add(txtTelefone);
        txtTelefone.setBounds(160, 50, 310, 18);

        lblCelularRamal.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        lblCelularRamal.setText("Celular");
        panDadosCliente.add(lblCelularRamal);
        lblCelularRamal.setBounds(540, 50, 140, 18);

        lblLogradouro.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        lblLogradouro.setText("Logradouro");
        panDadosCliente.add(lblLogradouro);
        lblLogradouro.setBounds(538, 10, 140, 18);

        txtLogradouro.setEditable(false);
        panDadosCliente.add(txtLogradouro);
        txtLogradouro.setBounds(700, 10, 316, 18);

        lblCidade.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        lblCidade.setText("Cidade");
        panDadosCliente.add(lblCidade);
        lblCidade.setBounds(20, 30, 140, 18);

        txtCidade.setEditable(false);
        panDadosCliente.add(txtCidade);
        txtCidade.setBounds(160, 30, 114, 18);

        lblEstado.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        lblEstado.setText("Estado");
        panDadosCliente.add(lblEstado);
        lblEstado.setBounds(280, 30, 73, 18);

        txtEstado.setEditable(false);
        panDadosCliente.add(txtEstado);
        txtEstado.setBounds(350, 30, 120, 18);

        lblBairro.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        lblBairro.setText("Bairro");
        panDadosCliente.add(lblBairro);
        lblBairro.setBounds(540, 30, 140, 18);

        txtBairro.setEditable(false);
        panDadosCliente.add(txtBairro);
        txtBairro.setBounds(700, 30, 178, 18);

        lblNumeroLog.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        lblNumeroLog.setText("N°");
        panDadosCliente.add(lblNumeroLog);
        lblNumeroLog.setBounds(900, 30, 39, 18);

        txtNumero.setEditable(false);
        panDadosCliente.add(txtNumero);
        txtNumero.setBounds(940, 30, 76, 18);

        txtCelularRamal.setEditable(false);
        panDadosCliente.add(txtCelularRamal);
        txtCelularRamal.setBounds(700, 50, 316, 18);

        lblRazaoSocial.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        lblRazaoSocial.setText("Razão Social");
        panDadosCliente.add(lblRazaoSocial);
        lblRazaoSocial.setBounds(10, 70, 140, 18);

        txtRazaoSocial.setEditable(false);
        panDadosCliente.add(txtRazaoSocial);
        txtRazaoSocial.setBounds(160, 70, 310, 18);

        lblSexoDesc.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        lblSexoDesc.setText("Sexo");
        panDadosCliente.add(lblSexoDesc);
        lblSexoDesc.setBounds(540, 70, 140, 18);

        lblSexoValor.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        lblSexoValor.setText("-");
        panDadosCliente.add(lblSexoValor);
        lblSexoValor.setBounds(710, 70, 140, 18);

        panDadosServico.add(panDadosCliente);
        panDadosCliente.setBounds(10, 200, 1080, 100);
        panDadosCliente.getAccessibleContext().setAccessibleDescription("");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Funcionários selecionados para executar esse serviço\n"));
        jPanel1.setOpaque(false);
        jPanel1.setLayout(null);

        tblFuncionarioTrabalhando.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblFuncionarioTrabalhando);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(10, 15, 680, 91);

        btnRemoveLinhaFunc.setText("Remover Funcionário");
        btnRemoveLinhaFunc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveLinhaFuncActionPerformed(evt);
            }
        });
        jPanel1.add(btnRemoveLinhaFunc);
        btnRemoveLinhaFunc.setBounds(700, 15, 160, 30);

        jButton2.setText("Remover Todos");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);
        jButton2.setBounds(700, 75, 160, 30);

        panDadosServico.add(jPanel1);
        jPanel1.setBounds(10, 90, 870, 113);

        lblCodigoServico.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        lblCodigoServico.setText("Cód. do Serviço:");
        panDadosServico.add(lblCodigoServico);
        lblCodigoServico.setBounds(10, 10, 103, 18);

        lblCodigoServicoInicial.setText("P");
        panDadosServico.add(lblCodigoServicoInicial);
        lblCodigoServicoInicial.setBounds(149, 10, 20, 18);

        txtCodigoServico.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCodigoServicoKeyReleased(evt);
            }
        });
        panDadosServico.add(txtCodigoServico);
        txtCodigoServico.setBounds(155, 10, 80, 18);

        lblExisteServico.setForeground(java.awt.Color.red);
        lblExisteServico.setText("Código Inválido.");
        panDadosServico.add(lblExisteServico);
        lblExisteServico.setBounds(240, 10, 120, 18);

        lblDataCadastro.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        lblDataCadastro.setText("Data de Cadastro:");
        panDadosServico.add(lblDataCadastro);
        lblDataCadastro.setBounds(770, 10, 150, 18);

        txtfDataServico.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter()));
        panDadosServico.add(txtfDataServico);
        txtfDataServico.setBounds(920, 10, 90, 18);

        btnHoje1.setText("Hoje");
        btnHoje1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHoje1ActionPerformed(evt);
            }
        });
        panDadosServico.add(btnHoje1);
        btnHoje1.setBounds(1020, 10, 60, 18);

        btnCadastrarPessoaJ1.setText("Cadastrar CPF");
        btnCadastrarPessoaJ1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarPessoaJ1ActionPerformed(evt);
            }
        });
        panDadosServico.add(btnCadastrarPessoaJ1);
        btnCadastrarPessoaJ1.setBounds(590, 20, 103, 18);

        lblCpfCnpjExiste1.setForeground(java.awt.Color.red);
        lblCpfCnpjExiste1.setText("CPF Inválido.");
        panDadosServico.add(lblCpfCnpjExiste1);
        lblCpfCnpjExiste1.setBounds(460, 30, 120, 18);

        lblNomeFuncValor.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        lblNomeFuncValor.setText("-");
        panDadosServico.add(lblNomeFuncValor);
        lblNomeFuncValor.setBounds(760, 70, 330, 18);

        lblDiretorioArquivo.setText("...");
        panDadosServico.add(lblDiretorioArquivo);
        lblDiretorioArquivo.setBounds(480, 50, 480, 18);

        btnRemoverArquivo.setText("Remover Arquivo");
        btnRemoverArquivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverArquivoActionPerformed(evt);
            }
        });
        panDadosServico.add(btnRemoverArquivo);
        btnRemoverArquivo.setBounds(960, 50, 120, 18);

        panPrincipal.add(panDadosServico);
        panDadosServico.setBounds(10, 30, 1100, 310);

        btnLimparTabela.setText("Limpar tabela");
        btnLimparTabela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparTabelaActionPerformed(evt);
            }
        });
        panPrincipal.add(btnLimparTabela);
        btnLimparTabela.setBounds(410, 340, 120, 30);

        btnCadastrarProduto.setText("Cadastrar novo Usuário");
        btnCadastrarProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarProdutoActionPerformed(evt);
            }
        });
        panPrincipal.add(btnCadastrarProduto);
        btnCadastrarProduto.setBounds(720, 340, 150, 30);

        btnHoje.setText("Hoje");
        btnHoje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHojeActionPerformed(evt);
            }
        });
        panPrincipal.add(btnHoje);
        btnHoje.setBounds(1030, 10, 70, 25);

        txtDataDepois.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDataDepoisActionPerformed(evt);
            }
        });
        txtDataDepois.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDataDepoisKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDataDepoisKeyTyped(evt);
            }
        });
        panPrincipal.add(txtDataDepois);
        txtDataDepois.setBounds(930, 10, 90, 25);

        lblPesquisarData1.setFont(new java.awt.Font("Malgun Gothic", 0, 10)); // NOI18N
        lblPesquisarData1.setText("Término:");
        panPrincipal.add(lblPesquisarData1);
        lblPesquisarData1.setBounds(870, 10, 70, 25);

        txtDataAntes.setText("1980-01-01");
        txtDataAntes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDataAntesActionPerformed(evt);
            }
        });
        txtDataAntes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDataAntesKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDataAntesKeyTyped(evt);
            }
        });
        panPrincipal.add(txtDataAntes);
        txtDataAntes.setBounds(770, 10, 80, 25);

        lblPesquisarData2.setFont(new java.awt.Font("Malgun Gothic", 0, 10)); // NOI18N
        lblPesquisarData2.setText("Data Início:");
        panPrincipal.add(lblPesquisarData2);
        lblPesquisarData2.setBounds(710, 10, 90, 25);

        getContentPane().add(panPrincipal);
        panPrincipal.setBounds(10, 10, 1125, 380);

        btnFecharFrame.setText("Fechar ");
        btnFecharFrame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFecharFrameActionPerformed(evt);
            }
        });
        getContentPane().add(btnFecharFrame);
        btnFecharFrame.setBounds(1055, 550, 80, 30);

        btnMenuPrincipal.setText("Menu Principal");
        btnMenuPrincipal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuPrincipalActionPerformed(evt);
            }
        });
        getContentPane().add(btnMenuPrincipal);
        btnMenuPrincipal.setBounds(900, 550, 130, 30);

        tblListagemServico.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblListagemServico.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblListagemServicoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblListagemServico);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 420, 1130, 120);

        lblServicoEncontrado.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblServicoEncontrado.setText("Serviços encontrados no banco de dados. Para visualizar ou alterar um registro, clique em um registro exibido na tabela.");
        getContentPane().add(lblServicoEncontrado);
        lblServicoEncontrado.setBounds(10, 390, 1040, 25);

        lblBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fundo.png"))); // NOI18N
        getContentPane().add(lblBackground);
        lblBackground.setBounds(0, -20, 1150, 650);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAtualizarTabelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarTabelaActionPerformed
        atualizarTabela();
        iniciarTabelaFuncionario();
    }//GEN-LAST:event_btnAtualizarTabelaActionPerformed

    private void btnAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarActionPerformed
//        if (verificarFuncVazio() && (cnpjCadastrado || cpfCadastrado)) {
//            try {
//                tblListagemServico.getCellEditor().stopCellEditing();
//                tblFuncionarioTrabalhando.getCellEditor().stopCellEditing();
//            } catch (Exception ex) {
//
//            }
//            try {
//                Servico servico = new Servico();
//                
//                servico.setCodigoServico();
//                
//                for (int i = 0; i < tblFuncionarioTrabalhando.getRowCount(); i++) {                    
//                    Funcionario funcionario = new Funcionario();
//                    funcionario.setCodigoFuncionario(((String) tblFuncionarioTrabalhando.getValueAt(i, 0)));
//                    servico.getListaFuncionario().add(funcionario);
//                }
//                DaoServico.alterarServico(s, lista, rbtFisica.isSelected(), txtCpfCnpj.getText());
//
//            } catch (SQLException ex) {
//                Logger.getLogger(FrmListagemServico.class.getName()).log(Level.SEVERE, null, ex);
//            } catch (ClassNotFoundException ex) {
//                Logger.getLogger(FrmListagemServico.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        } else {
//            JOptionPane.showMessageDialog(rootPane, "Dados inválidos ou incompletos.");
//        }
    }//GEN-LAST:event_btnAlterarActionPerformed

    private void btnDeletarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletarActionPerformed
        int flag = JOptionPane.showConfirmDialog(rootPane, "Deseja realmente excluir o serviço selecionado?");

        if (flag == 0) {
            Servico s = new Servico();
            s.setCodigoServico((String) tblListagemServico.getValueAt(tblListagemServico.getSelectedRow(), 0));
            try {
                DaoServico.deletarServico(s);
                atualizarTabela();
                iniciarTabelaFuncionario();
            } catch (SQLException ex) {
                Logger.getLogger(FrmListagemServico.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FrmListagemServico.class.getName()).log(Level.SEVERE, null, ex);
            }
        }


    }//GEN-LAST:event_btnDeletarActionPerformed

    private void cmbFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFiltroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbFiltroActionPerformed

    private void txtPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPesquisaActionPerformed

    }//GEN-LAST:event_txtPesquisaActionPerformed

    private void txtPesquisaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisaKeyReleased
        // Chamando método de listagem com filtro, se txt preenchido
        try {
            //criando variável de controle
            int controle = 0;

            //Se campo de texto não estiver vazio
            if (!"".equals(txtPesquisa.getText().trim())) {
                controle = 1;
                atualizarTabelaFiltrada();
            }

            //Se a variável de controle for 0, diz-se que o campo está vazio e, portanto, atualiza a JTable
            if (controle == 0) {
                atualizarTabela();
            }
        } catch (Exception ex) {
            System.out.println("Exceção: " + ex);
        }
    }//GEN-LAST:event_txtPesquisaKeyReleased

    private void txtPesquisaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisaKeyTyped

    }//GEN-LAST:event_txtPesquisaKeyTyped

    private void txtDataAntesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDataAntesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDataAntesActionPerformed

    private void txtDataAntesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDataAntesKeyReleased
        try {
            int controle = 0;
            if (!"".equals(txtDataAntes.getText().trim())) {
                controle = 1;
//                atualizarTabelaFiltradaData();
            }
            if (controle == 0) {
                atualizarTabela();
            }
        } catch (Exception ex) {
            System.out.println("Exceção: " + ex);
        }
    }//GEN-LAST:event_txtDataAntesKeyReleased

    private void txtDataAntesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDataAntesKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDataAntesKeyTyped

    private void txtDataDepoisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDataDepoisActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDataDepoisActionPerformed

    private void txtDataDepoisKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDataDepoisKeyReleased
        try {
            int controle = 0;
            if (!"".equals(txtDataDepois.getText().trim())) {
                controle = 1;
//                atualizarTabelaFiltradaData();
            }
            if (controle == 0) {
                atualizarTabela();
            }
        } catch (Exception ex) {
            System.out.println("Exceção: " + ex);
        }
    }//GEN-LAST:event_txtDataDepoisKeyReleased

    private void txtDataDepoisKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDataDepoisKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDataDepoisKeyTyped

    private void tblListagemServicoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblListagemServicoMouseClicked
        if ("Físico".equals((String) tblListagemServico.getValueAt(tblListagemServico.getSelectedRow(), 2))) {
            modoFisica();
            try {
                exibicaoFisica();
            } catch (SQLException ex) {
                Logger.getLogger(FrmListagemServico.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FrmListagemServico.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            modoJuridica();
            exibicaoJuridica();
        }
        String cod = (String) tblListagemServico.getValueAt(tblListagemServico.getSelectedRow(), 0);

        
            popularTabelaFuncionario(cod);
        

        String aux = "";
        aux = (String) tblListagemServico.getValueAt(tblListagemServico.getSelectedRow(), 1);
        switch (aux) {
            case "Preventivo":
                cmbTipoServico.removeAllItems();
                cmbTipoServico.addItem("Preventivo");
                cmbTipoServico.addItem("Corretivo");
                cmbTipoServico.setSelectedIndex(0);
                break;
            case "Corretivo":
                cmbTipoServico.removeAllItems();
                cmbTipoServico.addItem("Corretivo");
                cmbTipoServico.addItem("Emergencial");
                cmbTipoServico.setSelectedIndex(0);
                break;
            case "Emergencial":
                cmbTipoServico.removeAllItems();
                cmbTipoServico.addItem("Emergencial");
                cmbTipoServico.setSelectedIndex(0);
                break;
        }

        if ("Ativado".equals((String) tblListagemServico.getValueAt(tblListagemServico.getSelectedRow(), 4))) {
            btnAtivarDesativar.setText("Desativar/Concluir Serviço");
            lblAtivo.setText("Serviço está em execução.");
            flagAtivo = false;
        } else {
            btnAtivarDesativar.setText("Ativar/ Abrir Serviço");
            lblAtivo.setText("Serviço concluído / não ativo.");
            flagAtivo = true;
        }

        txtDataAntes.setText((String) tblListagemServico.getValueAt(tblListagemServico.getSelectedRow(), 5));
        txtDataDepois.setText((String) tblListagemServico.getValueAt(tblListagemServico.getSelectedRow(), 6));
        if (aux.equals("Preventivo")) {
            btnOrcamento.setEnabled(false);
            lblOrcamento.setText("Preventivo não possui orçamento.");

        } else {
            
                if (DaoOrcamento.existeOrcamento(cod)) {
                    lblOrcamento.setText("Serviço com um orçamento ativo.");
                    btnOrcamento.setText("Alterar Orçamento");
                    btnOrcamento.setEnabled(true);

                } else {
                    lblOrcamento.setText("Serviço sem orçamento.");
                    btnOrcamento.setText("Criar Orçamento");
                    btnOrcamento.setEnabled(true);
                }
            
        }


    }//GEN-LAST:event_tblListagemServicoMouseClicked

    private void btnHojeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHojeActionPerformed
        txtDataDepois.setText("" + new Date(Calendar.getInstance().getTimeInMillis()));
//        JOptionPane.showMessageDialog(rootPane, tblListagemServico.getSelectedRow());
//        atualizarTabelaFiltradaData();
    }//GEN-LAST:event_btnHojeActionPerformed

    private void cmbTipoServicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTipoServicoActionPerformed
        if (cmbTipoServico.getSelectedIndex() == 0) {
            btnOrcamento.setEnabled(false);
        } else {
            btnOrcamento.setEnabled(true);
        }
    }//GEN-LAST:event_cmbTipoServicoActionPerformed

    private void txtCepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCepActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCepActionPerformed

    private void txtCepKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCepKeyReleased

    }//GEN-LAST:event_txtCepKeyReleased

    private void txtCpfCnpjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCpfCnpjActionPerformed

    }//GEN-LAST:event_txtCpfCnpjActionPerformed

    private void txtCpfCnpjKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCpfCnpjKeyReleased
        if (rbtFisica.isSelected()) {
            if ((txtCpfCnpj.getText().length() < 11) || (txtCpfCnpj.getText().length() > 11)) {
                lblCpfCnpjExiste.setText("CPF Inválido");
                limparExibicaoPessoa();
            } else {
                DaoPessoa dp = new DaoPessoa();
                cpfCadastrado = dp.existePessoaFisica(txtCpfCnpj.getText());
                if (cpfCadastrado) {
                    lblCpfCnpjExiste.setText("CPF Cadastrado");
                    pessoaFisicaExibicao = dp.popularPessoaFisica(txtCpfCnpj.getText());
                    popularExibicaoPessoa(pessoaFisicaExibicao);
                } else {
                    lblCpfCnpjExiste.setText("CPF Inexistente");
                    limparExibicaoPessoa();
                }
            }
        } else if (rbtJuridica.isSelected()) {
            if ((txtCpfCnpj.getText().length() < 14) || (txtCpfCnpj.getText().length() > 14)) {
                lblCpfCnpjExiste.setText("CNPJ Inválido");
                limparExibicaoPessoa();
            } else {
                DaoPessoa dp = new DaoPessoa();

                cnpjCadastrado = dp.existePessoaJuridica(txtCpfCnpj.getText());
                if (cnpjCadastrado) {
                    lblCpfCnpjExiste.setText("CNPJ Cadastrado");
                    //pessoaJuridicaExibicao = dp.popularPessoaJuridica(txtCpfCnpj.getText(), txtCep.getText());
                    popularExibicaoPessoaJuridica(pessoaJuridicaExibicao);
                } else {
                    lblCpfCnpjExiste.setText("CNPJ Inexistente");
                    limparExibicaoPessoaJuridica();
                }

            }
        }
    }//GEN-LAST:event_txtCpfCnpjKeyReleased

    private void btnCadastrarPessoaJActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarPessoaJActionPerformed
        if (rbtFisica.isSelected()) {
            FrmCadastroPessoa telaCadP = new FrmCadastroPessoa(false);
            telaCadP.setVisible(true);
        } else if (rbtJuridica.isSelected()) {
            FrmCadastroPessoa telaCadP = new FrmCadastroPessoa(true);
            telaCadP.setVisible(true);
        }
    }//GEN-LAST:event_btnCadastrarPessoaJActionPerformed

    private void btnArquivoRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArquivoRelatorioActionPerformed
        FileFilter ft1 = new FileNameExtensionFilter("Documentos do Word", "docx");
        FileFilter ft2 = new FileNameExtensionFilter("Arquivos de texto", "txt");
        db.addChoosableFileFilter(ft1);
        db.addChoosableFileFilter(ft2);

        int returnVal = db.showOpenDialog(this);

        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            java.io.File file = db.getSelectedFile();
            String fileConvert = file.toString();
            lblRelatorio.setText(" " + fileConvert + " ");
        }
    }//GEN-LAST:event_btnArquivoRelatorioActionPerformed

    private void rbtFisicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtFisicaActionPerformed
        modoFisica();
    }//GEN-LAST:event_rbtFisicaActionPerformed

    private void rbtJuridicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtJuridicaActionPerformed
        modoJuridica();
    }//GEN-LAST:event_rbtJuridicaActionPerformed

    private void btnOrcamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrcamentoActionPerformed
        Servico s = new Servico();
        s.setCodigoServico((String) tblListagemServico.getValueAt(tblListagemServico.getSelectedRow(), 0));

        if (DaoServico.verificarServicoAtivo(s.getCodigoServico())) {
            if (btnOrcamento.getText().equals("Criar Orçamento")) {
                FrmCadastroOrcamento telaCadOrcamento = new FrmCadastroOrcamento(s.getCodigoServico(), true);
                telaCadOrcamento.setVisible(true);
            } else {
                FrmCadastroOrcamento telaCadOrcamento = new FrmCadastroOrcamento(s.getCodigoServico(), false);
                telaCadOrcamento.setVisible(true);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Serviço ainda não está ativado. Ative-o para gerar um orçamento para o mesmo.");
        }
    }//GEN-LAST:event_btnOrcamentoActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        iniciarTabelaFuncionario();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnRemoveLinhaFuncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveLinhaFuncActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblFuncionarioTrabalhando.getModel();
        if (model.getRowCount() != 0) {
            model.removeRow(tblFuncionarioTrabalhando.getSelectedRow());
            tblFuncionarioTrabalhando.setModel(model);
        }
    }//GEN-LAST:event_btnRemoveLinhaFuncActionPerformed

    private void txtCodFuncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodFuncActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodFuncActionPerformed

    private void txtCodFuncKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodFuncKeyReleased

        flagFuncionario = DaoFuncionario.existeFuncionario(txtCodFunc.getText());
        if (flagFuncionario) {
            f = DaoFuncionario.popularFuncionario(txtCodFunc.getText());
//            txtNomeFunc.setText(f.getPessoa().getNome());
            lblSelecionarFunc.setText("Funcionário Livre");
            flagFuncionario = true;
            btnSelecionarfunc.setEnabled(true);
            if (DaoServico.isFuncionarioEmServico(txtCodFunc.getText())) {
                lblSelecionarFunc.setText("Funcionário já vinculado a outro serviço");
                flagFuncionario = true;
                btnSelecionarfunc.setEnabled(true);
            }
        } else {
         //   txtNomeFunc.setText("");
            lblSelecionarFunc.setText("Funcionário Inexistente");
            flagFuncionario = false;
            btnSelecionarfunc.setEnabled(false);
        }
    }//GEN-LAST:event_txtCodFuncKeyReleased

    private void btnSelecionarfuncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelecionarfuncActionPerformed
//        boolean flag = true;
//        if (flagFuncionario) {
//            DefaultTableModel model = (DefaultTableModel) tblFuncionarioTrabalhando.getModel();
//            Object rowData[] = new Object[3];
//            rowData[0] = (String) txtCodFunc.getText();
//            rowData[1] = (String) txtNomeFunc.getText();
//            String codigos = "";
//            try {
//                codigos = DaoServico.listarServicosDoFuncionario(txtCodFunc.getText());
//            } catch (SQLException ex) {
//                Logger.getLogger(FrmCadastroServico.class.getName()).log(Level.SEVERE, null, ex);
//            } catch (ClassNotFoundException ex) {
//                Logger.getLogger(FrmCadastroServico.class.getName()).log(Level.SEVERE, null, ex);
//            }
//            if (codigos.equals("")) {
//                rowData[2] = (String) "Livre";
//            } else {
//                codigos = codigos.substring(2);
//                rowData[2] = (String) codigos;
//            }
//            String aux = (String) rowData[0];
//            String aux2 = "";
//            for (int i = 0; i < model.getRowCount(); i++) {
//                aux2 = (String) model.getValueAt(i, 0);
//                if (aux.equals(aux2)) {
//                    flag = false;
//                }
//            }
//            if (flag) {
//                model.addRow(rowData);
//                tblFuncionarioTrabalhando.setModel(model);
//                txtCodFunc.setText("");
//                txtCodFunc.requestFocus();
//            }
//        }
    }//GEN-LAST:event_btnSelecionarfuncActionPerformed

    private void btnListarFuncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarFuncActionPerformed
        control.Janelas.abrirListagemFuncionario();
    }//GEN-LAST:event_btnListarFuncActionPerformed

    private void btnAtivarDesativarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtivarDesativarActionPerformed
        try {
            DaoServico.ativarDesativarServico(Integer.parseInt((String) tblListagemServico.getValueAt(tblListagemServico.getSelectedRow(), 0)), flagAtivo);

            atualizarTabela();
        } catch (SQLException ex) {
            Logger.getLogger(FrmListagemServico.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FrmListagemServico.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAtivarDesativarActionPerformed

    private void btnFecharFrameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFecharFrameActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnFecharFrameActionPerformed

    private void btnMenuPrincipalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuPrincipalActionPerformed
        control.Janelas.focarPrincipal();
    }//GEN-LAST:event_btnMenuPrincipalActionPerformed

    private void btnLimparTabelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparTabelaActionPerformed
       // limparTabela();
    }//GEN-LAST:event_btnLimparTabelaActionPerformed

    private void btnCadastrarProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarProdutoActionPerformed
        control.Janelas.abrirCadastroUsuario();
    }//GEN-LAST:event_btnCadastrarProdutoActionPerformed

    private void txtCodigoServicoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodigoServicoKeyReleased
       // txtCodigoServico.setText(TextSize.maxLenghtServico(txtCodigoServico.getText()));
       // verificarCodigoServico();
    }//GEN-LAST:event_txtCodigoServicoKeyReleased

    private void btnHoje1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHoje1ActionPerformed
        txtfDataServico.setText(control.Datas.getDiaHoje());
    }//GEN-LAST:event_btnHoje1ActionPerformed

    private void btnCadastrarPessoaJ1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarPessoaJ1ActionPerformed
        control.Janelas.abrirCadastroPessoa();
    }//GEN-LAST:event_btnCadastrarPessoaJ1ActionPerformed

    private void btnRemoverArquivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverArquivoActionPerformed
       // removerArquivo();
    }//GEN-LAST:event_btnRemoverArquivoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmListagemServico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmListagemServico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmListagemServico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmListagemServico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmListagemServico(control.SynchroSoft.getNvlAdm()).setVisible(true);
            }
        });
    }

    private void atualizarTabelaFiltrada() {
        ArrayList<Servico> lista = new ArrayList<>();
        lista = DaoServico.listarServicoFiltrada((String) cmbFiltro.getSelectedItem(), txtPesquisa.getText().trim().toLowerCase());
        String[] nomeColunas = {"Código Serviço", "Tipo Serviço", "Tipo Cliente", "Descrição", "Status", "Data Início", "Data Fim", "PK_REF"};
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {

                    return false;
                }
            };
            tblListagemServico.setModel(model);
            model.setColumnIdentifiers(nomeColunas);
            model.setRowCount(0);
            Object rowData[] = new Object[8];
            for (int i = 0; i < lista.size(); i++) {
                rowData[0] = lista.get(i).getCodigoServico();
                //rowData[1] = lista.get(i).getTipoServico();
                rowData[2] = lista.get(i).getTipoClienteSTR();
                rowData[3] = lista.get(i).getDescricaoServicoFILE();
                rowData[4] = lista.get(i).getStatusServicoSTR();
                rowData[5] = lista.get(i).getDataServico().toString();
                rowData[6] = lista.get(i).getDataServicoFim().toString();
                rowData[7] = lista.get(i).getCodigoServico();

                model.addRow(rowData);
            }

        } catch (Exception ex) {
            System.out.println("Erro ao popular tabela.\n\n" + ex.getMessage());
        }

        tblListagemServico.getColumnModel().getColumn(7).setMinWidth(0);
        tblListagemServico.getColumnModel().getColumn(7).setPreferredWidth(0);
        tblListagemServico.getColumnModel().getColumn(7).setMaxWidth(0);
    }

//    private void atualizarTabelaFiltradaData() {
//        ArrayList<Servico> lista = new ArrayList<>();
//        lista = DaoServico.listarServicoFiltrada(txt.getText().trim());
//        String[] nomeColunas = {"Código Serviço", "Tipo Serviço", "Tipo Cliente", "Descrição", "Status", "Data Início", "Data Fim", "PK_REF"};
//        try {
//            DefaultTableModel model = new DefaultTableModel() {
//                @Override
//                public boolean isCellEditable(int row, int column) {
//                    
//                    return false;
//                }
//            };
//            tblListagemServico.setModel(model);
//            model.setColumnIdentifiers(nomeColunas);
//            model.setRowCount(0);
//            Object rowData[] = new Object[8];
//            for (int i = 0; i < lista.size(); i++) {
//                rowData[0] = Integer.toString(lista.get(i).getCodigoServico());
//                rowData[1] = lista.get(i).getTipoServico();
//                
//                if (lista.get(i).isTipoCliente()){
//                    rowData[2] = "Jurídico";
//                } else {
//                    rowData[2] = "Físico";
//                }
//                
//                rowData[3] = lista.get(i).getDescricaoServicoFILE();
//                
//                if (lista.get(i).isStatusServico()) {
//                    rowData[4] = "Ativado";
//                } else {
//                    rowData[4] = "Desativado";
//                }
//                rowData[5] = lista.get(i).getDataServico().toString();
//                rowData[6] = lista.get(i).getDataServicoFim().toString();
//                rowData[7] = Integer.toString(lista.get(i).getCodigoServico());
//                
//                model.addRow(rowData);
//            }
//
//        } catch (Exception ex) {
//            System.out.println("Erro ao popular tabela.\n\n" + ex.getMessage());
//        }
//        tblListagemServico.getColumnModel().getColumn(7).setMinWidth(0);
//        tblListagemServico.getColumnModel().getColumn(7).setPreferredWidth(0);
//        tblListagemServico.getColumnModel().getColumn(7).setMaxWidth(0);
//    }
    private void iniciarTabelaFuncionario() {
        String[] nomeColunas = {"Código", "Funcionário", "Cód. Serviços em execução"};
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {

                    return false;
                }
            };
            tblFuncionarioTrabalhando.setModel(model);
            model.setColumnIdentifiers(nomeColunas);
            model.setRowCount(0);
        } catch (Exception ex) {
            System.out.println("Erro ao iniciar tabela funcionário.\n\n" + ex.getMessage());
        }
    }

    private void popularTabelaFuncionario(String codigoServico) {
        ArrayList<Funcionario> lista = new ArrayList<>();
        lista = DaoServico.listarFuncionariosEmServico(codigoServico);
        String[] nomeColunas = {"Código", "Funcionário", "Cód. Serviços em execução"};
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {

                    return false;
                }
            };
            tblFuncionarioTrabalhando.setModel(model);
            model.setColumnIdentifiers(nomeColunas);
            model.setRowCount(0);
            Object rowData[] = new Object[3];
            for (int i = 0; i < lista.size(); i++) {
                rowData[0] = lista.get(i).getCodigoFuncionario();
                rowData[1] = lista.get(i).getPessoa().getNome();
                rowData[2] = lista.get(i).getCargo();

                model.addRow(rowData);
            }

        } catch (Exception ex) {
            System.out.println("Erro ao iniciar tabela funcionário.\n\n" + ex.getMessage());
        }
    }

    private void atualizarTabela() {
        ArrayList<Servico> lista = new ArrayList<>();
        lista = DaoServico.listarServico();
        String[] nomeColunas = {"Código Serviço", "Tipo Serviço", "Tipo Cliente", "Descrição", "Status", "Data Início", "Data Fim", "PK_REF"};
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {

                    return false;
                }
            };
            tblListagemServico.setModel(model);
            model.setColumnIdentifiers(nomeColunas);
            model.setRowCount(0);
            Object rowData[] = new Object[8];
            for (int i = 0; i < lista.size(); i++) {
                rowData[0] = lista.get(i).getCodigoServico();
                rowData[1] = lista.get(i).getTipoServicoSTR();
                rowData[2] = lista.get(i).getTipoClienteSTR();
                rowData[3] = lista.get(i).getDescricaoServicoFILE();
                rowData[4] = lista.get(i).getStatusServicoSTR();
                rowData[5] = lista.get(i).getDataServico().toString();
                rowData[6] = lista.get(i).getDataServicoFim().toString();
                rowData[7] = lista.get(i).getCodigoServico();

                model.addRow(rowData);
            }

        } catch (Exception ex) {
            System.out.println("Erro ao popular tabela.\n\n" + ex.getMessage());
        }

        tblListagemServico.getColumnModel().getColumn(7).setMinWidth(0);
        tblListagemServico.getColumnModel().getColumn(7).setPreferredWidth(0);
        tblListagemServico.getColumnModel().getColumn(7).setMaxWidth(0);
    }

    public void modoFisica() {
        lblCampoCpfCnpj.setText("CPF");
        txtRazaoSocial.setVisible(false);
        lblRazaoSocial.setVisible(false);
        lblNomeFicticio.setText("Nome");
        lblCelularRamal.setText("Celular");
        lblSexoDesc.setVisible(true);
       // rbtFeminino.setVisible(true);
       // rbtMasculino.setVisible(true);
        rbtFisica.setSelected(true);
    }

    public void modoJuridica() {
        lblCampoCpfCnpj.setText("CNPJ");
        txtRazaoSocial.setVisible(true);
        lblRazaoSocial.setVisible(true);
        lblNomeFicticio.setText("Nome Fictício");
        lblCelularRamal.setText("Ramal");
        lblSexoDesc.setVisible(false);
       //rbtFeminino.setVisible(false);
       // rbtMasculino.setVisible(false);
        rbtJuridica.setSelected(true);
    }

    public void exibicaoFisica() throws SQLException, ClassNotFoundException {
        Servico s = new Servico();
        PessoaFisica pf = new PessoaFisica();
        Endereco end = new Endereco();
        boolean flag;
        ArrayList<Object> lista = new ArrayList<>();

        s.setCodigoServico(((String) tblListagemServico.getValueAt(tblListagemServico.getSelectedRow(), 0)));
        s.setDescricaoServicoFILE(((String) tblListagemServico.getValueAt(tblListagemServico.getSelectedRow(), 3)));

        try {
            lista = DaoServico.popularListaServicoDetalhada(s.getCodigoServico(), 1);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FrmListagemServico.class.getName()).log(Level.SEVERE, null, ex);
        }

        pf = (PessoaFisica) lista.get(0);

        end = (Endereco) lista.get(2);
        flag = (Boolean) lista.get(3);

        txtNomePessoaFicticio.setText(pf.getPessoa().getNome());
        txtLogradouro.setText(end.getLogradouro());
        txtCidade.setText(end.getCidade());
        txtEstado.setText(end.getEstado());
        txtBairro.setText(end.getBairro());
        txtNumero.setText(pf.getPessoa().getComplementoLogradouro());
        txtTelefone.setText("" + pf.getPessoa().getTelefone());
        txtCelularRamal.setText("" + pf.getCelular());
        lblRelatorio.setText(s.getDescricaoServicoFILE());
        if (pf.getSexoBanco() == 0) {
          //  rbtMasculino.setSelected(true);
        } else {
          //  rbtFeminino.setSelected(true);
        }

        txtCep.setText(end.getCep());
        txtCpfCnpj.setText(pf.getCpf());

    }

    public void popularExibicaoPessoaJuridica(PessoaJuridica pj) {
        txtNomePessoaFicticio.setText(pj.getPessoa().getNome());
        txtLogradouro.setText(pj.getPessoa().getEndereco().getLogradouro());
        txtCidade.setText(pj.getPessoa().getEndereco().getCidade());
        txtEstado.setText(pj.getPessoa().getEndereco().getEstado());
        txtBairro.setText(pj.getPessoa().getEndereco().getBairro());
        txtNumero.setText(pj.getPessoa().getComplementoLogradouro());
        txtTelefone.setText("" + pj.getPessoa().getTelefone());
        txtCelularRamal.setText("" + pj.getRamalCliente());
        txtRazaoSocial.setText(pj.getRazaoSocial());

    }

    public void popularExibicaoPessoa(PessoaFisica pf) {
        txtNomePessoaFicticio.setText(pf.getPessoa().getNome());
        txtLogradouro.setText(pf.getPessoa().getEndereco().getLogradouro());
        txtCidade.setText(pf.getPessoa().getEndereco().getCidade());
        txtEstado.setText(pf.getPessoa().getEndereco().getEstado());
        txtBairro.setText(pf.getPessoa().getEndereco().getBairro());
        txtNumero.setText(pf.getPessoa().getComplementoLogradouro());
        txtTelefone.setText("" + pf.getPessoa().getTelefone());
        txtCelularRamal.setText("" + pf.getCelular());

        if (pf.getSexoBanco() == 0) {
          //  rbtMasculino.setSelected(true);
        } else {
          //  rbtFeminino.setSelected(true);
        }

    }

    public void limparExibicaoPessoaJuridica() {
        txtNomePessoaFicticio.setText("");
        txtLogradouro.setText("");
        txtCidade.setText("");
        txtEstado.setText("");
        txtBairro.setText("");
        txtNumero.setText("");
        txtTelefone.setText("");
        txtCelularRamal.setText("");
        txtRazaoSocial.setText("");

    }

    public void limparExibicaoEndereco() {
        txtLogradouro.setText("");
        txtCidade.setText("");
        txtBairro.setText("");
        txtEstado.setText("");
    }

    public void popularExibicaoEndereco(Endereco end) {
        txtLogradouro.setText(end.getLogradouro());
        txtCidade.setText(end.getCidade());
        txtBairro.setText(end.getBairro());
        txtEstado.setText(end.getEstado());
    }

    public void limparExibicaoPessoa() {
        txtNomePessoaFicticio.setText("");
        txtLogradouro.setText("");
        txtCidade.setText("");
        txtEstado.setText("");
        txtBairro.setText("");
        txtNumero.setText("");
        txtTelefone.setText("");
        txtCelularRamal.setText("");

    }

    public boolean verificarFuncVazio() {
        if (tblFuncionarioTrabalhando.getRowCount() == 0) {
            return false;
        } else {
            return true;
        }
    }

    public void exibicaoJuridica() {
        Servico s = new Servico();
        PessoaJuridica pj = new PessoaJuridica();
        Endereco end = new Endereco();
        boolean flag;
        ArrayList<Object> lista = new ArrayList<>();

        s.setCodigoServico(((String) tblListagemServico.getValueAt(tblListagemServico.getSelectedRow(), 0)));

        try {
            lista = DaoServico.popularListaServicoDetalhada(s.getCodigoServico(), 0);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FrmListagemServico.class.getName()).log(Level.SEVERE, null, ex);
        }

        pj = (PessoaJuridica) lista.get(1);

        end = (Endereco) lista.get(2);
        flag = (Boolean) lista.get(3);

        txtCpfCnpj.setText(pj.getCnpj());
        txtNomePessoaFicticio.setText(pj.getPessoa().getNome());
        txtLogradouro.setText(end.getLogradouro());
        txtCidade.setText(end.getCidade());
        txtEstado.setText(end.getEstado());
        txtBairro.setText(end.getBairro());
        txtNumero.setText(pj.getPessoa().getComplementoLogradouro());
        txtTelefone.setText("" + pj.getPessoa().getTelefone());
        txtCelularRamal.setText("" + pj.getRamalCliente());
        txtRazaoSocial.setText(pj.getRazaoSocial());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlterar;
    private javax.swing.JButton btnArquivoRelatorio;
    private javax.swing.JButton btnAtivarDesativar;
    private javax.swing.JButton btnAtualizarTabela;
    private javax.swing.JButton btnCadastrarPessoaJ;
    private javax.swing.JButton btnCadastrarPessoaJ1;
    private javax.swing.JButton btnCadastrarProduto;
    private javax.swing.JButton btnDeletar;
    private javax.swing.JButton btnFecharFrame;
    private javax.swing.JButton btnHoje;
    private javax.swing.JButton btnHoje1;
    private javax.swing.JButton btnLimparTabela;
    private javax.swing.JButton btnListarFunc;
    private javax.swing.JButton btnMenuPrincipal;
    private javax.swing.JButton btnOrcamento;
    private javax.swing.JButton btnRemoveLinhaFunc;
    private javax.swing.JButton btnRemoverArquivo;
    private javax.swing.JButton btnSelecionarfunc;
    private javax.swing.JComboBox<String> cmbFiltro;
    private javax.swing.JComboBox<String> cmbTipoServico;
    private javax.swing.JFileChooser db;
    private javax.swing.ButtonGroup grupoTipoCliente;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAtivo;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JLabel lblBairro;
    private javax.swing.JLabel lblCampoCpfCnpj;
    private javax.swing.JLabel lblCelularRamal;
    private javax.swing.JLabel lblCep;
    private javax.swing.JLabel lblCep2;
    private javax.swing.JLabel lblCep3;
    private javax.swing.JLabel lblCidade;
    private javax.swing.JLabel lblCodigoServico;
    private javax.swing.JLabel lblCodigoServicoInicial;
    private javax.swing.JLabel lblCpfCnpjExiste;
    private javax.swing.JLabel lblCpfCnpjExiste1;
    private javax.swing.JLabel lblDataCadastro;
    private javax.swing.JLabel lblDescrever;
    private javax.swing.JLabel lblDiretorioArquivo;
    private javax.swing.JLabel lblEstado;
    private javax.swing.JLabel lblExisteServico;
    private javax.swing.JLabel lblLogradouro;
    private javax.swing.JLabel lblNomeFicticio;
    private javax.swing.JLabel lblNomeFuncValor;
    private javax.swing.JLabel lblNumeroLog;
    private javax.swing.JLabel lblOrcamento;
    private javax.swing.JLabel lblPesquisar;
    private javax.swing.JLabel lblPesquisarData1;
    private javax.swing.JLabel lblPesquisarData2;
    private javax.swing.JLabel lblRazaoSocial;
    private javax.swing.JLabel lblRelatorio;
    private javax.swing.JLabel lblSelecionarFunc;
    private javax.swing.JLabel lblServicoEncontrado;
    private javax.swing.JLabel lblSexoDesc;
    private javax.swing.JLabel lblSexoValor;
    private javax.swing.JLabel lblTelefone;
    private javax.swing.JPanel panDadosCliente;
    private javax.swing.JPanel panDadosServico;
    private javax.swing.JPanel panPrincipal;
    private javax.swing.JRadioButton rbtFisica;
    private javax.swing.JRadioButton rbtJuridica;
    private javax.swing.JTable tblFuncionarioTrabalhando;
    private javax.swing.JTable tblListagemServico;
    private javax.swing.JTextField txtBairro;
    private javax.swing.JTextField txtCelularRamal;
    private javax.swing.JTextField txtCep;
    private javax.swing.JTextField txtCidade;
    private javax.swing.JTextField txtCodFunc;
    private javax.swing.JTextField txtCodigoServico;
    private javax.swing.JTextField txtCpfCnpj;
    private javax.swing.JTextField txtDataAntes;
    private javax.swing.JTextField txtDataDepois;
    private javax.swing.JTextField txtEstado;
    private javax.swing.JTextField txtLogradouro;
    private javax.swing.JTextField txtNomePessoaFicticio;
    private javax.swing.JTextField txtNumero;
    private javax.swing.JTextField txtPesquisa;
    private javax.swing.JTextField txtRazaoSocial;
    private javax.swing.JTextField txtTelefone;
    private javax.swing.JFormattedTextField txtfDataServico;
    // End of variables declaration//GEN-END:variables
}
