/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import dao.DaoFuncionario;
import dao.DaoOrcamento;
import dao.DaoServico;
import java.awt.Color;
import java.awt.Toolkit;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import model.Endereco;
import model.Funcionario;
import model.Pessoa;
import model.PessoaFisica;
import model.PessoaJuridica;
import model.Servico;

/**
 *
 * @author LuizV1
 */
public class FrmListagemServico extends javax.swing.JFrame {

    boolean flagOrcamento;
    boolean existeCep;
    boolean existeCpf;
    boolean existeCnpj;
    boolean existeServico;
    boolean existeContrato;
    boolean flagFuncionario;
    boolean flagAtivo = false;
    private boolean ultimoTipoPesquisa;
    String PK_REF;

    Endereco endExibicao;
    PessoaFisica pessoaFisicaExibicao;
    PessoaJuridica pessoaJuridicaExibicao;
    Pessoa pessoaExibicao;

    Funcionario f = new Funcionario();

    public FrmListagemServico(int nvlAdm) {
        initComponents();
        inicializarTabelaServico();
        inicializarTabelaFuncionario();
        modoPesquisaNormal();
        selecionarAoFocar();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoTipoCliente = new javax.swing.ButtonGroup();
        selecionarArquivo = new javax.swing.JFileChooser();
        panPrincipal = new javax.swing.JPanel();
        btnAlterar = new javax.swing.JButton();
        cmbFiltro = new javax.swing.JComboBox<>();
        btnDeletar = new javax.swing.JButton();
        lblPesquisar = new javax.swing.JLabel();
        btnAtualizarTabela = new javax.swing.JButton();
        panDadosServico = new javax.swing.JPanel();
        lblTipoServico = new javax.swing.JLabel();
        cmbTipoServico = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        rbtFisica = new javax.swing.JRadioButton();
        rbtJuridica = new javax.swing.JRadioButton();
        lblCep2 = new javax.swing.JLabel();
        txtCodFunc = new javax.swing.JTextField();
        lblSelecionarFunc = new javax.swing.JLabel();
        btnSelecionarfunc = new javax.swing.JButton();
        lblCep3 = new javax.swing.JLabel();
        btnArquivoRelatorio = new javax.swing.JButton();
        lblNomeArquivoTrocado = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        panDadosCliente = new javax.swing.JPanel();
        lblNomeFicticio = new javax.swing.JLabel();
        txtNomePessoaFicticio = new javax.swing.JTextField();
        lblTelefone = new javax.swing.JLabel();
        txtTelefone = new javax.swing.JTextField();
        lblCelularRamal = new javax.swing.JLabel();
        lblLogradouro = new javax.swing.JLabel();
        txtLogradouro = new javax.swing.JTextField();
        lblCidade = new javax.swing.JLabel();
        txtCidade = new javax.swing.JTextField();
        lblEstado = new javax.swing.JLabel();
        txtEstado = new javax.swing.JTextField();
        lblBairro = new javax.swing.JLabel();
        txtBairro = new javax.swing.JTextField();
        lblNumeroLog = new javax.swing.JLabel();
        txtNumero = new javax.swing.JTextField();
        txtCelularRamal = new javax.swing.JTextField();
        lblRazaoSocial = new javax.swing.JLabel();
        txtRazaoSocial = new javax.swing.JTextField();
        lblSexoDesc = new javax.swing.JLabel();
        lblSexoValor = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblFuncionarioTrabalhando = new javax.swing.JTable();
        btnRemoveLinhaFunc = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        lblCodigoServico = new javax.swing.JLabel();
        txtCodigoServico = new javax.swing.JTextField();
        lblDataCadastro = new javax.swing.JLabel();
        txtfDataInicio = new javax.swing.JFormattedTextField();
        btnHojeInicio = new javax.swing.JButton();
        lblNomeFuncValor = new javax.swing.JLabel();
        lblNomeArquivo = new javax.swing.JLabel();
        btnRemoverArquivo = new javax.swing.JButton();
        lblCampoCpfCnpj = new javax.swing.JLabel();
        txtCpfCnpj = new javax.swing.JTextField();
        lblCpfCnpjExiste = new javax.swing.JLabel();
        lblCep = new javax.swing.JLabel();
        txtfCep = new javax.swing.JFormattedTextField();
        lblCepExiste = new javax.swing.JLabel();
        btnAbrirArquivoRelatorio = new javax.swing.JButton();
        lblDataEncerramento = new javax.swing.JLabel();
        txtfDataEncerramento = new javax.swing.JFormattedTextField();
        btnHojeFim = new javax.swing.JButton();
        lblNumeroLogradouro = new javax.swing.JLabel();
        txtNumeroLogradouro = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        btnOrcamento = new javax.swing.JButton();
        lblOrcamento = new javax.swing.JLabel();
        lblAtivo = new javax.swing.JLabel();
        btnAtivarDesativar = new javax.swing.JButton();
        lblDiretorioArquivoTrocado = new javax.swing.JLabel();
        btnLimparTabela = new javax.swing.JButton();
        btnCadastrarServico = new javax.swing.JButton();
        lblDigiteODado = new javax.swing.JLabel();
        txtPesquisa = new javax.swing.JTextField();
        txtfDataDe = new javax.swing.JFormattedTextField();
        btnHojePesquisa = new javax.swing.JButton();
        lblDataAte = new javax.swing.JLabel();
        txtfDataAte = new javax.swing.JFormattedTextField();
        btnPesquisar = new javax.swing.JButton();
        btnFecharFrame = new javax.swing.JButton();
        btnMenuPrincipal = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblListagemServico = new javax.swing.JTable();
        lblServicoEncontrado = new javax.swing.JLabel();
        btnCadastrarPessoaJ = new javax.swing.JButton();
        btnCadastrarCep = new javax.swing.JButton();
        btnListarFunc = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lblBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Listar Serviços");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/img/logopng32.png")));
        setMaximumSize(new java.awt.Dimension(1152, 720));
        setMinimumSize(new java.awt.Dimension(1152, 720));
        setPreferredSize(new java.awt.Dimension(1152, 720));
        setResizable(false);
        getContentPane().setLayout(null);

        panPrincipal.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panPrincipal.setOpaque(false);
        panPrincipal.setLayout(null);

        btnAlterar.setText("Alterar");
        btnAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarActionPerformed(evt);
            }
        });
        panPrincipal.add(btnAlterar);
        btnAlterar.setBounds(980, 430, 130, 30);

        cmbFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Código Serviço", "Tipo Serviço", "Serviço Ativo?", "Data Início", "Data Encerramento", "Data Início Entre/Até", "Data Encerramento Entre/Até" }));
        cmbFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFiltroActionPerformed(evt);
            }
        });
        panPrincipal.add(cmbFiltro);
        cmbFiltro.setBounds(140, 3, 180, 25);

        btnDeletar.setText("Deletar registro selecionado");
        btnDeletar.setEnabled(false);
        btnDeletar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletarActionPerformed(evt);
            }
        });
        panPrincipal.add(btnDeletar);
        btnDeletar.setBounds(10, 430, 170, 30);

        lblPesquisar.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblPesquisar.setText("Pesquisar por: ");
        panPrincipal.add(lblPesquisar);
        lblPesquisar.setBounds(10, 3, 160, 25);

        btnAtualizarTabela.setText("Listar todos os registros");
        btnAtualizarTabela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarTabelaActionPerformed(evt);
            }
        });
        panPrincipal.add(btnAtualizarTabela);
        btnAtualizarTabela.setBounds(550, 430, 147, 30);

        panDadosServico.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados do serviço selecionado"));
        panDadosServico.setOpaque(false);
        panDadosServico.setLayout(null);

        lblTipoServico.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblTipoServico.setText("Tipo de serviço:");
        panDadosServico.add(lblTipoServico);
        lblTipoServico.setBounds(268, 10, 130, 25);

        cmbTipoServico.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Preventivo", "Corretivo", "Emergencial", "-" }));
        cmbTipoServico.setSelectedIndex(3);
        cmbTipoServico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTipoServicoActionPerformed(evt);
            }
        });
        panDadosServico.add(cmbTipoServico);
        cmbTipoServico.setBounds(400, 10, 100, 25);

        jLabel4.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        jLabel4.setText("Tipo de Cliente:");
        panDadosServico.add(jLabel4);
        jLabel4.setBounds(10, 40, 160, 25);

        grupoTipoCliente.add(rbtFisica);
        rbtFisica.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        rbtFisica.setSelected(true);
        rbtFisica.setText("Física");
        rbtFisica.setOpaque(false);
        rbtFisica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtFisicaActionPerformed(evt);
            }
        });
        panDadosServico.add(rbtFisica);
        rbtFisica.setBounds(150, 40, 69, 25);

        grupoTipoCliente.add(rbtJuridica);
        rbtJuridica.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        rbtJuridica.setText("Jurídica");
        rbtJuridica.setOpaque(false);
        rbtJuridica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtJuridicaActionPerformed(evt);
            }
        });
        panDadosServico.add(rbtJuridica);
        rbtJuridica.setBounds(220, 40, 85, 25);

        lblCep2.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblCep2.setText("Cód. Funcionário:");
        panDadosServico.add(lblCep2);
        lblCep2.setBounds(10, 100, 140, 25);

        txtCodFunc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodFuncActionPerformed(evt);
            }
        });
        txtCodFunc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCodFuncKeyReleased(evt);
            }
        });
        panDadosServico.add(txtCodFunc);
        txtCodFunc.setBounds(160, 100, 100, 25);

        lblSelecionarFunc.setForeground(java.awt.Color.red);
        lblSelecionarFunc.setText("Funcionário Inválido.");
        panDadosServico.add(lblSelecionarFunc);
        lblSelecionarFunc.setBounds(262, 100, 210, 25);

        btnSelecionarfunc.setText("Selecionar Funcionário");
        btnSelecionarfunc.setEnabled(false);
        btnSelecionarfunc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelecionarfuncActionPerformed(evt);
            }
        });
        panDadosServico.add(btnSelecionarfunc);
        btnSelecionarfunc.setBounds(440, 100, 140, 30);

        lblCep3.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblCep3.setText("Funcionário:");
        panDadosServico.add(lblCep3);
        lblCep3.setBounds(590, 100, 100, 25);

        btnArquivoRelatorio.setText("Trocar");
        btnArquivoRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArquivoRelatorioActionPerformed(evt);
            }
        });
        panDadosServico.add(btnArquivoRelatorio);
        btnArquivoRelatorio.setBounds(510, 67, 80, 30);

        lblNomeArquivoTrocado.setText("Nenhum arquivo selecionado.");
        panDadosServico.add(lblNomeArquivoTrocado);
        lblNomeArquivoTrocado.setBounds(592, 70, 170, 25);

        jLabel5.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        jLabel5.setText("Relat. do Serviço:");
        panDadosServico.add(jLabel5);
        jLabel5.setBounds(10, 70, 150, 25);

        panDadosCliente.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados do Cliente"));
        panDadosCliente.setOpaque(false);
        panDadosCliente.setLayout(null);

        lblNomeFicticio.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblNomeFicticio.setText("Nome:");
        panDadosCliente.add(lblNomeFicticio);
        lblNomeFicticio.setBounds(20, 10, 140, 25);

        txtNomePessoaFicticio.setEditable(false);
        panDadosCliente.add(txtNomePessoaFicticio);
        txtNomePessoaFicticio.setBounds(160, 10, 310, 25);

        lblTelefone.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblTelefone.setText("Telefone:");
        panDadosCliente.add(lblTelefone);
        lblTelefone.setBounds(20, 70, 140, 25);

        txtTelefone.setEditable(false);
        panDadosCliente.add(txtTelefone);
        txtTelefone.setBounds(160, 70, 310, 25);

        lblCelularRamal.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblCelularRamal.setText("Celular:");
        panDadosCliente.add(lblCelularRamal);
        lblCelularRamal.setBounds(540, 70, 140, 25);

        lblLogradouro.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblLogradouro.setText("Logradouro:");
        panDadosCliente.add(lblLogradouro);
        lblLogradouro.setBounds(540, 10, 140, 25);

        txtLogradouro.setEditable(false);
        panDadosCliente.add(txtLogradouro);
        txtLogradouro.setBounds(700, 10, 316, 25);

        lblCidade.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblCidade.setText("Cidade:");
        panDadosCliente.add(lblCidade);
        lblCidade.setBounds(20, 40, 140, 25);

        txtCidade.setEditable(false);
        panDadosCliente.add(txtCidade);
        txtCidade.setBounds(160, 40, 114, 25);

        lblEstado.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblEstado.setText("Estado:");
        panDadosCliente.add(lblEstado);
        lblEstado.setBounds(280, 40, 73, 25);

        txtEstado.setEditable(false);
        panDadosCliente.add(txtEstado);
        txtEstado.setBounds(350, 40, 120, 25);

        lblBairro.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblBairro.setText("Bairro:");
        panDadosCliente.add(lblBairro);
        lblBairro.setBounds(540, 40, 140, 25);

        txtBairro.setEditable(false);
        panDadosCliente.add(txtBairro);
        txtBairro.setBounds(700, 40, 178, 25);

        lblNumeroLog.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblNumeroLog.setText("N°:");
        panDadosCliente.add(lblNumeroLog);
        lblNumeroLog.setBounds(900, 40, 39, 25);

        txtNumero.setEditable(false);
        panDadosCliente.add(txtNumero);
        txtNumero.setBounds(940, 40, 76, 25);

        txtCelularRamal.setEditable(false);
        panDadosCliente.add(txtCelularRamal);
        txtCelularRamal.setBounds(700, 70, 316, 25);

        lblRazaoSocial.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblRazaoSocial.setText("Razão Social:");
        panDadosCliente.add(lblRazaoSocial);
        lblRazaoSocial.setBounds(20, 100, 140, 25);

        txtRazaoSocial.setEditable(false);
        panDadosCliente.add(txtRazaoSocial);
        txtRazaoSocial.setBounds(160, 100, 310, 25);

        lblSexoDesc.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblSexoDesc.setText("Sexo:");
        panDadosCliente.add(lblSexoDesc);
        lblSexoDesc.setBounds(540, 100, 140, 25);

        lblSexoValor.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblSexoValor.setText("-");
        panDadosCliente.add(lblSexoValor);
        lblSexoValor.setBounds(710, 100, 300, 25);

        panDadosServico.add(panDadosCliente);
        panDadosCliente.setBounds(10, 260, 1080, 130);
        panDadosCliente.getAccessibleContext().setAccessibleDescription("");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Funcionários selecionados para executar esse serviço\n"));
        jPanel1.setOpaque(false);
        jPanel1.setLayout(null);

        tblFuncionarioTrabalhando.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblFuncionarioTrabalhando);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(10, 15, 680, 110);

        btnRemoveLinhaFunc.setText("Remover Funcionário");
        btnRemoveLinhaFunc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveLinhaFuncActionPerformed(evt);
            }
        });
        jPanel1.add(btnRemoveLinhaFunc);
        btnRemoveLinhaFunc.setBounds(700, 15, 140, 30);

        jButton2.setText("Remover Todos");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);
        jButton2.setBounds(700, 75, 140, 30);

        panDadosServico.add(jPanel1);
        jPanel1.setBounds(10, 130, 850, 130);

        lblCodigoServico.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblCodigoServico.setText("Cód. do Serviço:");
        panDadosServico.add(lblCodigoServico);
        lblCodigoServico.setBounds(10, 10, 134, 25);

        txtCodigoServico.setEditable(false);
        txtCodigoServico.setFocusable(false);
        txtCodigoServico.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCodigoServicoKeyReleased(evt);
            }
        });
        panDadosServico.add(txtCodigoServico);
        txtCodigoServico.setBounds(160, 10, 100, 25);

        lblDataCadastro.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblDataCadastro.setText("Data Início:");
        panDadosServico.add(lblDataCadastro);
        lblDataCadastro.setBounds(590, 10, 90, 25);

        txtfDataInicio.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter()));
        txtfDataInicio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtfDataInicioKeyReleased(evt);
            }
        });
        panDadosServico.add(txtfDataInicio);
        txtfDataInicio.setBounds(690, 10, 100, 25);

        btnHojeInicio.setText("Hoje");
        btnHojeInicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHojeInicioActionPerformed(evt);
            }
        });
        panDadosServico.add(btnHojeInicio);
        btnHojeInicio.setBounds(790, 10, 55, 25);

        lblNomeFuncValor.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblNomeFuncValor.setText("-");
        panDadosServico.add(lblNomeFuncValor);
        lblNomeFuncValor.setBounds(690, 100, 400, 25);

        lblNomeArquivo.setText("...");
        panDadosServico.add(lblNomeArquivo);
        lblNomeArquivo.setBounds(160, 70, 240, 25);

        btnRemoverArquivo.setText("Remover");
        btnRemoverArquivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverArquivoActionPerformed(evt);
            }
        });
        panDadosServico.add(btnRemoverArquivo);
        btnRemoverArquivo.setBounds(940, 67, 100, 30);

        lblCampoCpfCnpj.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblCampoCpfCnpj.setText("CPF:");
        panDadosServico.add(lblCampoCpfCnpj);
        lblCampoCpfCnpj.setBounds(350, 40, 50, 25);

        txtCpfCnpj.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCpfCnpjKeyReleased(evt);
            }
        });
        panDadosServico.add(txtCpfCnpj);
        txtCpfCnpj.setBounds(400, 40, 100, 25);

        lblCpfCnpjExiste.setForeground(java.awt.Color.red);
        lblCpfCnpjExiste.setText("CPF Inválido.");
        panDadosServico.add(lblCpfCnpjExiste);
        lblCpfCnpjExiste.setBounds(502, 40, 130, 25);

        lblCep.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblCep.setText("CEP:");
        panDadosServico.add(lblCep);
        lblCep.setBounds(650, 40, 40, 25);

        try {
            txtfCep.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#####-###")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtfCep.setNextFocusableComponent(txtNumeroLogradouro);
        txtfCep.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtfCepFocusLost(evt);
            }
        });
        txtfCep.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtfCepKeyReleased(evt);
            }
        });
        panDadosServico.add(txtfCep);
        txtfCep.setBounds(690, 40, 100, 25);

        lblCepExiste.setForeground(java.awt.Color.red);
        lblCepExiste.setText("Cep Inválido.");
        panDadosServico.add(lblCepExiste);
        lblCepExiste.setBounds(792, 40, 130, 25);

        btnAbrirArquivoRelatorio.setText("Abrir Arquivo");
        btnAbrirArquivoRelatorio.setEnabled(false);
        btnAbrirArquivoRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirArquivoRelatorioActionPerformed(evt);
            }
        });
        panDadosServico.add(btnAbrirArquivoRelatorio);
        btnAbrirArquivoRelatorio.setBounds(400, 67, 100, 30);

        lblDataEncerramento.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblDataEncerramento.setText("Data Fim:");
        panDadosServico.add(lblDataEncerramento);
        lblDataEncerramento.setBounds(860, 10, 80, 25);

        txtfDataEncerramento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter()));
        txtfDataEncerramento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtfDataEncerramentoKeyReleased(evt);
            }
        });
        panDadosServico.add(txtfDataEncerramento);
        txtfDataEncerramento.setBounds(940, 10, 100, 25);

        btnHojeFim.setText("Hoje");
        btnHojeFim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHojeFimActionPerformed(evt);
            }
        });
        panDadosServico.add(btnHojeFim);
        btnHojeFim.setBounds(1040, 10, 55, 25);

        lblNumeroLogradouro.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblNumeroLogradouro.setText("Nº Rua:");
        panDadosServico.add(lblNumeroLogradouro);
        lblNumeroLogradouro.setBounds(870, 40, 80, 25);

        txtNumeroLogradouro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumeroLogradouroActionPerformed(evt);
            }
        });
        txtNumeroLogradouro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNumeroLogradouroKeyReleased(evt);
            }
        });
        panDadosServico.add(txtNumeroLogradouro);
        txtNumeroLogradouro.setBounds(940, 40, 100, 25);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Status do serviço e seu orçamento"));
        jPanel2.setOpaque(false);
        jPanel2.setLayout(null);

        btnOrcamento.setText("Criar orçamento");
        btnOrcamento.setEnabled(false);
        btnOrcamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrcamentoActionPerformed(evt);
            }
        });
        jPanel2.add(btnOrcamento);
        btnOrcamento.setBounds(40, 30, 150, 30);

        lblOrcamento.setText("Existe ou não Orçamento");
        jPanel2.add(lblOrcamento);
        lblOrcamento.setBounds(10, 10, 220, 25);

        lblAtivo.setText("Serviço já ativado ou não");
        jPanel2.add(lblAtivo);
        lblAtivo.setBounds(10, 70, 220, 25);

        btnAtivarDesativar.setText("Ativar Serviço");
        btnAtivarDesativar.setEnabled(false);
        btnAtivarDesativar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtivarDesativarActionPerformed(evt);
            }
        });
        jPanel2.add(btnAtivarDesativar);
        btnAtivarDesativar.setBounds(40, 90, 150, 30);

        panDadosServico.add(jPanel2);
        jPanel2.setBounds(860, 130, 230, 130);

        lblDiretorioArquivoTrocado.setText("...");
        panDadosServico.add(lblDiretorioArquivoTrocado);
        lblDiretorioArquivoTrocado.setBounds(770, 70, 170, 25);

        panPrincipal.add(panDadosServico);
        panDadosServico.setBounds(10, 30, 1100, 395);

        btnLimparTabela.setText("Limpar tabela");
        btnLimparTabela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparTabelaActionPerformed(evt);
            }
        });
        panPrincipal.add(btnLimparTabela);
        btnLimparTabela.setBounds(410, 430, 120, 30);

        btnCadastrarServico.setText("Cadastrar novo Serviço");
        btnCadastrarServico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarServicoActionPerformed(evt);
            }
        });
        panPrincipal.add(btnCadastrarServico);
        btnCadastrarServico.setBounds(720, 430, 150, 30);

        lblDigiteODado.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblDigiteODado.setText("Digite o Cód. do Serviço:");
        panPrincipal.add(lblDigiteODado);
        lblDigiteODado.setBounds(325, 3, 330, 25);

        txtPesquisa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPesquisaKeyReleased(evt);
            }
        });
        panPrincipal.add(txtPesquisa);
        txtPesquisa.setBounds(620, 3, 60, 25);

        txtfDataDe.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter()));
        txtfDataDe.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtfDataDeKeyReleased(evt);
            }
        });
        panPrincipal.add(txtfDataDe);
        txtfDataDe.setBounds(620, 3, 100, 25);

        btnHojePesquisa.setText("Hoje");
        btnHojePesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHojePesquisaActionPerformed(evt);
            }
        });
        panPrincipal.add(btnHojePesquisa);
        btnHojePesquisa.setBounds(730, 3, 55, 25);

        lblDataAte.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblDataAte.setText("Até:");
        panPrincipal.add(lblDataAte);
        lblDataAte.setBounds(800, 3, 34, 25);

        txtfDataAte.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter()));
        txtfDataAte.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtfDataAteKeyReleased(evt);
            }
        });
        panPrincipal.add(txtfDataAte);
        txtfDataAte.setBounds(840, 3, 100, 25);

        btnPesquisar.setText("Pesquisar");
        btnPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarActionPerformed(evt);
            }
        });
        panPrincipal.add(btnPesquisar);
        btnPesquisar.setBounds(950, 3, 79, 25);

        getContentPane().add(panPrincipal);
        panPrincipal.setBounds(10, 10, 1125, 470);

        btnFecharFrame.setText("Fechar ");
        btnFecharFrame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFecharFrameActionPerformed(evt);
            }
        });
        getContentPane().add(btnFecharFrame);
        btnFecharFrame.setBounds(1060, 650, 80, 30);

        btnMenuPrincipal.setText("Menu Principal");
        btnMenuPrincipal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuPrincipalActionPerformed(evt);
            }
        });
        getContentPane().add(btnMenuPrincipal);
        btnMenuPrincipal.setBounds(900, 650, 130, 30);

        tblListagemServico.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblListagemServico.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblListagemServicoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblListagemServico);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 503, 1130, 145);

        lblServicoEncontrado.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblServicoEncontrado.setText("Serviços encontrados no banco de dados. Para visualizar ou alterar um registro, clique em um registro exibido na tabela.");
        getContentPane().add(lblServicoEncontrado);
        lblServicoEncontrado.setBounds(10, 477, 1040, 25);

        btnCadastrarPessoaJ.setText("Cadastrar Pessoa");
        btnCadastrarPessoaJ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarPessoaJActionPerformed(evt);
            }
        });
        getContentPane().add(btnCadastrarPessoaJ);
        btnCadastrarPessoaJ.setBounds(150, 650, 120, 30);

        btnCadastrarCep.setText("Cadastrar CEP");
        btnCadastrarCep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarCepActionPerformed(evt);
            }
        });
        getContentPane().add(btnCadastrarCep);
        btnCadastrarCep.setBounds(280, 650, 115, 30);

        btnListarFunc.setText("Listar Funcionários");
        btnListarFunc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarFuncActionPerformed(evt);
            }
        });
        getContentPane().add(btnListarFunc);
        btnListarFunc.setBounds(410, 650, 130, 30);

        jLabel1.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        jLabel1.setText("Acesso Rápido:");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 650, 140, 25);

        lblBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fundoMaior.PNG"))); // NOI18N
        getContentPane().add(lblBackground);
        lblBackground.setBounds(0, -20, 1150, 740);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAtualizarTabelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarTabelaActionPerformed
        atualizarTabelaServico(false);
        inicializarTabelaFuncionario();
    }//GEN-LAST:event_btnAtualizarTabelaActionPerformed

    private void btnAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarActionPerformed
        alterarServico();

    }//GEN-LAST:event_btnAlterarActionPerformed

    private void btnDeletarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletarActionPerformed
        deletarServico();
    }//GEN-LAST:event_btnDeletarActionPerformed

    private void cmbFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFiltroActionPerformed
        limiteDigitosPesquisa(cmbFiltro.getSelectedItem().toString());
    }//GEN-LAST:event_cmbFiltroActionPerformed

    private void tblListagemServicoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblListagemServicoMouseClicked

        popularCampos();

//        if ("Físico".equals((String) tblListagemServico.getValueAt(tblListagemServico.getSelectedRow(), 2))) {
//            modoFisica();
//            try {
//                exibicaoFisica();
//            } catch (SQLException ex) {
//                Logger.getLogger(FrmListagemServico.class.getName()).log(Level.SEVERE, null, ex);
//            } catch (ClassNotFoundException ex) {
//                Logger.getLogger(FrmListagemServico.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        } else {
//            modoJuridica();
//            exibicaoJuridica();
//        }
//        String cod = (String) tblListagemServico.getValueAt(tblListagemServico.getSelectedRow(), 0);
//        PK_REF = (String) tblListagemServico.getValueAt(tblListagemServico.getSelectedRow(), 0);
//        popularTabelaFuncionario(cod);
//
//        String aux = "";
//        aux = (String) tblListagemServico.getValueAt(tblListagemServico.getSelectedRow(), 1);
//
//        cmbTipoServico.removeAllItems();
//        cmbTipoServico.addItem("Preventivo");
//        cmbTipoServico.addItem("Corretivo");
//        cmbTipoServico.addItem("Emergencial");
//
//        switch (aux) {
//            case "Preventivo":
//                cmbTipoServico.removeAllItems();
//                cmbTipoServico.addItem("Preventivo");
//                cmbTipoServico.addItem("Corretivo");
//                cmbTipoServico.setSelectedIndex(0);
//                break;
//            case "Corretivo":
//                cmbTipoServico.removeAllItems();
//                cmbTipoServico.addItem("Corretivo");
//                cmbTipoServico.addItem("Emergencial");
//                cmbTipoServico.setSelectedIndex(0);
//                break;
//            case "Emergencial":
//                cmbTipoServico.removeAllItems();
//                cmbTipoServico.addItem("Emergencial");
//                cmbTipoServico.setSelectedIndex(0);
//                break;
//        }
//
//        if ("Ativo".equals((String) tblListagemServico.getValueAt(tblListagemServico.getSelectedRow(), 3))) {
//            btnAtivarDesativar.setText("Encerrar/Concluir Serviço");
//            lblAtivo.setText("Serviço está em execução.");
//            flagAtivo = false;
//        } else {
//            btnAtivarDesativar.setText("Ativar/Iniciar Serviço");
//            lblAtivo.setText("Serviço concluído/encerrado.");
//            flagAtivo = true;
//        }
//
//        txtfDataInicio.setText((String) tblListagemServico.getValueAt(tblListagemServico.getSelectedRow(), 4));
//        txtfDataAte.setText((String) tblListagemServico.getValueAt(tblListagemServico.getSelectedRow(), 5));
//
//        if (aux.equals("Preventivo")) {
//            btnOrcamento.setEnabled(false);
//            lblOrcamento.setText("Preventivo não possui orçamento.");
//
//        } else {
//
//            if (DaoOrcamento.existeOrcamento(cod)) {
//                lblOrcamento.setText("Serviço com um orçamento ativo.");
//                btnOrcamento.setText("Alterar Orçamento");
//                btnOrcamento.setEnabled(true);
//
//            } else {
//                lblOrcamento.setText("Serviço sem orçamento.");
//                btnOrcamento.setText("Criar Orçamento");
//                btnOrcamento.setEnabled(true);
//            }
//
//        }

    }//GEN-LAST:event_tblListagemServicoMouseClicked

    private void cmbTipoServicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTipoServicoActionPerformed

    }//GEN-LAST:event_cmbTipoServicoActionPerformed

    private void btnArquivoRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArquivoRelatorioActionPerformed
        trocarArquivo();
    }//GEN-LAST:event_btnArquivoRelatorioActionPerformed

    private void rbtFisicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtFisicaActionPerformed
        modoFisica();
    }//GEN-LAST:event_rbtFisicaActionPerformed

    private void rbtJuridicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtJuridicaActionPerformed
        modoJuridica();
    }//GEN-LAST:event_rbtJuridicaActionPerformed

    private void btnOrcamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrcamentoActionPerformed
        String codigoServico = String.valueOf(tblListagemServico.getModel().getValueAt(tblListagemServico.getSelectedRow(), 0));
        if (btnOrcamento.getText().equals("Criar Orçamento")) {
            control.Janelas.abrirCadastroOrcamento(codigoServico, true);
        } else {
            int codigoOrcamento = dao.DaoOrcamento.buscarOrcamento(codigoServico);
            control.Janelas.abrirListagemOrçamentoPopulado(codigoOrcamento);
        }
    }//GEN-LAST:event_btnOrcamentoActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        inicializarTabelaFuncionario();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnRemoveLinhaFuncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveLinhaFuncActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblFuncionarioTrabalhando.getModel();
        if (model.getRowCount() != 0) {
            model.removeRow(tblFuncionarioTrabalhando.getSelectedRow());
            tblFuncionarioTrabalhando.setModel(model);
        }
    }//GEN-LAST:event_btnRemoveLinhaFuncActionPerformed

    private void txtCodFuncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodFuncActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodFuncActionPerformed

    private void txtCodFuncKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodFuncKeyReleased
        verificarFuncionario();
    }//GEN-LAST:event_txtCodFuncKeyReleased

    private void btnSelecionarfuncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelecionarfuncActionPerformed
        selecionarFuncionario();
    }//GEN-LAST:event_btnSelecionarfuncActionPerformed

    private void btnListarFuncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarFuncActionPerformed
        control.Janelas.abrirListagemFuncionario();
    }//GEN-LAST:event_btnListarFuncActionPerformed

    private void btnAtivarDesativarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtivarDesativarActionPerformed
        if (flagAtivo) {
            if (txtfDataEncerramento.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Data de encerramento do serviço em branco.\n\n"
                        + "Digite uma data para o encerramento do serviço.", "Erro - Data Encerramento Inválida", 0);
                txtfDataEncerramento.requestFocus();
            } else {
                int opcao = JOptionPane.showConfirmDialog(this, "Deseja realmente Encerrar o serviço?",
                        "Confirmação de status de serviço", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (opcao == 0) {
                    dao.DaoServico.ativarDesativarServico(
                            String.valueOf(tblListagemServico.getValueAt(tblListagemServico.getSelectedRow(), 0)),
                            flagAtivo, txtfDataEncerramento.getText());
                    atualizarTabelaServico(false);
                }
            }
        } else {
            if (txtfDataInicio.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Data de Início do serviço em branco.\n\n"
                        + "Digite uma data para o início do serviço.", "Erro - Data Início Inválida", 0);
                txtfDataInicio.requestFocus();
            } else {
                int opcao = JOptionPane.showConfirmDialog(this, "Deseja realmente Ativar o serviço?",
                        "Confirmação de status de serviço", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (opcao == 0) {
                    dao.DaoServico.ativarDesativarServico(
                            String.valueOf(tblListagemServico.getValueAt(tblListagemServico.getSelectedRow(), 0)),
                            flagAtivo, txtfDataInicio.getText());
                    atualizarTabelaServico(false);
                }
            }
        }

    }//GEN-LAST:event_btnAtivarDesativarActionPerformed

    private void btnFecharFrameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFecharFrameActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnFecharFrameActionPerformed

    private void btnMenuPrincipalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuPrincipalActionPerformed
        control.Janelas.focarPrincipal();
    }//GEN-LAST:event_btnMenuPrincipalActionPerformed

    private void btnLimparTabelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparTabelaActionPerformed
        limparTabelaServico();
    }//GEN-LAST:event_btnLimparTabelaActionPerformed

    private void btnCadastrarServicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarServicoActionPerformed
        control.Janelas.abrirCadastroServico();
    }//GEN-LAST:event_btnCadastrarServicoActionPerformed

    private void btnHojeInicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHojeInicioActionPerformed
        txtfDataInicio.setText(control.Datas.getDiaHoje());
    }//GEN-LAST:event_btnHojeInicioActionPerformed

    private void btnRemoverArquivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverArquivoActionPerformed
        removerArquivo();
    }//GEN-LAST:event_btnRemoverArquivoActionPerformed

    private void txtPesquisaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisaKeyReleased
        limiteDigitosPesquisa(cmbFiltro.getSelectedItem().toString());
        pesquisarFiltrada();
    }//GEN-LAST:event_txtPesquisaKeyReleased

    private void txtfDataDeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtfDataDeKeyReleased
        pesquisarFiltrada();
    }//GEN-LAST:event_txtfDataDeKeyReleased

    private void btnHojePesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHojePesquisaActionPerformed
        txtfDataDe.setText(control.Datas.getDiaHoje());
        txtfDataAte.setText(control.Datas.getDiaHoje());
    }//GEN-LAST:event_btnHojePesquisaActionPerformed

    private void txtfDataAteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtfDataAteKeyReleased
        pesquisarFiltrada();
    }//GEN-LAST:event_txtfDataAteKeyReleased

    private void btnPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarActionPerformed
        txtfDataDe.setText(txtfDataDe.getText().trim());
        txtfDataAte.setText(txtfDataAte.getText().trim());
        if (txtfDataDe.getText().length() == 10 && txtfDataAte.getText().length() == 10) {
            atualizarTabelaServico(true);
        } else {
            limparTabelaServico();
        }
    }//GEN-LAST:event_btnPesquisarActionPerformed

    private void txtCpfCnpjKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCpfCnpjKeyReleased
        textSizeCpfCnpj();
        validarCpfCnpj();
    }//GEN-LAST:event_txtCpfCnpjKeyReleased

    private void btnCadastrarPessoaJActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarPessoaJActionPerformed
        control.Janelas.abrirCadastroPessoa();
    }//GEN-LAST:event_btnCadastrarPessoaJActionPerformed

    private void txtfCepFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtfCepFocusLost
        verificarCepExistente();
    }//GEN-LAST:event_txtfCepFocusLost

    private void txtfCepKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtfCepKeyReleased
        verificarCepExistente();
    }//GEN-LAST:event_txtfCepKeyReleased

    private void btnCadastrarCepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarCepActionPerformed
        control.Janelas.abrirCadastroEnderecoParametrizada(txtfCep.getText().replace("-", ""));
    }//GEN-LAST:event_btnCadastrarCepActionPerformed

    private void btnAbrirArquivoRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirArquivoRelatorioActionPerformed
        abrirArquivo();
    }//GEN-LAST:event_btnAbrirArquivoRelatorioActionPerformed

    private void btnHojeFimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHojeFimActionPerformed
        txtfDataEncerramento.setText(control.Datas.getDiaHoje());
    }//GEN-LAST:event_btnHojeFimActionPerformed

    private void txtfDataInicioKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtfDataInicioKeyReleased
        txtfDataInicio.setText(control.Texto.maxLenghtData(txtfDataInicio.getText()));
    }//GEN-LAST:event_txtfDataInicioKeyReleased

    private void txtfDataEncerramentoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtfDataEncerramentoKeyReleased
        txtfDataEncerramento.setText(control.Texto.maxLenghtData(txtfDataEncerramento.getText()));
    }//GEN-LAST:event_txtfDataEncerramentoKeyReleased

    private void txtNumeroLogradouroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumeroLogradouroActionPerformed

    }//GEN-LAST:event_txtNumeroLogradouroActionPerformed

    private void txtNumeroLogradouroKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumeroLogradouroKeyReleased
        txtNumeroLogradouro.setText(control.Texto.maxLenghtNrLogradouro(txtNumeroLogradouro.getText()));
    }//GEN-LAST:event_txtNumeroLogradouroKeyReleased

    private void txtCodigoServicoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodigoServicoKeyReleased

    }//GEN-LAST:event_txtCodigoServicoKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmListagemServico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmListagemServico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmListagemServico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmListagemServico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmListagemServico(control.SynchroSoft.getNvlAdm()).setVisible(true);
            }
        });
    }

//    private void atualizarTabelaFiltradaData() {
//        ArrayList<Servico> lista = new ArrayList<>();
//        lista = DaoServico.listarServicoFiltrada(txt.getText().trim());
//        String[] nomeColunas = {"Código Serviço", "Tipo Serviço", "Tipo Cliente", "Descrição", "Status", "Data Início", "Data Fim", "PK_REF"};
//        try {
//            DefaultTableModel model = new DefaultTableModel() {
//                @Override
//                public boolean isCellEditable(int row, int column) {
//                    
//                    return false;
//                }
//            };
//            tblListagemServico.setModel(model);
//            model.setColumnIdentifiers(nomeColunas);
//            model.setRowCount(0);
//            Object rowData[] = new Object[8];
//            for (int i = 0; i < lista.size(); i++) {
//                rowData[0] = Integer.toString(lista.get(i).getCodigoServico());
//                rowData[1] = lista.get(i).getTipoServico();
//                
//                if (lista.get(i).isTipoCliente()){
//                    rowData[2] = "Jurídico";
//                } else {
//                    rowData[2] = "Físico";
//                }
//                
//                rowData[3] = lista.get(i).getDescricaoServicoFILE();
//                
//                if (lista.get(i).isStatusServico()) {
//                    rowData[4] = "Ativado";
//                } else {
//                    rowData[4] = "Desativado";
//                }
//                rowData[5] = lista.get(i).getDataServico().toString();
//                rowData[6] = lista.get(i).getDataServicoFim().toString();
//                rowData[7] = Integer.toString(lista.get(i).getCodigoServico());
//                
//                model.addRow(rowData);
//            }
//
//        } catch (Exception ex) {
//            System.out.println("Erro ao popular tabela.\n\n" + ex.getMessage());
//        }
//        tblListagemServico.getColumnModel().getColumn(7).setMinWidth(0);
//        tblListagemServico.getColumnModel().getColumn(7).setPreferredWidth(0);
//        tblListagemServico.getColumnModel().getColumn(7).setMaxWidth(0);
//    }
    private void atualizarTabela() {
        ArrayList<Servico> lista = new ArrayList<>();
        lista = DaoServico.listarServico();
        String[] nomeColunas = {"Código Serviço", "Tipo Serviço", "Tipo Cliente", "Descrição", "Status", "Data Início", "Data Fim", "PK_REF"};
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {

                    return false;
                }
            };
            tblListagemServico.setModel(model);
            model.setColumnIdentifiers(nomeColunas);
            model.setRowCount(0);
            Object rowData[] = new Object[8];
            for (int i = 0; i < lista.size(); i++) {
                rowData[0] = lista.get(i).getCodigoServico();
                rowData[1] = lista.get(i).getTipoServicoSTR();
                rowData[2] = lista.get(i).getTipoClienteSTR();
                rowData[3] = lista.get(i).getDescricaoServicoFILE();
                rowData[4] = lista.get(i).getStatusServicoSTR();
                rowData[5] = lista.get(i).getDataServico().toString();
                rowData[6] = lista.get(i).getDataServicoFim().toString();
                rowData[7] = lista.get(i).getCodigoServico();

                model.addRow(rowData);
            }

        } catch (Exception ex) {
            System.out.println("Erro ao popular tabela.\n\n" + ex.getMessage());
        }

        tblListagemServico.getColumnModel().getColumn(7).setMinWidth(0);
        tblListagemServico.getColumnModel().getColumn(7).setPreferredWidth(0);
        tblListagemServico.getColumnModel().getColumn(7).setMaxWidth(0);
    }

    public void modoFisica() {
        lblCampoCpfCnpj.setText("CPF");
        txtRazaoSocial.setVisible(false);
        lblRazaoSocial.setVisible(false);
        lblNomeFicticio.setText("Nome");
        lblCelularRamal.setText("Celular");
        lblSexoDesc.setVisible(true);
        lblSexoValor.setVisible(true);
        lblSexoValor.setText("-");
        rbtFisica.setSelected(true);
    }

    public void modoJuridica() {
        lblCampoCpfCnpj.setText("CNPJ");
        txtRazaoSocial.setVisible(true);
        lblRazaoSocial.setVisible(true);
        lblNomeFicticio.setText("Nome Fictício");
        lblCelularRamal.setText("Ramal");
        lblSexoDesc.setVisible(false);
        lblSexoValor.setVisible(false);
        rbtJuridica.setSelected(true);
    }

    public void exibicaoFisica() throws SQLException, ClassNotFoundException {
        Servico s = new Servico();
        PessoaFisica pf = new PessoaFisica();
        Endereco end = new Endereco();
        boolean flag;
        ArrayList<Object> lista = new ArrayList<>();

        s.setCodigoServico(((String) tblListagemServico.getValueAt(tblListagemServico.getSelectedRow(), 0)));
        s.setDescricaoServicoFILE(((String) tblListagemServico.getValueAt(tblListagemServico.getSelectedRow(), 3)));

        lista = DaoServico.popularListaServicoDetalhada(s.getCodigoServico(), 1);

        pf = (PessoaFisica) lista.get(0);

        end = (Endereco) lista.get(2);
        flag = (Boolean) lista.get(3);

        txtNomePessoaFicticio.setText(pf.getPessoa().getNome());
        txtLogradouro.setText(end.getLogradouro());
        txtCidade.setText(end.getCidade());
        txtEstado.setText(end.getEstado());
        txtBairro.setText(end.getBairro());
        txtNumero.setText(pf.getPessoa().getComplementoLogradouro());
        txtTelefone.setText("" + pf.getPessoa().getTelefone());
        txtCelularRamal.setText("" + pf.getCelular());
        lblNomeArquivoTrocado.setText(s.getDescricaoServicoFILE());
        lblSexoValor.setText(pf.getSexoSTR());

        txtfCep.setText(end.getCep());
        txtCpfCnpj.setText(pf.getCpf());

    }

    public void popularExibicaoPessoaJuridica(PessoaJuridica pj) {
        txtNomePessoaFicticio.setText(pj.getPessoa().getNome());
        txtLogradouro.setText(pj.getPessoa().getEndereco().getLogradouro());
        txtCidade.setText(pj.getPessoa().getEndereco().getCidade());
        txtEstado.setText(pj.getPessoa().getEndereco().getEstado());
        txtBairro.setText(pj.getPessoa().getEndereco().getBairro());
        txtNumero.setText(pj.getPessoa().getComplementoLogradouro());
        txtTelefone.setText("" + pj.getPessoa().getTelefone());
        txtCelularRamal.setText("" + pj.getRamalCliente());
        txtRazaoSocial.setText(pj.getRazaoSocial());

    }

    public void popularExibicaoPessoa(PessoaFisica pf) {
        txtNomePessoaFicticio.setText(pf.getPessoa().getNome());
        txtLogradouro.setText(pf.getPessoa().getEndereco().getLogradouro());
        txtCidade.setText(pf.getPessoa().getEndereco().getCidade());
        txtEstado.setText(pf.getPessoa().getEndereco().getEstado());
        txtBairro.setText(pf.getPessoa().getEndereco().getBairro());
        txtNumero.setText(pf.getPessoa().getComplementoLogradouro());
        txtTelefone.setText("" + pf.getPessoa().getTelefone());
        txtCelularRamal.setText("" + pf.getCelular());

        lblSexoValor.setText(pf.getSexoSTR());

    }

    public void limparExibicaoPessoaJuridica() {
        txtNomePessoaFicticio.setText("");
        txtLogradouro.setText("");
        txtCidade.setText("");
        txtEstado.setText("");
        txtBairro.setText("");
        txtNumero.setText("");
        txtTelefone.setText("");
        txtCelularRamal.setText("");
        txtRazaoSocial.setText("");

    }

    public void limparExibicaoEndereco() {
        txtLogradouro.setText("");
        txtCidade.setText("");
        txtBairro.setText("");
        txtEstado.setText("");
    }

    public void popularExibicaoEndereco(Endereco end) {
        txtLogradouro.setText(end.getLogradouro());
        txtCidade.setText(end.getCidade());
        txtBairro.setText(end.getBairro());
        txtEstado.setText(end.getEstado());
    }

    public void limparExibicaoPessoa() {
        txtNomePessoaFicticio.setText("");
        txtLogradouro.setText("");
        txtCidade.setText("");
        txtEstado.setText("");
        txtBairro.setText("");
        txtNumero.setText("");
        txtTelefone.setText("");
        txtCelularRamal.setText("");

    }

    public boolean verificarFuncVazio() {
        if (tblFuncionarioTrabalhando.getRowCount() == 0) {
            return false;
        } else {
            return true;
        }
    }

    public void exibicaoJuridica() {
        Servico s = new Servico();
        PessoaJuridica pj = new PessoaJuridica();
        Endereco end = new Endereco();
        boolean flag;
        ArrayList<Object> lista = new ArrayList<>();

        s.setCodigoServico(((String) tblListagemServico.getValueAt(tblListagemServico.getSelectedRow(), 0)));

        lista = DaoServico.popularListaServicoDetalhada(s.getCodigoServico(), 0);

        pj = (PessoaJuridica) lista.get(1);

        end = (Endereco) lista.get(2);
        flag = (Boolean) lista.get(3);

        txtCpfCnpj.setText(pj.getCnpj());
        txtNomePessoaFicticio.setText(pj.getPessoa().getNome());
        txtLogradouro.setText(end.getLogradouro());
        txtCidade.setText(end.getCidade());
        txtEstado.setText(end.getEstado());
        txtBairro.setText(end.getBairro());
        txtNumero.setText(pj.getPessoa().getComplementoLogradouro());
        txtTelefone.setText("" + pj.getPessoa().getTelefone());
        txtCelularRamal.setText("" + pj.getRamalCliente());
        txtRazaoSocial.setText(pj.getRazaoSocial());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbrirArquivoRelatorio;
    private javax.swing.JButton btnAlterar;
    private javax.swing.JButton btnArquivoRelatorio;
    private javax.swing.JButton btnAtivarDesativar;
    private javax.swing.JButton btnAtualizarTabela;
    private javax.swing.JButton btnCadastrarCep;
    private javax.swing.JButton btnCadastrarPessoaJ;
    private javax.swing.JButton btnCadastrarServico;
    private javax.swing.JButton btnDeletar;
    private javax.swing.JButton btnFecharFrame;
    private javax.swing.JButton btnHojeFim;
    private javax.swing.JButton btnHojeInicio;
    private javax.swing.JButton btnHojePesquisa;
    private javax.swing.JButton btnLimparTabela;
    private javax.swing.JButton btnListarFunc;
    private javax.swing.JButton btnMenuPrincipal;
    private javax.swing.JButton btnOrcamento;
    private javax.swing.JButton btnPesquisar;
    private javax.swing.JButton btnRemoveLinhaFunc;
    private javax.swing.JButton btnRemoverArquivo;
    private javax.swing.JButton btnSelecionarfunc;
    private javax.swing.JComboBox<String> cmbFiltro;
    private javax.swing.JComboBox<String> cmbTipoServico;
    private javax.swing.ButtonGroup grupoTipoCliente;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAtivo;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JLabel lblBairro;
    private javax.swing.JLabel lblCampoCpfCnpj;
    private javax.swing.JLabel lblCelularRamal;
    private javax.swing.JLabel lblCep;
    private javax.swing.JLabel lblCep2;
    private javax.swing.JLabel lblCep3;
    private javax.swing.JLabel lblCepExiste;
    private javax.swing.JLabel lblCidade;
    private javax.swing.JLabel lblCodigoServico;
    private javax.swing.JLabel lblCpfCnpjExiste;
    private javax.swing.JLabel lblDataAte;
    private javax.swing.JLabel lblDataCadastro;
    private javax.swing.JLabel lblDataEncerramento;
    private javax.swing.JLabel lblDigiteODado;
    private javax.swing.JLabel lblDiretorioArquivoTrocado;
    private javax.swing.JLabel lblEstado;
    private javax.swing.JLabel lblLogradouro;
    private javax.swing.JLabel lblNomeArquivo;
    private javax.swing.JLabel lblNomeArquivoTrocado;
    private javax.swing.JLabel lblNomeFicticio;
    private javax.swing.JLabel lblNomeFuncValor;
    private javax.swing.JLabel lblNumeroLog;
    private javax.swing.JLabel lblNumeroLogradouro;
    private javax.swing.JLabel lblOrcamento;
    private javax.swing.JLabel lblPesquisar;
    private javax.swing.JLabel lblRazaoSocial;
    private javax.swing.JLabel lblSelecionarFunc;
    private javax.swing.JLabel lblServicoEncontrado;
    private javax.swing.JLabel lblSexoDesc;
    private javax.swing.JLabel lblSexoValor;
    private javax.swing.JLabel lblTelefone;
    private javax.swing.JLabel lblTipoServico;
    private javax.swing.JPanel panDadosCliente;
    private javax.swing.JPanel panDadosServico;
    private javax.swing.JPanel panPrincipal;
    private javax.swing.JRadioButton rbtFisica;
    private javax.swing.JRadioButton rbtJuridica;
    private javax.swing.JFileChooser selecionarArquivo;
    private javax.swing.JTable tblFuncionarioTrabalhando;
    private javax.swing.JTable tblListagemServico;
    private javax.swing.JTextField txtBairro;
    private javax.swing.JTextField txtCelularRamal;
    private javax.swing.JTextField txtCidade;
    private javax.swing.JTextField txtCodFunc;
    private javax.swing.JTextField txtCodigoServico;
    private javax.swing.JTextField txtCpfCnpj;
    private javax.swing.JTextField txtEstado;
    private javax.swing.JTextField txtLogradouro;
    private javax.swing.JTextField txtNomePessoaFicticio;
    private javax.swing.JTextField txtNumero;
    private javax.swing.JTextField txtNumeroLogradouro;
    private javax.swing.JTextField txtPesquisa;
    private javax.swing.JTextField txtRazaoSocial;
    private javax.swing.JTextField txtTelefone;
    private javax.swing.JFormattedTextField txtfCep;
    private javax.swing.JFormattedTextField txtfDataAte;
    private javax.swing.JFormattedTextField txtfDataDe;
    private javax.swing.JFormattedTextField txtfDataEncerramento;
    private javax.swing.JFormattedTextField txtfDataInicio;
    // End of variables declaration//GEN-END:variables

    private void limiteDigitosPesquisa(String filtro) {
        /*
Código Serviço
Tipo Serviço
Serviço Ativo?
Data Início
Data Encerramento
Data Início Entre/Até
Data Encerramento Entre/Até
         */

        switch (filtro) {
            case "Código Serviço":
                lblDigiteODado.setText("Digite o Cód. do Serviço:");
                txtPesquisa.setText(control.Texto.maxLenghtCodigoServico(txtPesquisa.getText()));
                modoPesquisaNormal();
                txtPesquisa.requestFocus();
                break;
            case "Tipo Serviço":
                lblDigiteODado.setText("Digite o Tipo do Serviço:");
                txtPesquisa.setText(control.Texto.maxLenghtTipoServico(txtPesquisa.getText()));
                modoPesquisaNormal();
                txtPesquisa.requestFocus();
                break;
            case "Serviço Ativo?":
                lblDigiteODado.setText("Digite Sim/Ativo ou Não/Encerrado:");
                txtPesquisa.setText(control.Texto.maxLenghtServicoAtivo(txtPesquisa.getText()));
                modoPesquisaNormal();
                txtPesquisa.requestFocus();
                break;
            case "Data Início":
                lblDigiteODado.setText("Data do Início do Serviço:");
                modoPesquisaData(false);
                txtfDataDe.requestFocus();
                break;
            case "Data Encerramento":
                lblDigiteODado.setText("Data do Encerramento do Serviço:");
                modoPesquisaData(false);
                txtfDataDe.requestFocus();
                break;
            case "Data Início Entre/Até":
                lblDigiteODado.setText("Data de Início Entre:");
                modoPesquisaData(true);
                txtfDataDe.requestFocus();
                break;
            case "Data Encerramento Entre/Até":
                lblDigiteODado.setText("Data de Encerramento Entre:");
                modoPesquisaData(true);
                txtfDataDe.requestFocus();
                break;
            default:
                JOptionPane.showMessageDialog(this, "Erro ao definir limite de caracteres do campo de pesquisa.",
                        "Erro - limite de dígitos dinâmico", 0);
                break;
        }
    }

    private void modoPesquisaNormal() {
        txtPesquisa.setSize(490, 25);
        txtPesquisa.setVisible(true);
        txtfDataDe.setVisible(false);
        txtfDataAte.setVisible(false);
        lblDataAte.setVisible(false);
        btnPesquisar.setVisible(false);
    }

    private void modoPesquisaData(boolean fixaOuEntre) {
        boolean dataFixa = false;
        boolean dataEntreAte = true;

        if (fixaOuEntre == dataEntreAte) {
            txtPesquisa.setVisible(false);
            txtfDataDe.setVisible(true);
            txtfDataAte.setVisible(true);
            lblDataAte.setVisible(true);
            btnPesquisar.setVisible(true);
        } else if (fixaOuEntre == dataFixa) {
            txtPesquisa.setVisible(false);
            txtfDataDe.setVisible(true);
            txtfDataAte.setVisible(false);
            lblDataAte.setVisible(false);
            btnPesquisar.setVisible(true);
        }
    }

    private void selecionarAoFocar() {
        //Código para selecionar o texto todo ao ganhar foco
        txtfDataDe.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        txtfDataDe.selectAll();
                    }
                });
            }
        });

        txtfDataAte.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        txtfDataAte.selectAll();
                    }
                });
            }
        });

        txtfDataInicio.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        txtfDataInicio.selectAll();
                    }
                });
            }
        });

        txtfDataEncerramento.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        txtfDataEncerramento.selectAll();
                    }
                });
            }
        });

        txtfCep.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        txtfCep.selectAll();
                    }
                });
            }
        });
    }

    private void pesquisarFiltrada() {
        int opcaoFiltro = cmbFiltro.getSelectedIndex();
        int opcaoDataInicio = 3;
        int opcaoDataInicioDeAte = 5;
        int opcaoDataEncerramento = 4;
        int opcaoDataEncerramentoDeAte = 6;

        if ((opcaoFiltro != opcaoDataInicio) && (opcaoFiltro != opcaoDataEncerramento)
                && (opcaoFiltro != opcaoDataInicioDeAte) && (opcaoFiltro != opcaoDataEncerramentoDeAte)) {
            if (!"".equals(txtPesquisa.getText().trim())) {
                atualizarTabelaServico(true);
            } else {
                limparTabelaServico();
            }
        }
    }

    private void inicializarTabelaServico() {
        String[] nomeColunas = {"Cód. Serviço", "Tipo do Serviço", "Tipo Cliente",
            "Serviço Ativo?", "Data Início", "Data Encerramento", "Arquivo de Descrição"};

        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tblListagemServico.setModel(model);
        model.setColumnIdentifiers(nomeColunas);
        model.setRowCount(0);
    }

    private void limparTabelaServico() {
        DefaultTableModel model = new DefaultTableModel();
        model = (DefaultTableModel) tblListagemServico.getModel();
        model.setRowCount(0);
        /*
        Chama o metodo limparCampos para limpar os dados do registro anteriormente
        selecionado.
         */
        limparCampos();
    }

    private void limparCampos() {
        txtCodigoServico.setText("");
        txtfDataInicio.setText("");
        txtfDataEncerramento.setText("");
        rbtFisica.setSelected(false);
        rbtJuridica.setSelected(false);
        txtCpfCnpj.setText("");
        txtfCep.setText("");
        lblNomeArquivoTrocado.setText("Nenhum arquivo selecionado.");
        lblNomeArquivo.setText("...");
        lblDiretorioArquivoTrocado.setText("...");
        btnAbrirArquivoRelatorio.setEnabled(false);
        txtCodFunc.setText("");
        lblNomeFuncValor.setText("-");
        inicializarTabelaFuncionario();
        esvaziarObjetosLocais();
        btnOrcamento.setEnabled(false);
        cmbTipoServico.removeAllItems();
        cmbTipoServico.addItem("Preventivo");
        cmbTipoServico.addItem("Corretivo");
        cmbTipoServico.addItem("Emergencial");
        cmbTipoServico.addItem("-");
        cmbTipoServico.setSelectedIndex(3);
        verificarFuncionario();
        btnAtivarDesativar.setEnabled(false);
        btnOrcamento.setEnabled(false);
        btnDeletar.setEnabled(false);
    }

    public void esvaziarObjetosLocais() {
        flagOrcamento = false;
        existeCep = false;
        existeCpf = false;
        existeCnpj = false;
        existeServico = false;
        existeContrato = false;
        endExibicao = null;
        pessoaFisicaExibicao = null;
        pessoaJuridicaExibicao = null;
        pessoaExibicao = null;
        flagFuncionario = false;
        f = null;
        flagAtivo = false;
        PK_REF = null;
    }

    public void inicializarTabelaFuncionario() {
        String[] nomeColunas = {"Código", "Funcionário", "Cód. Serviços em execução"};
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {

                return false;
            }
        };
        tblFuncionarioTrabalhando.setModel(model);
        model.setColumnIdentifiers(nomeColunas);
        model.setRowCount(0);
    }

    private void atualizarTabelaServico(boolean filtrada) {
        DefaultTableModel model = new DefaultTableModel();
        model = (DefaultTableModel) tblListagemServico.getModel();
        model.setRowCount(0);

        ArrayList<Servico> lista = new ArrayList<>();

        if (filtrada) {
            lista = DaoServico.listarServicoFiltrada(String.valueOf(cmbFiltro.getSelectedItem()),
                    txtPesquisa.getText().toLowerCase().trim(), txtfDataDe.getText().toLowerCase().trim(),
                    txtfDataAte.getText().toLowerCase().trim());
            ultimoTipoPesquisa = true;
        } else {
            lista = DaoServico.listarServico();
            ultimoTipoPesquisa = false;
        }

        Object dadosLinha[] = new Object[7];

        for (int i = 0; i < lista.size(); i++) {
            dadosLinha[0] = lista.get(i).getCodigoServico();
            dadosLinha[1] = lista.get(i).getTipoServicoSTR();
            dadosLinha[2] = lista.get(i).getTipoClienteSTR();
            dadosLinha[3] = lista.get(i).getStatusServicoSTR();
            dadosLinha[4] = lista.get(i).getDataServico();
            if (lista.get(i).getStatusServicoBooleano()) {
                dadosLinha[5] = "       -";
            } else {
                dadosLinha[5] = lista.get(i).getDataServicoFim();
            }
            dadosLinha[6] = lista.get(i).getDescricaoServicoFILE();

            model.addRow(dadosLinha);

            /*
        String[] nomeColunas = {"Cód. Serviço", "Tipo do Serviço", "Tipo Cliente",
            "Serviço Ativo?", "Data Início", "Data Encerramento", "Diretório Arquivo de Descrição"};
             */
        }

        limparCampos();
    }

    private void textSizeCpfCnpj() {
        txtCpfCnpj.setText(control.Texto.maxLenghtCPFCNPJ(txtCpfCnpj.getText(), rbtFisica.isSelected()));
    }

    private void validarCpfCnpj() {
        if (rbtFisica.isSelected()) {
            if ((txtCpfCnpj.getText().length() < 11) || (txtCpfCnpj.getText().length() > 11)) {
                lblCpfCnpjExiste.setText("CPF Inválido!");
                lblCpfCnpjExiste.setForeground(Color.red);
                limparExibicaoPessoa();
                existeCpf = false;
            } else {
                existeCpf = dao.DaoPessoa.existePessoaFisica(txtCpfCnpj.getText());
                if (existeCpf) {
                    PessoaFisica pessoaFisica = new PessoaFisica();
                    pessoaFisica = dao.DaoPessoa.popularPessoaFisica(txtCpfCnpj.getText());
                    if (pessoaFisica.getPessoa().getManterContrato() == 0) {
                        lblCpfCnpjExiste.setText("CPF Sem contrato!");
                        lblCpfCnpjExiste.setForeground(Color.red);
                        existeContrato = false;
                    } else {
                        lblCpfCnpjExiste.setText("CPF Cadastrado.");
                        lblCpfCnpjExiste.setForeground(Color.black);
                        existeContrato = true;
                    }
                    popularExibicaoPessoa(pessoaFisica);
                } else {
                    lblCpfCnpjExiste.setText("CPF Inexistente!");
                    lblCpfCnpjExiste.setForeground(Color.red);
                    existeContrato = false;
                    limparExibicaoPessoa();
                }
            }
        } else if (rbtJuridica.isSelected()) {
            if ((txtCpfCnpj.getText().length() < 14) || (txtCpfCnpj.getText().length() > 14)) {
                lblCpfCnpjExiste.setText("CNPJ Inválido!");
                lblCpfCnpjExiste.setForeground(Color.red);
                limparExibicaoPessoa();
                existeCnpj = false;
            } else {

                existeCnpj = dao.DaoPessoa.existePessoaJuridica(txtCpfCnpj.getText());
                if (existeCnpj) {
                    PessoaJuridica pessoaJuridica = new PessoaJuridica();
                    pessoaJuridica = dao.DaoPessoa.popularPessoaJuridica(txtCpfCnpj.getText());
                    if (pessoaJuridica.getPessoa().getManterContrato() == 0) {
                        lblCpfCnpjExiste.setText("CNPJ Sem contrato!");
                        lblCpfCnpjExiste.setForeground(Color.red);
                        existeContrato = false;
                    } else {
                        lblCpfCnpjExiste.setText("CNPJ Cadastrado.");
                        lblCpfCnpjExiste.setForeground(Color.black);
                        existeContrato = true;
                    }

                    popularExibicaoPessoaJuridica(pessoaJuridica);
                } else {
                    lblCpfCnpjExiste.setText("CNPJ Inexistente!");
                    lblCpfCnpjExiste.setForeground(Color.red);
                    existeContrato = false;
                    limparExibicaoPessoaJuridica();
                }
            }
        }
    }

    private void verificarCepExistente() {
        String cep = txtfCep.getText();
        cep = cep.replace("-", "");
        cep = cep.trim();
        if ((cep.length() < 8) || (cep.length() > 8)) {
            lblCepExiste.setText("Cep Inválido.");
            lblCepExiste.setForeground(Color.red);
            limparExibicaoEndereco();
            existeCep = false;
        } else {
            this.existeCep = dao.DaoEndereco.existeEndereco(cep);
            if (existeCep) {
                lblCepExiste.setText("CEP Cadastrado.");
                lblCepExiste.setForeground(Color.black);
                Endereco end = new Endereco();
                end = dao.DaoEndereco.popularEndereco(cep);
                popularExibicaoEndereco(end);
            } else {
                lblCepExiste.setText("CEP Inexistente.");
                lblCepExiste.setForeground(Color.red);
                limparExibicaoEndereco();
            }
        }
    }

    private void popularCampos() {
        //População do objeto servico
        String codigoServico = String.valueOf(tblListagemServico.getModel().getValueAt(tblListagemServico.getSelectedRow(), 0));
        PK_REF = codigoServico;
        Servico servico = new Servico();
        servico = dao.DaoServico.popularServico(codigoServico);

        //Dados do servico adicionados aos campo de texto
        txtCodigoServico.setText(servico.getCodigoServico());
        txtfDataInicio.setText(servico.getDataServico());

        if (servico.getStatusServicoBooleano()) {
            txtfDataEncerramento.setText("");
        } else {
            txtfDataEncerramento.setText(servico.getDataServicoFim());
        }
        rbtJuridica.setSelected(servico.getTipoClienteBooleano());
        rbtFisica.setSelected(!servico.getTipoClienteBooleano());
        if (rbtFisica.isSelected()) {
            modoFisica();
        } else {
            modoJuridica();
        }
        //Coleta de dados do cliente do serviço e do endereço do serviço
        ArrayList<Object> lista = new ArrayList<>();

        lista = dao.DaoServico.popularListaServicoDetalhada(codigoServico, servico.getTipoClienteBanco());
        Endereco endereco = new Endereco();
        endereco = (Endereco) lista.get(2);

        //Dados do endereço adicionado aos campos de texto
        txtfCep.setText(endereco.getCep());
        txtNumeroLogradouro.setText((String) lista.get(3));
        txtLogradouro.setText(endereco.getLogradouro());
        txtCidade.setText(endereco.getCidade());
        txtEstado.setText(endereco.getEstado());
        txtBairro.setText(endereco.getBairro());
        txtNumero.setText((String) lista.get(3));

        //Parte relacinada ao arquivo de descrição do serviço
        lblNomeArquivo.setText(servico.getDescricaoServicoFILE());
        if (servico.getDescricaoServicoFILE().equals("Nenhum arquivo selecionado.")) {
            btnAbrirArquivoRelatorio.setEnabled(false);
        } else {
            btnAbrirArquivoRelatorio.setEnabled(true);
        }

        //Dados da pessoa, seja fisica ou juridica, adicionado aos campos
        if (!servico.getTipoClienteBooleano()) {
            PessoaFisica pessoaFisica = new PessoaFisica();
            pessoaFisica = (PessoaFisica) lista.get(0);
            txtCpfCnpj.setText(pessoaFisica.getCpf());
            lblSexoValor.setText(pessoaFisica.getSexoSTR());
            txtNomePessoaFicticio.setText(pessoaFisica.getPessoa().getNome());
            txtCelularRamal.setText(String.valueOf(pessoaFisica.getCelular()));
            txtTelefone.setText(String.valueOf(pessoaFisica.getPessoa().getTelefone()));
        } else {
            PessoaJuridica pessoaJuridica = new PessoaJuridica();
            pessoaJuridica = (PessoaJuridica) lista.get(1);
            txtCpfCnpj.setText(pessoaJuridica.getCnpj());
            txtRazaoSocial.setText(pessoaJuridica.getRazaoSocial());
            txtNomePessoaFicticio.setText(pessoaJuridica.getPessoa().getNome());
            txtCelularRamal.setText(String.valueOf(pessoaJuridica.getRamalCliente()));
            txtTelefone.setText(String.valueOf(pessoaJuridica.getPessoa().getTelefone()));
        }

        //LEGADO - definicao de flags de acorto com o serviço ativo ou encerrado
        if ("Ativo".equals((String) tblListagemServico.getValueAt(tblListagemServico.getSelectedRow(), 3))) {
            //btnAtivarDesativar.setText("Encerrar/Concluir Serviço");
            //lblAtivo.setText("Serviço está em execução.");
            flagAtivo = true;
        } else {
            //btnAtivarDesativar.setText("Ativar/Iniciar Serviço");
            //lblAtivo.setText("Serviço concluído/encerrado.");
            flagAtivo = false;
        }

        //Definição das restrições do tipo de serviço
        definirRestricaoTipoServico(servico.getTipoServicoSTR());

        //Definição das restrições do orçamento do serviço
        definirRestricaoOrcamento(codigoServico, servico.getTipoServicoSTR());

        //Definição das restrições da ativação ou encerramento do serviço
        definirRestricaoAtivarServico(codigoServico);

        //População da tabela de funcionários
        atualizarTabelaFuncionario(codigoServico);
    }

    private void definirRestricaoTipoServico(String tipoServicoSTR) {
        cmbTipoServico.removeAllItems();
        cmbTipoServico.addItem("Preventivo");
        cmbTipoServico.addItem("Corretivo");
        cmbTipoServico.addItem("Emergencial");

        switch (tipoServicoSTR) {
            case "Preventivo":
                cmbTipoServico.removeAllItems();
                cmbTipoServico.addItem("Preventivo");
                cmbTipoServico.addItem("Corretivo");
                cmbTipoServico.setSelectedIndex(0);
                break;
            case "Corretivo":
                cmbTipoServico.removeAllItems();
                cmbTipoServico.addItem("Corretivo");
                cmbTipoServico.addItem("Emergencial");
                cmbTipoServico.setSelectedIndex(0);
                break;
            case "Emergencial":
                cmbTipoServico.removeAllItems();
                cmbTipoServico.addItem("Emergencial");
                cmbTipoServico.setSelectedIndex(0);
                break;
        }

    }

    private void atualizarTabelaFuncionario(String codigoServico) {
        DefaultTableModel model = new DefaultTableModel();
        model = (DefaultTableModel) tblFuncionarioTrabalhando.getModel();
        model.setRowCount(0);

        ArrayList<Funcionario> lista = new ArrayList<>();
        lista = DaoServico.listarFuncionariosEmServico(codigoServico);

        Object rowData[] = new Object[3];
        for (int i = 0; i < lista.size(); i++) {
            rowData[0] = lista.get(i).getCodigoFuncionario();
            rowData[1] = lista.get(i).getPessoa().getNome();
            rowData[2] = lista.get(i).getCargo();

            model.addRow(rowData);
        }

    }

    private void removerArquivo() {
        lblNomeArquivoTrocado.setText("Nenhum arquivo selecionado.");
        lblNomeArquivo.setText("...");
    }

    private void selecionarFuncionario() {
        boolean flag = true;
        if (flagFuncionario) {
            DefaultTableModel model = (DefaultTableModel) tblFuncionarioTrabalhando.getModel();
            Object rowData[] = new Object[3];
            rowData[0] = (String) txtCodFunc.getText();
            rowData[1] = (String) lblNomeFuncValor.getText();
            String codigos = "";

            codigos = DaoServico.listarServicosDoFuncionario(txtCodFunc.getText());

            if (codigos.equals("")) {
                rowData[2] = (String) "Livre";
            } else {
                codigos = codigos.substring(2);
                rowData[2] = (String) codigos;
            }

            String aux = (String) rowData[0];
            String aux2 = "";

            for (int i = 0; i < model.getRowCount(); i++) {
                aux2 = (String) model.getValueAt(i, 0);
                if (aux.equals(aux2)) {
                    flag = false;
                }
            }
            if (flag) {
                model.addRow(rowData);
                tblFuncionarioTrabalhando.setModel(model);
                txtCodFunc.setText("");
                btnSelecionarfunc.setEnabled(false);
                txtCodFunc.requestFocus();
            }
        }
    }

    private void verificarFuncionario() {
        flagFuncionario = DaoFuncionario.existeFuncionario(txtCodFunc.getText());
        if (flagFuncionario) {
            Funcionario funcionario = new Funcionario();
            funcionario = dao.DaoFuncionario.popularFuncionario(txtCodFunc.getText());
            lblNomeFuncValor.setText(funcionario.getPessoa().getNome());
            lblSelecionarFunc.setText("Funcionário Livre.");
            lblSelecionarFunc.setForeground(Color.black);
            flagFuncionario = true;
            btnSelecionarfunc.setEnabled(true);
            if (dao.DaoServico.isFuncionarioEmServico(txtCodFunc.getText())) {
                lblSelecionarFunc.setText("Funcionário já vinculado.");
                lblSelecionarFunc.setForeground(Color.black);
                flagFuncionario = true;
                btnSelecionarfunc.setEnabled(true);
            }
        } else {
            lblNomeFuncValor.setText("-");
            lblSelecionarFunc.setText("Funcionário Inexistente");
            lblSelecionarFunc.setForeground(Color.red);
            flagFuncionario = false;
            btnSelecionarfunc.setEnabled(false);
        }
    }

    private void abrirArquivo() {
        Thread thread = new Thread(abrirArquivo);
        thread.start();
    }

    public Runnable abrirArquivo = new Runnable() {
        @Override
        public void run() {
            control.ManipularArquivos.lerEAbrirArquivoServidor(lblNomeArquivo.getText());
        }
    };

    private void trocarArquivo() {
        FileFilter filtroDocx = new FileNameExtensionFilter("Documentos do Word", "docx");
        FileFilter filtroTxt = new FileNameExtensionFilter("Arquivos de texto", "txt");
        selecionarArquivo.addChoosableFileFilter(filtroDocx);
        selecionarArquivo.addChoosableFileFilter(filtroTxt);

        int retornoJFileChooser = selecionarArquivo.showOpenDialog(this);

        if (retornoJFileChooser == javax.swing.JFileChooser.APPROVE_OPTION) {
            java.io.File arquivo = selecionarArquivo.getSelectedFile();
            String nomeArquivo = arquivo.getName().toString();
            String diretorioArquivo = arquivo.toString();
            lblNomeArquivoTrocado.setText(nomeArquivo);
            lblDiretorioArquivoTrocado.setText(diretorioArquivo);
        }
    }

    private void definirRestricaoOrcamento(String codigoServico, String tipoServico) {
        boolean existeOrcamento = dao.DaoOrcamento.existeOrcamento(codigoServico);
        boolean orcamentoPago = dao.DaoOrcamento.existeOrcamentoPago(codigoServico);

        if (tipoServico.equals("Preventivo")) {
            btnOrcamento.setEnabled(false);
            lblOrcamento.setText("Serviço Preventivo não tem Orçamento.");
        } else {
            if (existeOrcamento) {
                if (orcamentoPago) {
                    btnOrcamento.setEnabled(true);
                    lblOrcamento.setText("O orçamento desse serviço já foi pago!");
                    btnOrcamento.setText("Visualizar Orçamento");
                } else {
                    btnOrcamento.setEnabled(true);
                    lblOrcamento.setText("Esse serviço já possui um orçamento.");
                    btnOrcamento.setText("Alterar Orçamento");
                }
            } else {
                btnOrcamento.setEnabled(true);
                lblOrcamento.setText("Esse serviço não possui um orçamento");
                btnOrcamento.setText("Criar Orçamento");
            }

            if (!flagAtivo) {
                btnOrcamento.setEnabled(false);
                lblOrcamento.setText("Serviço encerrado não cria/altera orçamento");
                btnOrcamento.setText("Criar Orçamento");
            }
        }
    }

    private void definirRestricaoAtivarServico(String codigoServico) {
        boolean servicoAtivo = dao.DaoServico.verificarServicoAtivo(codigoServico);
        boolean orcamentoPago = dao.DaoOrcamento.existeOrcamentoPago(codigoServico);

        if (servicoAtivo) {
            btnAtivarDesativar.setText("Encerrar Serviço");
            if (!orcamentoPago) {
                lblAtivo.setText("Orçamento ainda não foi pago!");
                btnAtivarDesativar.setEnabled(false);
            } else {
                lblAtivo.setText("Encerrar o serviço?");
                btnAtivarDesativar.setEnabled(true);
            }
        } else {
            btnAtivarDesativar.setText("Ativar Serviço");
            btnAtivarDesativar.setEnabled(true);
        }
    }

    private void salvarArquivo() {
        try {
            control.ManipularArquivos.enviarArquivoServico(lblNomeArquivoTrocado.getText(),
                    lblDiretorioArquivoTrocado.getText(), txtCodigoServico.getText());

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Não foi possível enviar o arquivo para o servidor.\n\n"
                    + "Verifique com o administrador do sistema se o servidor socket está funcionando\n"
                    + "e se a porta do socket é a mesma utilizada no sistema cliente.\n"
                    + "Caso as portas sejam as mesmas e o servidor esteja operacional, ocorreu algum problema\n "
                    + "na transferência do arquivo. O Serviço será cadastrado sem nenhum arquivo de descrição.\n "
                    + "Você pode adicionar manualmente um arquivo futuramente através da Listagem de Serviços.\n\n",
                    "Erro ao enviar arquivo para o servidor", 0);
            Logger.getLogger(FrmCadastroServico.class.getName()).log(Level.SEVERE, null, ex);

        }

    }

    private void alterarServico() {
        //validacao feita as pressas. A estrutura está horrível, precisa ser refeita após o TCC.

        boolean validacao = true;
        if (verificarFuncVazio() && (existeCnpj || existeCpf)) {
            validacao = false;
        } else {
            JOptionPane.showMessageDialog(this, "Funcionário vazio, ou os dados do CPF/CNPJ estão inválidos.", "Erro - Dados inválidos!", 0);
        }
//
//        if (validacao) {
//            if (flagAtivo) {
//                if (txtfDataInicio.getText().isEmpty() || txtfDataEncerramento.getText().isEmpty()) {
//                    validacao = false;
//                    JOptionPane.showMessageDialog(this, "Campo de Data de Inicio e Encerramento em branco.", "Erro - Datas inválidas", 0);
//                }
//            } else {
//                if (txtfDataInicio.getText().isEmpty()) {
//                    validacao = false;
//                    JOptionPane.showMessageDialog(this, "Campo de Data de Inicio branco.", "Erro - Data inválida", 0);
//                    txtfDataInicio.requestFocus();
//                }
//
//            }
//        }

        if (validacao) {
            if (txtNumeroLogradouro.getText().isEmpty()) {
                validacao = false;
                JOptionPane.showMessageDialog(this, "Campo de Número de Logradouro em branco.", "Erro - Nr Logradouro inválido", 0);
                txtNumeroLogradouro.requestFocus();
            }
        }

        //caso passou pelas validações
        if (validacao) {
            try {
                tblListagemServico.getCellEditor().stopCellEditing();
                tblFuncionarioTrabalhando.getCellEditor().stopCellEditing();
            } catch (Exception ex) {

            }

            //Inicio procedimento alteração - populando objeto servico
            Servico servico = new Servico();

            servico.setCodigoServico(String.valueOf(
                    tblListagemServico.getModel().getValueAt(tblListagemServico.getSelectedRow(), 0)));

            if (rbtFisica.isSelected()) {
                servico.setCpfCliente(txtCpfCnpj.getText());
            } else if (rbtJuridica.isSelected()) {
                servico.setCnpjCliente(txtCpfCnpj.getText());
            }

            servico.setTipoServicoSTR(String.valueOf(cmbTipoServico.getSelectedItem()));

            if (flagAtivo) {
                servico.setDataServico(txtfDataInicio.getText());
                servico.setDataServicoFim(txtfDataEncerramento.getText());
            } else {
                servico.setDataServico(txtfDataInicio.getText());
                servico.setDataServicoFim(txtfDataInicio.getText());
            }
            Endereco end = new Endereco();
            String cepSTR = txtfCep.getText();
            cepSTR = cepSTR.replace("-", "");
            cepSTR = cepSTR.trim();
            end.setCep(cepSTR);
            servico.setEndereco(end);

            //Parte de arquivo trocado
            if (lblNomeArquivoTrocado.getText().equals("Nenhum arquivo selecionado.")) {
                servico.setDescricaoServicoFILE(lblNomeArquivo.getText());
            } else {
                salvarArquivo();
                servico.setDescricaoServicoFILE(txtCodigoServico.getText() + "-" + lblNomeArquivo.getText());
            }
            ArrayList<Funcionario> listaFunc = new ArrayList<>();

            for (int i = 0; i < tblFuncionarioTrabalhando.getRowCount(); i++) {
                Funcionario funcionario = new Funcionario();
                funcionario.setCodigoFuncionario(String.valueOf(tblFuncionarioTrabalhando.getValueAt(i, 0)));
                listaFunc.add(funcionario);
            }

            //altera endereço servico
            dao.DaoServico.alterarEnderecoServico(servico, txtNumeroLogradouro.getText());
            //finalmente altera o serviço 
            DaoServico.alterarServico(servico, listaFunc, rbtJuridica.isSelected(), txtCpfCnpj.getText());

        }
    }

    private void deletarServico() {
        String codigoServico;
        codigoServico = String.valueOf(tblListagemServico.getValueAt(tblListagemServico.getSelectedRow(), 0));

        if (dao.DaoOrcamento.existeOrcamento(codigoServico) && dao.DaoOrcamento.existeOrcamentoPago(codigoServico)) {
            System.out.println("nao existe orcamento e nem foi pago");
        } else {
            int opcao;
            opcao = JOptionPane.showConfirmDialog(this, "Atenção! Todos os registros relacionados ao Serviço "
                    + String.valueOf(tblListagemServico.getValueAt(tblListagemServico.getSelectedRow(), 0))
                    + " serão permanentemente removidos.\n\nDeseja realmente excluir o registro?",
                    "Confirmação de exclusão",
                    JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

            if (opcao == 0) {
                codigoServico = String.valueOf(tblListagemServico.getValueAt(tblListagemServico.getSelectedRow(), 0));
                dao.DaoServico.deletarServico(codigoServico);
                atualizarTabelaServico(ultimoTipoPesquisa);
                limparCampos();
            }
        }

    }
    
    private void definirRestricaoDeletar() {
        if (btnOrcamento.getText().equals("Visualizar Orçamento")) {
            btnDeletar.setEnabled(false);
        } else {
            btnDeletar.setEnabled(true);
        }
    }

}
