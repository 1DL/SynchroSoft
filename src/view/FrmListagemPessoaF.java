/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import control.TextSize;
import dao.DaoPessoa;
import java.awt.Color;
import java.awt.Toolkit;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import model.Endereco;
import model.Pessoa;
import model.PessoaFisica;

/**
 *
 * @author Luiz
 */
public class FrmListagemPessoaF extends javax.swing.JFrame {

    private boolean cepCadastrado;
    private boolean ultimoTipoPesquisa;
    private boolean existeCpf;
    private String PK_REF;

    /**
     * Creates new form FrmListagemPessoa
     */
    public FrmListagemPessoaF(int nvlAdm) {
        initComponents();
        inicializarTabela();
        txtfDataDe.setText(control.Datas.getDiaHoje());
        txtfDataAte.setText(control.Datas.getDiaHoje());
        selecionarAoFocar();
        modoPesquisaNormal();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoContrato = new javax.swing.ButtonGroup();
        grupoSexo = new javax.swing.ButtonGroup();
        panPrincipal = new javax.swing.JPanel();
        txtPesquisa = new javax.swing.JTextField();
        cmbFiltro = new javax.swing.JComboBox<>();
        lblDigiteODado = new javax.swing.JLabel();
        lblPesquisar = new javax.swing.JLabel();
        panDadosPessoaF = new javax.swing.JPanel();
        lblTelefone = new javax.swing.JLabel();
        txtTelefone = new javax.swing.JTextField();
        lblNumeroLogradouro = new javax.swing.JLabel();
        lblNome = new javax.swing.JLabel();
        txtNomePessoaFicticio = new javax.swing.JTextField();
        lblCep = new javax.swing.JLabel();
        lblCepExiste = new javax.swing.JLabel();
        btnCadastrarCep = new javax.swing.JButton();
        txtNumeroLogradouro = new javax.swing.JTextField();
        lblTipoPessoa1 = new javax.swing.JLabel();
        rbtSimCadastro = new javax.swing.JRadioButton();
        rbtNaoCadastro = new javax.swing.JRadioButton();
        lblCpfCnpj = new javax.swing.JLabel();
        lblCelRamal = new javax.swing.JLabel();
        txtCelRamal = new javax.swing.JTextField();
        lblSexo = new javax.swing.JLabel();
        rbtMasculino = new javax.swing.JRadioButton();
        rbtFeminino = new javax.swing.JRadioButton();
        lblDataCadastro = new javax.swing.JLabel();
        txtfDataCadastro = new javax.swing.JFormattedTextField();
        btnHoje = new javax.swing.JButton();
        lblCpfCnpjExiste = new javax.swing.JLabel();
        txtfCep = new javax.swing.JFormattedTextField();
        txtCpfCnpj = new javax.swing.JTextField();
        btnDeletar = new javax.swing.JButton();
        btnLimparTabela = new javax.swing.JButton();
        btnListarTodos = new javax.swing.JButton();
        btnCadastraCPF = new javax.swing.JButton();
        btnAlterar = new javax.swing.JButton();
        txtfDataDe = new javax.swing.JFormattedTextField();
        lblDataAte = new javax.swing.JLabel();
        txtfDataAte = new javax.swing.JFormattedTextField();
        btnHojePesquisa = new javax.swing.JButton();
        btnPesquisar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblListagemPessoaF = new javax.swing.JTable();
        btnDeletarTodosRegistros = new javax.swing.JButton();
        lblPessoaFEncontrado = new javax.swing.JLabel();
        btnMenuPrincipal = new javax.swing.JButton();
        btnFecharFrame = new javax.swing.JButton();
        lblBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Listar Pessoas Físicas");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/img/logopng32.png")));
        setMaximumSize(new java.awt.Dimension(1152, 648));
        setMinimumSize(new java.awt.Dimension(1152, 648));
        setResizable(false);
        setSize(new java.awt.Dimension(1152, 648));
        getContentPane().setLayout(null);

        panPrincipal.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panPrincipal.setOpaque(false);
        panPrincipal.setLayout(null);

        txtPesquisa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPesquisaKeyReleased(evt);
            }
        });
        panPrincipal.add(txtPesquisa);
        txtPesquisa.setBounds(620, 10, 60, 25);

        cmbFiltro.setMaximumRowCount(15);
        cmbFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nome", "CPF", "Sexo", "CEP", "Logradouro", "Nr Logradouro", "Telefone", "Celular", "Mantém Contrato?", "Data de Cadastro", "Data Entre/Até" }));
        cmbFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFiltroActionPerformed(evt);
            }
        });
        panPrincipal.add(cmbFiltro);
        cmbFiltro.setBounds(160, 10, 210, 25);

        lblDigiteODado.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblDigiteODado.setText("Digite o(a) Nome:");
        panPrincipal.add(lblDigiteODado);
        lblDigiteODado.setBounds(372, 10, 280, 25);

        lblPesquisar.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblPesquisar.setText("Pesquisar por: ");
        panPrincipal.add(lblPesquisar);
        lblPesquisar.setBounds(10, 10, 120, 25);

        panDadosPessoaF.setBackground(new java.awt.Color(204, 204, 204));
        panDadosPessoaF.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados da Pessoa Física\n"));
        panDadosPessoaF.setOpaque(false);
        panDadosPessoaF.setLayout(null);

        lblTelefone.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblTelefone.setText("Telefone:");
        panDadosPessoaF.add(lblTelefone);
        lblTelefone.setBounds(10, 130, 140, 25);

        txtTelefone.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTelefoneKeyReleased(evt);
            }
        });
        panDadosPessoaF.add(txtTelefone);
        txtTelefone.setBounds(150, 130, 316, 25);

        lblNumeroLogradouro.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblNumeroLogradouro.setText("Nº Logradouro:");
        panDadosPessoaF.add(lblNumeroLogradouro);
        lblNumeroLogradouro.setBounds(530, 90, 150, 25);

        lblNome.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblNome.setText("Nome:");
        panDadosPessoaF.add(lblNome);
        lblNome.setBounds(10, 50, 140, 25);

        txtNomePessoaFicticio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNomePessoaFicticioKeyReleased(evt);
            }
        });
        panDadosPessoaF.add(txtNomePessoaFicticio);
        txtNomePessoaFicticio.setBounds(150, 50, 316, 25);

        lblCep.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblCep.setText("CEP:");
        panDadosPessoaF.add(lblCep);
        lblCep.setBounds(10, 90, 140, 25);

        lblCepExiste.setForeground(java.awt.Color.red);
        lblCepExiste.setText("Cep Inválido.");
        panDadosPessoaF.add(lblCepExiste);
        lblCepExiste.setBounds(280, 90, 110, 25);

        btnCadastrarCep.setText("Cadastrar");
        btnCadastrarCep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarCepActionPerformed(evt);
            }
        });
        panDadosPessoaF.add(btnCadastrarCep);
        btnCadastrarCep.setBounds(384, 87, 80, 29);

        txtNumeroLogradouro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumeroLogradouroActionPerformed(evt);
            }
        });
        txtNumeroLogradouro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNumeroLogradouroKeyReleased(evt);
            }
        });
        panDadosPessoaF.add(txtNumeroLogradouro);
        txtNumeroLogradouro.setBounds(680, 90, 120, 25);

        lblTipoPessoa1.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblTipoPessoa1.setText("Possui Contrato:");
        panDadosPessoaF.add(lblTipoPessoa1);
        lblTipoPessoa1.setBounds(10, 10, 140, 25);

        grupoContrato.add(rbtSimCadastro);
        rbtSimCadastro.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        rbtSimCadastro.setText("Sim");
        rbtSimCadastro.setOpaque(false);
        rbtSimCadastro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtSimCadastroActionPerformed(evt);
            }
        });
        panDadosPessoaF.add(rbtSimCadastro);
        rbtSimCadastro.setBounds(148, 10, 55, 25);

        grupoContrato.add(rbtNaoCadastro);
        rbtNaoCadastro.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        rbtNaoCadastro.setSelected(true);
        rbtNaoCadastro.setText("Não");
        rbtNaoCadastro.setOpaque(false);
        rbtNaoCadastro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtNaoCadastroActionPerformed(evt);
            }
        });
        panDadosPessoaF.add(rbtNaoCadastro);
        rbtNaoCadastro.setBounds(210, 10, 59, 25);

        lblCpfCnpj.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblCpfCnpj.setText("CPF:");
        panDadosPessoaF.add(lblCpfCnpj);
        lblCpfCnpj.setBounds(530, 50, 150, 25);

        lblCelRamal.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblCelRamal.setText("Celular:");
        panDadosPessoaF.add(lblCelRamal);
        lblCelRamal.setBounds(530, 130, 150, 25);

        txtCelRamal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCelRamalKeyReleased(evt);
            }
        });
        panDadosPessoaF.add(txtCelRamal);
        txtCelRamal.setBounds(680, 130, 316, 25);

        lblSexo.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblSexo.setText("Sexo:");
        panDadosPessoaF.add(lblSexo);
        lblSexo.setBounds(810, 90, 50, 25);

        grupoSexo.add(rbtMasculino);
        rbtMasculino.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        rbtMasculino.setSelected(true);
        rbtMasculino.setText("Masculino");
        rbtMasculino.setOpaque(false);
        rbtMasculino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtMasculinoActionPerformed(evt);
            }
        });
        panDadosPessoaF.add(rbtMasculino);
        rbtMasculino.setBounds(860, 90, 110, 25);

        grupoSexo.add(rbtFeminino);
        rbtFeminino.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        rbtFeminino.setText("Feminino");
        rbtFeminino.setOpaque(false);
        rbtFeminino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtFemininoActionPerformed(evt);
            }
        });
        panDadosPessoaF.add(rbtFeminino);
        rbtFeminino.setBounds(960, 90, 100, 25);

        lblDataCadastro.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblDataCadastro.setText("Data Cadastro:");
        panDadosPessoaF.add(lblDataCadastro);
        lblDataCadastro.setBounds(530, 10, 150, 25);

        txtfDataCadastro.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter()));
        panDadosPessoaF.add(txtfDataCadastro);
        txtfDataCadastro.setBounds(680, 10, 120, 25);

        btnHoje.setText("Hoje");
        btnHoje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHojeActionPerformed(evt);
            }
        });
        panDadosPessoaF.add(btnHoje);
        btnHoje.setBounds(810, 10, 55, 25);

        lblCpfCnpjExiste.setForeground(java.awt.Color.red);
        lblCpfCnpjExiste.setText("CPF Inválido.");
        panDadosPessoaF.add(lblCpfCnpjExiste);
        lblCpfCnpjExiste.setBounds(810, 50, 150, 25);

        try {
            txtfCep.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#####-###")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtfCep.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtfCepFocusLost(evt);
            }
        });
        txtfCep.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtfCepKeyReleased(evt);
            }
        });
        panDadosPessoaF.add(txtfCep);
        txtfCep.setBounds(150, 90, 127, 25);

        txtCpfCnpj.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCpfCnpjFocusLost(evt);
            }
        });
        txtCpfCnpj.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCpfCnpjKeyReleased(evt);
            }
        });
        panDadosPessoaF.add(txtCpfCnpj);
        txtCpfCnpj.setBounds(680, 50, 120, 25);

        panPrincipal.add(panDadosPessoaF);
        panDadosPessoaF.setBounds(10, 50, 1100, 170);

        btnDeletar.setText("Deletar registro selecionado");
        btnDeletar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletarActionPerformed(evt);
            }
        });
        panPrincipal.add(btnDeletar);
        btnDeletar.setBounds(10, 230, 170, 30);

        btnLimparTabela.setText("Limpar tabela");
        btnLimparTabela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparTabelaActionPerformed(evt);
            }
        });
        panPrincipal.add(btnLimparTabela);
        btnLimparTabela.setBounds(410, 230, 120, 30);

        btnListarTodos.setText("Listar todos os registros");
        btnListarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarTodosActionPerformed(evt);
            }
        });
        panPrincipal.add(btnListarTodos);
        btnListarTodos.setBounds(550, 230, 147, 30);

        btnCadastraCPF.setText("Cadastrar novo CPF");
        btnCadastraCPF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastraCPFActionPerformed(evt);
            }
        });
        panPrincipal.add(btnCadastraCPF);
        btnCadastraCPF.setBounds(720, 230, 150, 30);

        btnAlterar.setText("Alterar");
        btnAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarActionPerformed(evt);
            }
        });
        panPrincipal.add(btnAlterar);
        btnAlterar.setBounds(980, 230, 130, 30);

        txtfDataDe.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter()));
        txtfDataDe.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtfDataDeKeyReleased(evt);
            }
        });
        panPrincipal.add(txtfDataDe);
        txtfDataDe.setBounds(620, 10, 100, 25);

        lblDataAte.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblDataAte.setText("Até:");
        panPrincipal.add(lblDataAte);
        lblDataAte.setBounds(800, 10, 34, 25);

        txtfDataAte.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter()));
        txtfDataAte.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtfDataAteKeyReleased(evt);
            }
        });
        panPrincipal.add(txtfDataAte);
        txtfDataAte.setBounds(840, 10, 100, 25);

        btnHojePesquisa.setText("Hoje");
        btnHojePesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHojePesquisaActionPerformed(evt);
            }
        });
        panPrincipal.add(btnHojePesquisa);
        btnHojePesquisa.setBounds(730, 10, 55, 25);

        btnPesquisar.setText("Pesquisar");
        btnPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarActionPerformed(evt);
            }
        });
        panPrincipal.add(btnPesquisar);
        btnPesquisar.setBounds(950, 10, 79, 25);

        getContentPane().add(panPrincipal);
        panPrincipal.setBounds(10, 10, 1125, 270);

        tblListagemPessoaF.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblListagemPessoaF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblListagemPessoaFMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblListagemPessoaF);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 312, 1125, 230);

        btnDeletarTodosRegistros.setText("Deletar todos os registros");
        btnDeletarTodosRegistros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletarTodosRegistrosActionPerformed(evt);
            }
        });
        getContentPane().add(btnDeletarTodosRegistros);
        btnDeletarTodosRegistros.setBounds(10, 550, 160, 30);

        lblPessoaFEncontrado.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblPessoaFEncontrado.setText("Pessoas Físicas encontradas no banco de dados. Para visualizar ou alterar um registro, clique em um registro exibido na tabela.");
        getContentPane().add(lblPessoaFEncontrado);
        lblPessoaFEncontrado.setBounds(10, 280, 1120, 25);

        btnMenuPrincipal.setText("Menu Principal");
        btnMenuPrincipal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuPrincipalActionPerformed(evt);
            }
        });
        getContentPane().add(btnMenuPrincipal);
        btnMenuPrincipal.setBounds(900, 550, 130, 30);

        btnFecharFrame.setText("Fechar ");
        btnFecharFrame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFecharFrameActionPerformed(evt);
            }
        });
        getContentPane().add(btnFecharFrame);
        btnFecharFrame.setBounds(1055, 550, 80, 30);

        lblBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fundo.png"))); // NOI18N
        getContentPane().add(lblBackground);
        lblBackground.setBounds(0, -20, 1150, 650);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    private void txtPesquisaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisaKeyReleased
        limiteDigitosPesquisa(cmbFiltro.getSelectedItem().toString());
        pesquisarFiltrada();
    }//GEN-LAST:event_txtPesquisaKeyReleased

    private void btnDeletarTodosRegistrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletarTodosRegistrosActionPerformed
        removerTodosRegistros();
    }//GEN-LAST:event_btnDeletarTodosRegistrosActionPerformed

    private void btnMenuPrincipalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuPrincipalActionPerformed
        control.Janelas.focarPrincipal();
    }//GEN-LAST:event_btnMenuPrincipalActionPerformed

    private void btnFecharFrameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFecharFrameActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnFecharFrameActionPerformed

    private void txtTelefoneKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTelefoneKeyReleased
        txtTelefone.setText(TextSize.maxLenghtTelefone(txtTelefone.getText()));
    }//GEN-LAST:event_txtTelefoneKeyReleased

    private void txtNomePessoaFicticioKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNomePessoaFicticioKeyReleased
        txtNomePessoaFicticio.setText(TextSize.maxLenghtNomeRazao(txtNomePessoaFicticio.getText()));
    }//GEN-LAST:event_txtNomePessoaFicticioKeyReleased

    private void btnCadastrarCepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarCepActionPerformed
        control.Janelas.abrirCadastroEnderecoParametrizada(txtfCep.getText().replace("-", ""));
    }//GEN-LAST:event_btnCadastrarCepActionPerformed

    private void txtNumeroLogradouroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumeroLogradouroActionPerformed

    }//GEN-LAST:event_txtNumeroLogradouroActionPerformed

    private void txtNumeroLogradouroKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumeroLogradouroKeyReleased
        txtNumeroLogradouro.setText(TextSize.maxLenghtNrLogradouro(txtNumeroLogradouro.getText()));
    }//GEN-LAST:event_txtNumeroLogradouroKeyReleased

    private void rbtSimCadastroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtSimCadastroActionPerformed

    }//GEN-LAST:event_rbtSimCadastroActionPerformed

    private void rbtNaoCadastroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtNaoCadastroActionPerformed

    }//GEN-LAST:event_rbtNaoCadastroActionPerformed

    private void txtCelRamalKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCelRamalKeyReleased
        textSizeCelRamal();
    }//GEN-LAST:event_txtCelRamalKeyReleased

    private void rbtMasculinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtMasculinoActionPerformed

    }//GEN-LAST:event_rbtMasculinoActionPerformed

    private void rbtFemininoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtFemininoActionPerformed

    }//GEN-LAST:event_rbtFemininoActionPerformed

    private void btnHojeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHojeActionPerformed
        txtfDataCadastro.setText(control.Datas.getDiaHoje());
    }//GEN-LAST:event_btnHojeActionPerformed

    private void txtfCepFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtfCepFocusLost
        verificarCep();
    }//GEN-LAST:event_txtfCepFocusLost

    private void txtfCepKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtfCepKeyReleased
        verificarCep();
    }//GEN-LAST:event_txtfCepKeyReleased

    private void txtCpfCnpjFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCpfCnpjFocusLost
        textSizeCPFJCNPJ();
    }//GEN-LAST:event_txtCpfCnpjFocusLost

    private void txtCpfCnpjKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCpfCnpjKeyReleased
        textSizeCPFJCNPJ();
    }//GEN-LAST:event_txtCpfCnpjKeyReleased

    private void btnDeletarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletarActionPerformed
        deletarRegistro();
    }//GEN-LAST:event_btnDeletarActionPerformed

    private void btnLimparTabelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparTabelaActionPerformed
        limparTabela();
    }//GEN-LAST:event_btnLimparTabelaActionPerformed

    private void btnListarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarTodosActionPerformed
        atualizarTabela(false);
    }//GEN-LAST:event_btnListarTodosActionPerformed

    private void btnCadastraCPFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastraCPFActionPerformed
        control.Janelas.abrirCadastroPessoa();
    }//GEN-LAST:event_btnCadastraCPFActionPerformed

    private void btnAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarActionPerformed
        alterarRegistro();
    }//GEN-LAST:event_btnAlterarActionPerformed

    private void cmbFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFiltroActionPerformed
        lblDigiteODado.setText("Digite o(a) " + cmbFiltro.getSelectedItem().toString() + ":");
        limiteDigitosPesquisa(cmbFiltro.getSelectedItem().toString());
    }//GEN-LAST:event_cmbFiltroActionPerformed

    private void btnHojePesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHojePesquisaActionPerformed
        txtfDataDe.setText(control.Datas.getDiaHoje());
        txtfDataAte.setText(control.Datas.getDiaHoje());
    }//GEN-LAST:event_btnHojePesquisaActionPerformed

    private void txtfDataDeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtfDataDeKeyReleased
        txtfDataDe.setText(control.TextSize.maxLenghtData(txtfDataDe.getText()));
    }//GEN-LAST:event_txtfDataDeKeyReleased

    private void txtfDataAteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtfDataAteKeyReleased
        txtfDataAte.setText(control.TextSize.maxLenghtData(txtfDataAte.getText()));
    }//GEN-LAST:event_txtfDataAteKeyReleased

    private void tblListagemPessoaFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblListagemPessoaFMouseClicked
        popularCampos();
    }//GEN-LAST:event_tblListagemPessoaFMouseClicked

    private void btnPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarActionPerformed
        txtfDataDe.setText(txtfDataDe.getText().trim());
        txtfDataAte.setText(txtfDataAte.getText().trim());
        if (txtfDataDe.getText().length() == 10 && txtfDataAte.getText().length() == 10) {
            atualizarTabela(true);
        } else {
            limparTabela();
        }
    }//GEN-LAST:event_btnPesquisarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmListagemPessoaF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmListagemPessoaF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmListagemPessoaF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmListagemPessoaF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmListagemPessoaF(control.SynchroSoft.getNvlAdm()).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlterar;
    private javax.swing.JButton btnCadastraCPF;
    private javax.swing.JButton btnCadastrarCep;
    private javax.swing.JButton btnDeletar;
    private javax.swing.JButton btnDeletarTodosRegistros;
    private javax.swing.JButton btnFecharFrame;
    private javax.swing.JButton btnHoje;
    private javax.swing.JButton btnHojePesquisa;
    private javax.swing.JButton btnLimparTabela;
    private javax.swing.JButton btnListarTodos;
    private javax.swing.JButton btnMenuPrincipal;
    private javax.swing.JButton btnPesquisar;
    private javax.swing.JComboBox<String> cmbFiltro;
    private javax.swing.ButtonGroup grupoContrato;
    private javax.swing.ButtonGroup grupoSexo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JLabel lblCelRamal;
    private javax.swing.JLabel lblCep;
    private javax.swing.JLabel lblCepExiste;
    private javax.swing.JLabel lblCpfCnpj;
    private javax.swing.JLabel lblCpfCnpjExiste;
    private javax.swing.JLabel lblDataAte;
    private javax.swing.JLabel lblDataCadastro;
    private javax.swing.JLabel lblDigiteODado;
    private javax.swing.JLabel lblNome;
    private javax.swing.JLabel lblNumeroLogradouro;
    private javax.swing.JLabel lblPesquisar;
    private javax.swing.JLabel lblPessoaFEncontrado;
    private javax.swing.JLabel lblSexo;
    private javax.swing.JLabel lblTelefone;
    private javax.swing.JLabel lblTipoPessoa1;
    private javax.swing.JPanel panDadosPessoaF;
    private javax.swing.JPanel panPrincipal;
    private javax.swing.JRadioButton rbtFeminino;
    private javax.swing.JRadioButton rbtMasculino;
    private javax.swing.JRadioButton rbtNaoCadastro;
    private javax.swing.JRadioButton rbtSimCadastro;
    private javax.swing.JTable tblListagemPessoaF;
    private javax.swing.JTextField txtCelRamal;
    private javax.swing.JTextField txtCpfCnpj;
    private javax.swing.JTextField txtNomePessoaFicticio;
    private javax.swing.JTextField txtNumeroLogradouro;
    private javax.swing.JTextField txtPesquisa;
    private javax.swing.JTextField txtTelefone;
    private javax.swing.JFormattedTextField txtfCep;
    private javax.swing.JFormattedTextField txtfDataAte;
    private javax.swing.JFormattedTextField txtfDataCadastro;
    private javax.swing.JFormattedTextField txtfDataDe;
    // End of variables declaration//GEN-END:variables

    private void pesquisarFiltrada() {
        int opcaoFiltro = cmbFiltro.getSelectedIndex();
        int opcaoDataCadastro = 9;
        int opcaoDataDeAte = 10;

        if ((opcaoFiltro != opcaoDataCadastro) && (opcaoFiltro != opcaoDataDeAte)) {
            if (!"".equals(txtPesquisa.getText().trim())) {
                atualizarTabela(true);
            } else {
                limparTabela();
            }
        }
    }

    private void removerTodosRegistros() {
        int opcao;
        opcao = JOptionPane.showConfirmDialog(this, "Deseja REALMENTE remover todas as pessoas físicas do banco de dados?\n\n",
                "Alerta - remoção de todos os registros", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (opcao == 0) {
            opcao = JOptionPane.showConfirmDialog(this, "Essa operação tem grandes chances de falhar, devido a existência\n"
                    + "de restrições de chaves estrangeiras no banco de dados.\n\n"
                    + "Deseja REALMENTE tentar excluir todos os registros do banco de dados?\n\n"
                    + "Caso a operação suceda, todos os dados serão permanentemente excluídos.\n"
                    + "Caso ela falhe, talvez alguns registros possam ter sidos excluidos, e outros não."
                    + "\n\n"
                    + "Deseja prosseguir?",
                    "Alerta - remoção de todos os registros", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (opcao == 0) {
                boolean exclusaoSucedida;
                exclusaoSucedida = dao.DaoPessoa.deletarTodasPessoasFisicas();
                if (exclusaoSucedida) {
                    atualizarTabela(ultimoTipoPesquisa);
                }
            }
        }
    }

    private void alterarRegistro() {
        if (validarCampos()) {
            PessoaFisica pessoaFisica = new PessoaFisica();
            Pessoa pessoa = new Pessoa();
            Endereco endereco = new Endereco();

            String cep = txtfCep.getText();
            cep = cep.replace("-", "");
            cep = cep.trim();

            endereco.setCep(cep);

            pessoa.setManterContrato(rbtSimCadastro.isSelected());
            pessoa.setNome(txtNomePessoaFicticio.getText());
            pessoa.setComplementoLogradouro(txtNumeroLogradouro.getText());
            pessoa.setTelefone(txtTelefone.getText());
            pessoa.setEndereco(endereco);

            pessoaFisica.setPessoa(pessoa);
            pessoaFisica.setCelular(txtCelRamal.getText());
            pessoaFisica.setCpf(txtCpfCnpj.getText());
            pessoaFisica.setSexo(rbtMasculino.isSelected());
            pessoaFisica.setDataCadastro(txtfDataCadastro.getText());

            boolean alteracaoSucedida;
            alteracaoSucedida = dao.DaoPessoa.alterarPessoaFisica(pessoaFisica, PK_REF);

            if (alteracaoSucedida) {
                atualizarTabela(ultimoTipoPesquisa);
                limparCampos();
            }
        }
    }

    private boolean validarCampos() {
        boolean selectionEmpty = tblListagemPessoaF.getSelectionModel().isSelectionEmpty();
        if (selectionEmpty){
            JOptionPane.showMessageDialog(this, "Nenhum registro selecionado da tabela.\n\n"
                    + "Pesquise por algum registro e clique em alguma linha da tabela.", "Erro - Não há registro selecionado", 0);
            return false;
        } else if (txtNomePessoaFicticio.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Nome em branco. \nDigite um nome para a pessoa física.", "Erro - Nome Inválido", 0);
            txtNomePessoaFicticio.requestFocus();
            return false;
        } else if (txtCpfCnpj.getText().length() < 11) {
            JOptionPane.showMessageDialog(null, "CPF Inválido. Digite 11 dígitos, sem pontos ou hífens.", "Erro - CPF Inválido", 0);
            txtCpfCnpj.requestFocus();
            return false;
        } else if (existeCpf) {
            JOptionPane.showMessageDialog(null, "CPF inválido. Verifique se o CPF está correto e se já não existe um mesmo CPF cadastrado.", "Erro - CPF Inválido", 0);
            txtCpfCnpj.requestFocus();
            return false;
        } else if (cepCadastrado) {
            JOptionPane.showMessageDialog(null, "CEP inválido. Verifique se o CEP informado está correto ou se ele já está cadastrado.", "Erro - CEP Inválido", 0);
            txtfCep.requestFocus();
            return false;
        } else if (txtNumeroLogradouro.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Número do logradouro em branco. \nDigite o número e/ou complemento do logradouro.", "Erro - Nº Logradouro Inválido", 0);
            txtNumeroLogradouro.requestFocus();
            return false;
        } else {
            return true;
        }
    }

    private void deletarRegistro() {

        int opcao;
        opcao = JOptionPane.showConfirmDialog(this, "Atenção! Todos os registros relacionados ao CPF "
                + ((String) tblListagemPessoaF.getValueAt(tblListagemPessoaF.getSelectedRow(), 1))
                + " serão permanentemente removidos.\n\nDeseja realmente excluir o registro?",
                "Confirmação de exclusão",
                JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

        if (opcao == 0) {
            String cpf;
            cpf = ((String) tblListagemPessoaF.getValueAt(tblListagemPessoaF.getSelectedRow(), 1));
            dao.DaoPessoa.deletarPessoaFisica(cpf);
            atualizarTabela(ultimoTipoPesquisa);
            limparCampos();
        }
    }

    private void limparTabela() {
        DefaultTableModel model = new DefaultTableModel();
        model = (DefaultTableModel) tblListagemPessoaF.getModel();
        model.setRowCount(0);
        /*
        Chama o metodo limparCampos para limpar os dados do registro anteriormente
        selecionado.
         */
        limparCampos();
    }

    private void textSizeCPFJCNPJ() {
        txtCpfCnpj.setText(TextSize.maxLenghtCPFCNPJ(txtCpfCnpj.getText(), true));
        verificarCpfCnpjEmUso();
    }

    private void verificarCpfCnpjEmUso() {
        if ((txtCpfCnpj.getText().length() < 11) || (txtCpfCnpj.getText().length() > 11)) {
            lblCpfCnpjExiste.setText("CPF Inválido.");
            lblCpfCnpjExiste.setForeground(Color.red);
            existeCpf = true;
        } else {
            this.existeCpf = dao.DaoPessoa.existePessoaFisica(txtCpfCnpj.getText());
            if (existeCpf) {
                lblCpfCnpjExiste.setText("CPF já Cadastrado.");
                lblCpfCnpjExiste.setForeground(Color.red);
                existeCpf = false;
            } else {
                lblCpfCnpjExiste.setText("CPF livre.");
                lblCpfCnpjExiste.setForeground(Color.black);
                existeCpf = false;
            }
        }

    }

    /**
     * Nome CPF Sexo CEP Endereço Número Endereço Telefone Celular Contrato Data
     * de Cadastro Data Entre/Até
     *
     * @param filtro
     */
    private void limiteDigitosPesquisa(String filtro) {
        switch (filtro) {
            case "Nome":
                txtPesquisa.setText(control.TextSize.maxLenghtNomeRazao(txtPesquisa.getText()));
                modoPesquisaNormal();
                txtPesquisa.requestFocus();
                break;
            case "CPF":
                txtPesquisa.setText(control.TextSize.maxLenghtCPFCNPJ(txtPesquisa.getText(), true));
                modoPesquisaNormal();
                txtPesquisa.requestFocus();
                break;
            case "CEP":
                txtPesquisa.setText(control.TextSize.maxLenghtCep(txtPesquisa.getText()));
                modoPesquisaNormal();
                txtPesquisa.requestFocus();
                break;
            case "Logradouro":
                txtPesquisa.setText(control.TextSize.maxLenghtLogradouro(txtPesquisa.getText()));
                modoPesquisaNormal();
                txtPesquisa.requestFocus();
                break;
            case "Nr Logradouro":
                txtPesquisa.setText(control.TextSize.maxLenghtNrLogradouro(txtPesquisa.getText()));
                modoPesquisaNormal();
                txtPesquisa.requestFocus();
                break;
            case "Sexo":
                txtPesquisa.setText(control.TextSize.maxLenghtSexo(txtPesquisa.getText()));
                modoPesquisaNormal();
                lblDigiteODado.setText("Digite Masculino ou Feminino:");
                txtPesquisa.requestFocus();
                break;
            case "Telefone":
                txtPesquisa.setText(control.TextSize.maxLenghtTelefone(txtPesquisa.getText()));
                modoPesquisaNormal();
                txtPesquisa.requestFocus();
                break;
            case "Celular":
                txtPesquisa.setText(control.TextSize.maxLenghtCelularRamal(txtPesquisa.getText(), true));
                modoPesquisaNormal();
                txtPesquisa.requestFocus();
                break;
            case "Mantém Contrato?":
                lblDigiteODado.setText("Digite Sim ou Não:");
                txtPesquisa.setText(control.TextSize.maxLenghtContrato(txtPesquisa.getText()));
                modoPesquisaNormal();
                txtPesquisa.requestFocus();
                break;
            case "Data de Cadastro":
                modoPesquisaData(false);
                txtfDataDe.requestFocus();
                break;
            case "Data Entre/Até":
                lblDigiteODado.setText("Digite a Data Inicial:");
                modoPesquisaData(true);
                txtfDataDe.requestFocus();
                break;
            default:
                JOptionPane.showMessageDialog(this, "Erro ao definir limite de caracteres do campo de pesquisa.",
                        "Erro - limite de dígitos dinâmico", 0);
                break;
        }
    }

    private void selecionarAoFocar() {
        //Código para selecionar o texto todo ao ganhar foco
        txtfDataDe.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        txtfDataDe.selectAll();
                    }
                });
            }
        });

        txtfDataAte.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        txtfDataAte.selectAll();
                    }
                });
            }
        });

        txtfDataCadastro.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        txtfDataCadastro.selectAll();
                    }
                });
            }
        });
    }

    private void verificarCep() {
        String cep = txtfCep.getText();
        cep = cep.replace("-", "");
        cep = cep.trim();
        if ((cep.length() < 8) || (cep.length() > 8)) {
            lblCepExiste.setText("Cep Inválido.");
            lblCepExiste.setForeground(Color.red);
            cepCadastrado = true;
        } else {
            this.cepCadastrado = dao.DaoEndereco.existeEndereco(cep);
            if (cepCadastrado) {
                lblCepExiste.setText("CEP Cadastrado.");
                lblCepExiste.setForeground(Color.black);
                cepCadastrado = false;
            } else {
                lblCepExiste.setText("CEP Inexistente.");
                lblCepExiste.setForeground(Color.red);
                cepCadastrado = true;
            }
        }
    }

    private void inicializarTabela() {
        String[] nomeColunas = {"Nome", "CPF", "Sexo", "CEP", "Logradouro", "Nr Logradouro", "Telefone", "Celular", "Contrato", "Data de Cadastro"};

        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tblListagemPessoaF.setModel(model);
        model.setColumnIdentifiers(nomeColunas);
        model.setRowCount(0);
    }

    private void atualizarTabela(boolean filtrada) {

        DefaultTableModel model = new DefaultTableModel();
        model = (DefaultTableModel) tblListagemPessoaF.getModel();
        model.setRowCount(0);

        ArrayList<PessoaFisica> lista = new ArrayList<>();

        if (filtrada) {
            lista = DaoPessoa.listarPessoaFisicaFiltrada(String.valueOf(cmbFiltro.getSelectedItem()),
                    txtPesquisa.getText().toLowerCase().trim(), txtfDataDe.getText().toLowerCase().trim(),
                    txtfDataAte.getText().toLowerCase().trim());
            ultimoTipoPesquisa = true;
        } else {
            lista = DaoPessoa.listarPessoaFisica();
            ultimoTipoPesquisa = false;
        }

        Object dadosLinha[] = new Object[10];

        for (int i = 0; i < lista.size(); i++) {
            dadosLinha[0] = lista.get(i).getPessoa().getNome();
            dadosLinha[1] = lista.get(i).getCpf();
            dadosLinha[2] = lista.get(i).getSexoSTR();
            dadosLinha[3] = lista.get(i).getPessoa().getEndereco().getCep();
            dadosLinha[4] = lista.get(i).getPessoa().getEndereco().getLogradouro();
            dadosLinha[5] = lista.get(i).getPessoa().getComplementoLogradouro();
            dadosLinha[6] = lista.get(i).getPessoa().getTelefone();
            dadosLinha[7] = lista.get(i).getCelular();
            dadosLinha[8] = lista.get(i).getPessoa().getManterContratoSTR();
            dadosLinha[9] = lista.get(i).getDataCadastro();
            model.addRow(dadosLinha);
        }
        //String[] nomeColunas = {"Nome", "CPF", "Sexo", "CEP", "Endereço", "Número", "Telefone", "Celular", "Contrato", "Data de Cadastro"};

        limparCampos();
    }

    private void limparCampos() {
        rbtNaoCadastro.setSelected(false);
        rbtSimCadastro.setSelected(false);
        txtfDataCadastro.setText("");
        txtNomePessoaFicticio.setText("");
        txtCpfCnpj.setText("");
        txtfCep.setText("");
        txtNumeroLogradouro.setText("");
        rbtFeminino.setSelected(false);
        rbtMasculino.setSelected(false);
        txtTelefone.setText("");
        txtCelRamal.setText("");
        verificarCep();
        verificarCpfCnpjEmUso();
        PK_REF = null;
    }

    private void textSizeCelRamal() {
        txtCelRamal.setText(TextSize.maxLenghtCelularRamal(txtCelRamal.getText(), true));
    }

    private void popularCampos() {

        PessoaFisica pessoaFisica = new PessoaFisica();

        String cpf = (String) tblListagemPessoaF.getValueAt(tblListagemPessoaF.getSelectedRow(), 1);

        pessoaFisica = dao.DaoPessoa.popularPessoaFisica(cpf);
        boolean mantemContrato = pessoaFisica.getPessoa().getManterContratoBooleano();

        int sexoMasculino = 0;

        if (pessoaFisica.getSexo() == sexoMasculino) {
            rbtMasculino.setSelected(true);
            rbtFeminino.setSelected(false);
        } else {
            rbtMasculino.setSelected(false);
            rbtFeminino.setSelected(true);
        }
        if (mantemContrato) {
            rbtSimCadastro.setSelected(true);
            rbtNaoCadastro.setSelected(false);
        } else {
            rbtSimCadastro.setSelected(false);
            rbtNaoCadastro.setSelected(true);
        }
        txtfDataCadastro.setText(pessoaFisica.getDataCadastro());
        txtNomePessoaFicticio.setText(pessoaFisica.getPessoa().getNome());
        txtCpfCnpj.setText(pessoaFisica.getCpf());
        txtfCep.setText(pessoaFisica.getPessoa().getEndereco().getCep());
        txtNumeroLogradouro.setText(pessoaFisica.getPessoa().getComplementoLogradouro());
        txtTelefone.setText(String.valueOf(pessoaFisica.getPessoa().getTelefone()));
        txtCelRamal.setText(String.valueOf(pessoaFisica.getCelular()));
        PK_REF = pessoaFisica.getCpf();

        verificarCpfCnpjEmUso();
        verificarCep();
    }

    private void modoPesquisaNormal() {
        txtPesquisa.setSize(490, 25);
        txtPesquisa.setVisible(true);
        txtfDataDe.setVisible(false);
        txtfDataAte.setVisible(false);
        lblDataAte.setVisible(false);
        btnPesquisar.setVisible(false);
    }

    private void modoPesquisaData(boolean fixaOuEntre) {
        boolean dataFixa = false;
        boolean dataEntreAte = true;

        if (fixaOuEntre == dataEntreAte) {
            txtPesquisa.setVisible(false);
            txtfDataDe.setVisible(true);
            txtfDataAte.setVisible(true);
            lblDataAte.setVisible(true);
            btnPesquisar.setVisible(true);
        } else if (fixaOuEntre == dataFixa) {
            txtPesquisa.setVisible(false);
            txtfDataDe.setVisible(true);
            txtfDataAte.setVisible(false);
            lblDataAte.setVisible(false);
            btnPesquisar.setVisible(true);
        }
    }
}
