/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import control.TextSize;
import dao.DaoEndereco;
import dao.DaoFuncionario;
import dao.DaoPessoa;
import java.awt.Color;
import java.awt.Toolkit;
import java.sql.Date;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.MaskFormatter;
import model.Endereco;
import model.Funcionario;
import model.Pessoa;
import model.PessoaFisica;
import model.PessoaJuridica;

/**
 *
 * @author Luiz
 */
public class FrmCadastroPessoa extends javax.swing.JFrame {

    boolean cepCadastrado;
    boolean existeCPFCNPJ = false;

    /**
     * Creates new form FrmCadastroPeca
     */
    public FrmCadastroPessoa(int nvlAdm) {
        initComponents();
        modoFisica();

        if (nvlAdm == 0) {
            btnCadastrar.setEnabled(false);
        }

        MaskFormatter dateMask;
        try {
            dateMask = new MaskFormatter("##/##/####");
            dateMask.setPlaceholderCharacter('*');
            dateMask.install(txtfDataCadastro);
        } catch (ParseException ex) {
            Logger.getLogger(FrmCadastroDespesa.class.getName()).log(Level.SEVERE, null, ex);
        }

        txtfDataCadastro.setText(control.Datas.getDiaHoje());
        selecionarAoFocar();
        inicializarTabela();
    }

    public FrmCadastroPessoa(boolean flagTipo) {
        initComponents();
        if (flagTipo) {
            rbtJuridica.setSelected(true);
            rbtFisica.setSelected(false);
            modoJuridica();
        } else {
            rbtFisica.setSelected(true);
            rbtJuridica.setSelected(false);
            modoFisica();
        }
        MaskFormatter dateMask;
        try {
            dateMask = new MaskFormatter("##/##/####");
            dateMask.setPlaceholderCharacter('*');
            dateMask.install(txtfDataCadastro);
        } catch (ParseException ex) {
            Logger.getLogger(FrmCadastroDespesa.class.getName()).log(Level.SEVERE, null, ex);
        }
        txtfDataCadastro.setText(control.Datas.getDiaHoje());
        selecionarAoFocar();
        inicializarTabela();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoTipoPessoa = new javax.swing.ButtonGroup();
        grupoCadastro = new javax.swing.ButtonGroup();
        grupoSexo = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        lblLogradouro = new javax.swing.JLabel();
        Bairro = new javax.swing.JLabel();
        txtBairro = new javax.swing.JTextField();
        txtLogradouro = new javax.swing.JTextField();
        lblCidade = new javax.swing.JLabel();
        txtCidade = new javax.swing.JTextField();
        lblEstado = new javax.swing.JLabel();
        txtEstado = new javax.swing.JTextField();
        lblTelefone = new javax.swing.JLabel();
        txtTelefone = new javax.swing.JTextField();
        lblNumeroLogradouro = new javax.swing.JLabel();
        lblTipoPessoa = new javax.swing.JLabel();
        rbtFisica = new javax.swing.JRadioButton();
        rbtJuridica = new javax.swing.JRadioButton();
        lblNome = new javax.swing.JLabel();
        txtNomePessoaFicticio = new javax.swing.JTextField();
        lblCep = new javax.swing.JLabel();
        lblCepExiste = new javax.swing.JLabel();
        btnCadastrarCep = new javax.swing.JButton();
        txtNumeroLogradouro = new javax.swing.JTextField();
        lblTipoPessoa1 = new javax.swing.JLabel();
        rbtSimCadastro = new javax.swing.JRadioButton();
        rbtNaoCadastro = new javax.swing.JRadioButton();
        btnLimpar = new javax.swing.JButton();
        btnCadastrar = new javax.swing.JButton();
        lblCpfCnpj = new javax.swing.JLabel();
        txtRazaoSocial = new javax.swing.JTextField();
        lblRazaoSocial = new javax.swing.JLabel();
        lblCelRamal = new javax.swing.JLabel();
        txtCelRamal = new javax.swing.JTextField();
        lblSexo = new javax.swing.JLabel();
        rbtMasculino = new javax.swing.JRadioButton();
        rbtFeminino = new javax.swing.JRadioButton();
        lblDataCadastro = new javax.swing.JLabel();
        txtfDataCadastro = new javax.swing.JFormattedTextField();
        btnHoje = new javax.swing.JButton();
        lblCpfCnpjExiste = new javax.swing.JLabel();
        btnListarPessoa1 = new javax.swing.JButton();
        txtfCep = new javax.swing.JFormattedTextField();
        txtCpfCnpj = new javax.swing.JTextField();
        btnMenuPrincipal = new javax.swing.JButton();
        btnFecharFrame = new javax.swing.JButton();
        lblPessoaRecente = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPessoaRecente = new javax.swing.JTable();
        lblBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de Pessoa");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/img/logopng32.png")));
        setMaximumSize(new java.awt.Dimension(1152, 648));
        setMinimumSize(new java.awt.Dimension(1152, 648));
        setPreferredSize(new java.awt.Dimension(1152, 648));
        setResizable(false);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setOpaque(false);
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados do CEP"));
        jPanel3.setOpaque(false);

        lblLogradouro.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblLogradouro.setText("Logradouro");

        Bairro.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        Bairro.setText("Bairro");

        txtBairro.setFocusable(false);

        txtLogradouro.setFocusable(false);

        lblCidade.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblCidade.setText("Cidade");

        txtCidade.setFocusable(false);

        lblEstado.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblEstado.setText("Estado");

        txtEstado.setFocusable(false);
        txtEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEstadoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(Bairro)
                        .addGap(88, 88, 88)
                        .addComponent(txtBairro, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(lblLogradouro)
                        .addGap(40, 40, 40)
                        .addComponent(txtLogradouro, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(72, 72, 72)
                        .addComponent(lblCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(33, 33, 33)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLogradouro)
                    .addComponent(txtLogradouro, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCidade)
                    .addComponent(txtCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Bairro)
                        .addComponent(lblEstado))
                    .addComponent(txtBairro, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 200, 1030, 100));

        lblTelefone.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblTelefone.setText("Telefone");
        jPanel1.add(lblTelefone, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 140, -1));

        txtTelefone.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTelefoneKeyReleased(evt);
            }
        });
        jPanel1.add(txtTelefone, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 130, 316, 25));

        lblNumeroLogradouro.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblNumeroLogradouro.setText("Nº Logradouro");
        jPanel1.add(lblNumeroLogradouro, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 90, 150, -1));

        lblTipoPessoa.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblTipoPessoa.setText("Tipo de Pessoa:");
        jPanel1.add(lblTipoPessoa, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 140, -1));

        grupoTipoPessoa.add(rbtFisica);
        rbtFisica.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        rbtFisica.setSelected(true);
        rbtFisica.setText("Física");
        rbtFisica.setOpaque(false);
        rbtFisica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtFisicaActionPerformed(evt);
            }
        });
        jPanel1.add(rbtFisica, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 7, -1, -1));

        grupoTipoPessoa.add(rbtJuridica);
        rbtJuridica.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        rbtJuridica.setText("Jurídica");
        rbtJuridica.setOpaque(false);
        rbtJuridica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtJuridicaActionPerformed(evt);
            }
        });
        jPanel1.add(rbtJuridica, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 7, -1, -1));

        lblNome.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblNome.setText("Nome");
        jPanel1.add(lblNome, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 140, -1));

        txtNomePessoaFicticio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNomePessoaFicticioKeyReleased(evt);
            }
        });
        jPanel1.add(txtNomePessoaFicticio, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 50, 316, 25));

        lblCep.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblCep.setText("CEP");
        jPanel1.add(lblCep, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 140, -1));

        lblCepExiste.setForeground(java.awt.Color.red);
        lblCepExiste.setText("Cep Inválido.");
        jPanel1.add(lblCepExiste, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 97, 90, -1));

        btnCadastrarCep.setText("Cadastrar");
        btnCadastrarCep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarCepActionPerformed(evt);
            }
        });
        jPanel1.add(btnCadastrarCep, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 87, 80, 29));

        txtNumeroLogradouro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumeroLogradouroActionPerformed(evt);
            }
        });
        txtNumeroLogradouro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNumeroLogradouroKeyReleased(evt);
            }
        });
        jPanel1.add(txtNumeroLogradouro, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 90, 120, 25));

        lblTipoPessoa1.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblTipoPessoa1.setText("Possui Contrato:");
        jPanel1.add(lblTipoPessoa1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 10, 140, -1));

        grupoCadastro.add(rbtSimCadastro);
        rbtSimCadastro.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        rbtSimCadastro.setText("Sim");
        rbtSimCadastro.setOpaque(false);
        rbtSimCadastro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtSimCadastroActionPerformed(evt);
            }
        });
        jPanel1.add(rbtSimCadastro, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 7, -1, -1));

        grupoCadastro.add(rbtNaoCadastro);
        rbtNaoCadastro.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        rbtNaoCadastro.setSelected(true);
        rbtNaoCadastro.setText("Não");
        rbtNaoCadastro.setOpaque(false);
        rbtNaoCadastro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtNaoCadastroActionPerformed(evt);
            }
        });
        jPanel1.add(rbtNaoCadastro, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 7, -1, -1));

        btnLimpar.setText("Limpar");
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });
        jPanel1.add(btnLimpar, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 170, 100, 30));

        btnCadastrar.setText("Cadastrar");
        btnCadastrar.setNextFocusableComponent(rbtFisica);
        btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });
        jPanel1.add(btnCadastrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 170, 130, 30));

        lblCpfCnpj.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblCpfCnpj.setText("CPF");
        jPanel1.add(lblCpfCnpj, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 50, 140, -1));

        txtRazaoSocial.setNextFocusableComponent(btnCadastrar);
        txtRazaoSocial.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtRazaoSocialKeyReleased(evt);
            }
        });
        jPanel1.add(txtRazaoSocial, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 170, 316, 25));

        lblRazaoSocial.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblRazaoSocial.setText("Razão Social");
        jPanel1.add(lblRazaoSocial, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, 140, -1));

        lblCelRamal.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblCelRamal.setText("Celular");
        jPanel1.add(lblCelRamal, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 130, 140, -1));

        txtCelRamal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCelRamalKeyReleased(evt);
            }
        });
        jPanel1.add(txtCelRamal, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 130, 316, 25));

        lblSexo.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblSexo.setText("Sexo");
        jPanel1.add(lblSexo, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 90, 40, -1));

        grupoSexo.add(rbtMasculino);
        rbtMasculino.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        rbtMasculino.setSelected(true);
        rbtMasculino.setText("Masc.");
        rbtMasculino.setOpaque(false);
        rbtMasculino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtMasculinoActionPerformed(evt);
            }
        });
        jPanel1.add(rbtMasculino, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 92, -1, 20));

        grupoSexo.add(rbtFeminino);
        rbtFeminino.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        rbtFeminino.setText("Fem.");
        rbtFeminino.setOpaque(false);
        rbtFeminino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtFemininoActionPerformed(evt);
            }
        });
        jPanel1.add(rbtFeminino, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 92, -1, 20));

        lblDataCadastro.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblDataCadastro.setText("Data Cadastro");
        jPanel1.add(lblDataCadastro, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 10, -1, -1));

        txtfDataCadastro.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter()));
        jPanel1.add(txtfDataCadastro, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 10, 120, 25));

        btnHoje.setText("Hoje");
        btnHoje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHojeActionPerformed(evt);
            }
        });
        jPanel1.add(btnHoje, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 10, -1, 25));

        lblCpfCnpjExiste.setForeground(java.awt.Color.red);
        lblCpfCnpjExiste.setText("CPF Inválido.");
        jPanel1.add(lblCpfCnpjExiste, new org.netbeans.lib.awtextra.AbsoluteConstraints(852, 57, 190, -1));

        btnListarPessoa1.setText("Listar Pessoas");
        btnListarPessoa1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarPessoa1ActionPerformed(evt);
            }
        });
        jPanel1.add(btnListarPessoa1, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 47, 110, 30));

        try {
            txtfCep.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#####-###")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtfCep.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtfCepFocusLost(evt);
            }
        });
        txtfCep.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtfCepKeyReleased(evt);
            }
        });
        jPanel1.add(txtfCep, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 90, 127, 25));

        txtCpfCnpj.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCpfCnpjFocusLost(evt);
            }
        });
        txtCpfCnpj.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCpfCnpjKeyReleased(evt);
            }
        });
        jPanel1.add(txtCpfCnpj, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 50, 120, 25));

        getContentPane().add(jPanel1);
        jPanel1.setBounds(30, 30, 1100, 320);

        btnMenuPrincipal.setText("Menu Principal");
        btnMenuPrincipal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuPrincipalActionPerformed(evt);
            }
        });
        getContentPane().add(btnMenuPrincipal);
        btnMenuPrincipal.setBounds(900, 550, 130, 30);

        btnFecharFrame.setText("Fechar ");
        btnFecharFrame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFecharFrameActionPerformed(evt);
            }
        });
        getContentPane().add(btnFecharFrame);
        btnFecharFrame.setBounds(1050, 550, 80, 30);

        lblPessoaRecente.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblPessoaRecente.setText("Funcionários Cadastrados Recentemente:");
        getContentPane().add(lblPessoaRecente);
        lblPessoaRecente.setBounds(30, 350, 350, 25);

        tblPessoaRecente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblPessoaRecente);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(30, 380, 1100, 160);

        lblBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fundo.png"))); // NOI18N
        getContentPane().add(lblBackground);
        lblBackground.setBounds(0, -20, 1150, 650);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void rbtFemininoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtFemininoActionPerformed

    }//GEN-LAST:event_rbtFemininoActionPerformed

    private void rbtMasculinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtMasculinoActionPerformed

    }//GEN-LAST:event_rbtMasculinoActionPerformed

    private void txtCelRamalKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCelRamalKeyReleased
        textSizeCelRamal();
    }//GEN-LAST:event_txtCelRamalKeyReleased

    private void txtRazaoSocialKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRazaoSocialKeyReleased
        txtRazaoSocial.setText(TextSize.maxLenghtNomeRazao(txtRazaoSocial.getText()));
    }//GEN-LAST:event_txtRazaoSocialKeyReleased

    private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed
        cadastrarPessoa();
    }//GEN-LAST:event_btnCadastrarActionPerformed

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        limpar();
    }//GEN-LAST:event_btnLimparActionPerformed

    private void rbtNaoCadastroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtNaoCadastroActionPerformed

    }//GEN-LAST:event_rbtNaoCadastroActionPerformed

    private void rbtSimCadastroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtSimCadastroActionPerformed

    }//GEN-LAST:event_rbtSimCadastroActionPerformed

    private void txtNumeroLogradouroKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumeroLogradouroKeyReleased
        txtNumeroLogradouro.setText(TextSize.maxLenghtNrLogradouro(txtNumeroLogradouro.getText()));
    }//GEN-LAST:event_txtNumeroLogradouroKeyReleased

    private void txtNumeroLogradouroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumeroLogradouroActionPerformed

    }//GEN-LAST:event_txtNumeroLogradouroActionPerformed

    private void btnCadastrarCepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarCepActionPerformed
        control.Janelas.abrirCadastroEnderecoParametrizada(txtfCep.getText().replace("-", ""));
    }//GEN-LAST:event_btnCadastrarCepActionPerformed

    private void txtNomePessoaFicticioKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNomePessoaFicticioKeyReleased
        txtNomePessoaFicticio.setText(TextSize.maxLenghtNomeRazao(txtNomePessoaFicticio.getText()));
    }//GEN-LAST:event_txtNomePessoaFicticioKeyReleased

    private void rbtJuridicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtJuridicaActionPerformed
        modoJuridica();
    }//GEN-LAST:event_rbtJuridicaActionPerformed

    private void rbtFisicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtFisicaActionPerformed
        modoFisica();
    }//GEN-LAST:event_rbtFisicaActionPerformed

    private void txtTelefoneKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTelefoneKeyReleased
        txtTelefone.setText(TextSize.maxLenghtTelefone(txtTelefone.getText()));
    }//GEN-LAST:event_txtTelefoneKeyReleased

    private void btnMenuPrincipalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuPrincipalActionPerformed
        control.Janelas.focarPrincipal();
    }//GEN-LAST:event_btnMenuPrincipalActionPerformed

    private void btnFecharFrameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFecharFrameActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnFecharFrameActionPerformed

    private void txtEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEstadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEstadoActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        verificarCep();
    }//GEN-LAST:event_formWindowGainedFocus

    private void btnHojeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHojeActionPerformed
        txtfDataCadastro.setText(control.Datas.getDiaHoje());
    }//GEN-LAST:event_btnHojeActionPerformed

    private void btnListarPessoa1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarPessoa1ActionPerformed
        if (rbtFisica.isSelected()) {
            control.Janelas.abrirListagemPessoaFisica();
        } else {
            control.Janelas.abrirListagemPessoaJuridica();
        }
    }//GEN-LAST:event_btnListarPessoa1ActionPerformed

    private void txtfCepFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtfCepFocusLost
        verificarCep();
    }//GEN-LAST:event_txtfCepFocusLost

    private void txtfCepKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtfCepKeyReleased
        verificarCep();
    }//GEN-LAST:event_txtfCepKeyReleased

    private void txtCpfCnpjKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCpfCnpjKeyReleased
        textSizeCPFJCNPJ();
    }//GEN-LAST:event_txtCpfCnpjKeyReleased

    private void txtCpfCnpjFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCpfCnpjFocusLost
        textSizeCPFJCNPJ();
    }//GEN-LAST:event_txtCpfCnpjFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmCadastroPessoa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmCadastroPessoa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmCadastroPessoa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmCadastroPessoa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmCadastroPessoa(control.SynchroSoft.getNvlAdm()).setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Bairro;
    private javax.swing.JButton btnCadastrar;
    private javax.swing.JButton btnCadastrarCep;
    private javax.swing.JButton btnFecharFrame;
    private javax.swing.JButton btnHoje;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JButton btnListarPessoa1;
    private javax.swing.JButton btnMenuPrincipal;
    private javax.swing.ButtonGroup grupoCadastro;
    private javax.swing.ButtonGroup grupoSexo;
    private javax.swing.ButtonGroup grupoTipoPessoa;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JLabel lblCelRamal;
    private javax.swing.JLabel lblCep;
    private javax.swing.JLabel lblCepExiste;
    private javax.swing.JLabel lblCidade;
    private javax.swing.JLabel lblCpfCnpj;
    private javax.swing.JLabel lblCpfCnpjExiste;
    private javax.swing.JLabel lblDataCadastro;
    private javax.swing.JLabel lblEstado;
    private javax.swing.JLabel lblLogradouro;
    private javax.swing.JLabel lblNome;
    private javax.swing.JLabel lblNumeroLogradouro;
    private javax.swing.JLabel lblPessoaRecente;
    private javax.swing.JLabel lblRazaoSocial;
    private javax.swing.JLabel lblSexo;
    private javax.swing.JLabel lblTelefone;
    private javax.swing.JLabel lblTipoPessoa;
    private javax.swing.JLabel lblTipoPessoa1;
    private javax.swing.JRadioButton rbtFeminino;
    private javax.swing.JRadioButton rbtFisica;
    private javax.swing.JRadioButton rbtJuridica;
    private javax.swing.JRadioButton rbtMasculino;
    private javax.swing.JRadioButton rbtNaoCadastro;
    private javax.swing.JRadioButton rbtSimCadastro;
    private javax.swing.JTable tblPessoaRecente;
    private javax.swing.JTextField txtBairro;
    private javax.swing.JTextField txtCelRamal;
    private javax.swing.JTextField txtCidade;
    private javax.swing.JTextField txtCpfCnpj;
    private javax.swing.JTextField txtEstado;
    private javax.swing.JTextField txtLogradouro;
    private javax.swing.JTextField txtNomePessoaFicticio;
    private javax.swing.JTextField txtNumeroLogradouro;
    private javax.swing.JTextField txtRazaoSocial;
    private javax.swing.JTextField txtTelefone;
    private javax.swing.JFormattedTextField txtfCep;
    private javax.swing.JFormattedTextField txtfDataCadastro;
    // End of variables declaration//GEN-END:variables

    public void modoFisica() {
        lblCpfCnpj.setText("CPF");
        lblCelRamal.setText("Celular");
        lblNome.setText("Nome");
        lblSexo.setVisible(true);
        rbtFeminino.setVisible(true);
        rbtMasculino.setVisible(true);
        lblRazaoSocial.setVisible(false);
        txtRazaoSocial.setVisible(false);
        textSizeCPFJCNPJ();
        textSizeCelRamal();
        verificarCpfCnpjEmUso();
    }

    public void modoJuridica() {
        lblCpfCnpj.setText("CNPJ");
        lblCelRamal.setText("Ramal");
        lblNome.setText("Nome Fictício");
        lblSexo.setVisible(false);
        rbtFeminino.setVisible(false);
        rbtMasculino.setVisible(false);
        lblRazaoSocial.setVisible(true);
        txtRazaoSocial.setVisible(true);
        textSizeCPFJCNPJ();
        textSizeCelRamal();
        verificarCpfCnpjEmUso();
    }

    public void popularExibicaoEndereco(Endereco end) {
        txtLogradouro.setText(end.getLogradouro());
        txtCidade.setText(end.getCidade());
        txtBairro.setText(end.getBairro());
        txtEstado.setText(end.getEstado());
    }

    public void limparExibicaoEndereco() {
        txtLogradouro.setText("");
        txtCidade.setText("");
        txtBairro.setText("");
        txtEstado.setText("");
    }

    private void limpar() {
        txtBairro.setText("");
        txtCelRamal.setText("");
        txtfCep.setText("");
        txtCidade.setText("");
        txtCpfCnpj.setText("");
        txtEstado.setText("");
        txtLogradouro.setText("");
        txtNomePessoaFicticio.setText("");
        txtNumeroLogradouro.setText("");
        txtRazaoSocial.setText("");
        txtTelefone.setText("");
        existeCPFCNPJ = false;
        if (rbtFisica.isSelected()) {
            lblCpfCnpjExiste.setText("CPF Inválido.");
        } else {
            lblCpfCnpjExiste.setText("CNPJ Inválido.");
        }
        lblCpfCnpjExiste.setForeground(Color.red);
        cepCadastrado = false;
        lblCepExiste.setText("CEP Inválido.");
        lblCepExiste.setForeground(Color.red);
        limparExibicaoEndereco();
    }

    private void verificarCep() {
        String cep = txtfCep.getText();
        cep = cep.replace("-", "");
        cep = cep.trim();
        if ((cep.length() < 8) || (cep.length() > 8)) {
            lblCepExiste.setText("Cep Inválido.");
            lblCepExiste.setForeground(Color.red);
            limparExibicaoEndereco();
        } else {
            this.cepCadastrado = dao.DaoEndereco.existeEndereco(cep);
            if (cepCadastrado) {
                lblCepExiste.setText("CEP Cadastrado.");
                lblCepExiste.setForeground(Color.black);
                Endereco end = new Endereco();
                end = dao.DaoEndereco.popularEndereco(cep);
                popularExibicaoEndereco(end);
            } else {
                lblCepExiste.setText("CEP Inexistente.");
                lblCepExiste.setForeground(Color.red);
                limparExibicaoEndereco();
            }
        }
    }

    private void textSizeCPFJCNPJ() {
        txtCpfCnpj.setText(TextSize.maxLenghtCPFCNPJ(txtCpfCnpj.getText(), rbtFisica.isSelected()));
        verificarCpfCnpjEmUso();
    }

    private boolean validarFisica() {
        if (txtNomePessoaFicticio.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Nome em branco. \nDigite um nome para a pessoa física.", "Erro - Nome Inválido", 0);
            txtNomePessoaFicticio.requestFocus();
            return false;
        } else if (txtCpfCnpj.getText().length() < 11) {
            JOptionPane.showMessageDialog(null, "CPF Inválido. Digite 11 dígitos, sem pontos ou hífens.", "Erro - CPF Inválido", 0);
            txtCpfCnpj.requestFocus();
            return false;
        } else if (existeCPFCNPJ) {
            JOptionPane.showMessageDialog(null, "CPF inválido. Verifique se o CPF está correto e se já não existe um mesmo CPF cadastrado.", "Erro - CPF Inválido", 0);
            txtCpfCnpj.requestFocus();
            return false;
        } else if (!cepCadastrado) {
            JOptionPane.showMessageDialog(null, "CEP inválido. Verifique se o CEP informado está correto ou se ele já está cadastrado.", "Erro - CEP Inválido", 0);
            txtfCep.requestFocus();
            return false;
        } else if (txtNumeroLogradouro.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Número do logradouro em branco. \nDigite o número e/ou complemento do logradouro.", "Erro - Nº Logradouro Inválido", 0);
            txtNumeroLogradouro.requestFocus();
            return false;
        } else {
            return true;
        }
    }

    private boolean validarJuridica() {
        if (txtNomePessoaFicticio.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Nome Fictício em branco. \nDigite um nome para a pessoa jurídica.", "Erro - Nome Fictício Inválido", 0);
            txtNomePessoaFicticio.requestFocus();
            return false;
        } else if (txtCpfCnpj.getText().length() < 14) {
            JOptionPane.showMessageDialog(null, "CNPJ Inválido. Digite 14 dígitos, sem pontos ou hífens.", "Erro - CNPJ Inválido", 0);
            txtCpfCnpj.requestFocus();
            return false;
        } else if (existeCPFCNPJ) {
            JOptionPane.showMessageDialog(null, "CNPJ inválido. Verifique se o CNPJ está correto e se já não existe um mesmo CNPJ cadastrado.", "Erro - CNPJ Inválido", 0);
            txtCpfCnpj.requestFocus();
            return false;
        } else if (!cepCadastrado) {
            JOptionPane.showMessageDialog(null, "CEP inválido. Verifique se o CEP informado está correto ou se ele já está cadastrado.", "Erro - CNPJ Inválido", 0);
            txtCpfCnpj.requestFocus();
            return false;
        } else if (txtNumeroLogradouro.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Número do logradouro em branco. \nDigite o número e/ou complemento do logradouro.", "Erro - Nº Logradouro Inválido", 0);
            txtNumeroLogradouro.requestFocus();
            return false;
        } else if (txtRazaoSocial.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Razão social em branco. \nDigite a razão social para a pessoa jurídica.", "Erro - Razão Social Inválido", 0);
            txtRazaoSocial.requestFocus();
            return false;
        } else {
            return true;
        }
    }

    private void selecionarAoFocar() {
        //Código para selecionar o texto todo ao ganhar foco
        txtfDataCadastro.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        txtfDataCadastro.selectAll();
                    }
                });
            }
        });

        txtCpfCnpj.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        txtCpfCnpj.selectAll();
                    }
                });
            }
        });
        
        txtfCep.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        txtfCep.selectAll();
                    }
                });
            }
        });
    }

    private void textSizeCelRamal() {
        txtCelRamal.setText(TextSize.maxLenghtCelularRamal(txtCelRamal.getText(), rbtFisica.isSelected()));
    }

    private void verificarCpfCnpjEmUso() {
        if (rbtFisica.isSelected()) {
            if ((txtCpfCnpj.getText().length() < 11) || (txtCpfCnpj.getText().length() > 11)) {
                lblCpfCnpjExiste.setText("CPF Inválido.");
                lblCpfCnpjExiste.setForeground(Color.red);
            } else {
                this.existeCPFCNPJ = dao.DaoPessoa.existePessoaFisica(txtCpfCnpj.getText());
                if (existeCPFCNPJ) {
                    lblCpfCnpjExiste.setText("CPF já Cadastrado.");
                    lblCpfCnpjExiste.setForeground(Color.red);
                } else {
                    lblCpfCnpjExiste.setText("CPF livre.");
                    lblCpfCnpjExiste.setForeground(Color.black);
                }
            }
        } else {
            if ((txtCpfCnpj.getText().length() < 14)) {
                lblCpfCnpjExiste.setText("CNPJ Inválido.");
                lblCpfCnpjExiste.setForeground(Color.red);
            } else {
                this.existeCPFCNPJ = dao.DaoPessoa.existePessoaJuridica(txtCpfCnpj.getText());
                if (existeCPFCNPJ) {
                    lblCpfCnpjExiste.setText("CNPJ já Cadastrado.");
                    lblCpfCnpjExiste.setForeground(Color.red);
                } else {
                    lblCpfCnpjExiste.setText("CNPJ livre.");
                    lblCpfCnpjExiste.setForeground(Color.black);
                }
            }
        }
    }

    private void inicializarTabela() {
        String[] nomeColunas = {"Tipo", "Contratado?", "Data Cadastro", "Nome/Fictício",
            "CPF/CNPJ", "CEP", "Nº Logradouro", "Sexo", "Telefone", "Celular/Ramal",
            "Razão Social"};
        try {
            DefaultTableModel model = new DefaultTableModel();
            tblPessoaRecente.setModel(model);
            model.setColumnIdentifiers(nomeColunas);
            model.setRowCount(0);

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao popular tabela.\n\n" + ex.getMessage(), "Erro de população de tabela", 0);
        }
    }

    private void atualizarTabela(PessoaFisica fisica, PessoaJuridica juridica, boolean tipoPessoa) {
        Object rowData[] = new Object[11];

        if (tipoPessoa) {
            rowData[0] = "Física";
            rowData[1] = fisica.getPessoa().getManterContratoSTR();
            rowData[2] = fisica.getDataCadastro();
            rowData[3] = fisica.getPessoa().getNome();
            rowData[4] = fisica.getCpf();
            rowData[5] = fisica.getPessoa().getEndereco().getCep();
            rowData[6] = fisica.getPessoa().getComplementoLogradouro();
            rowData[7] = fisica.getSexoSTR();
            rowData[8] = fisica.getPessoa().getTelefone();
            rowData[9] = fisica.getCelular();
            rowData[10] = "-";
        } else {
            rowData[0] = "Jurídica";
            rowData[1] = juridica.getPessoa().getManterContratoSTR();
            rowData[2] = juridica.getDataCadastro();
            rowData[3] = juridica.getPessoa().getNome();
            rowData[4] = juridica.getCnpj();
            rowData[5] = juridica.getPessoa().getEndereco().getCep();
            rowData[6] = juridica.getPessoa().getComplementoLogradouro();
            rowData[7] = "-";
            rowData[8] = juridica.getPessoa().getTelefone();
            rowData[9] = juridica.getRamalCliente();
            rowData[10] = juridica.getRazaoSocial();
        }

        DefaultTableModel model = new DefaultTableModel();
        model = (DefaultTableModel) tblPessoaRecente.getModel();
        model.addRow(rowData);

    }

    private void cadastrarPessoa() {
        if (rbtFisica.isSelected()) {
            if (validarFisica()) {
                Endereco end = new Endereco();
                String cep = txtfCep.getText();
                cep = cep.replace("-", "");
                cep = cep.trim();
                end = DaoEndereco.popularEndereco(cep);

                Pessoa pessoa = new Pessoa(txtNomePessoaFicticio.getText(), end, txtTelefone.getText(), txtNumeroLogradouro.getText(), rbtSimCadastro.isSelected());
                PessoaFisica fisica = new PessoaFisica(pessoa, txtCpfCnpj.getText(), txtfDataCadastro.getText(), txtCelRamal.getText(), rbtMasculino.isSelected());
                boolean cadastroSucedido = dao.DaoPessoa.cadastrarPessoaFisica(fisica);
                if (cadastroSucedido) {
                    atualizarTabela(fisica, null, rbtFisica.isSelected());
                    verificarCpfCnpjEmUso();
                }
            }

        } else if (rbtJuridica.isSelected()) {

            if (validarJuridica()) {
                Endereco end = new Endereco();
                String cep = txtfCep.getText();
                cep = cep.replace("-", "");
                cep = cep.trim();
                end = DaoEndereco.popularEndereco(cep);

                Pessoa pessoa = new Pessoa(txtNomePessoaFicticio.getText(), end, txtTelefone.getText(), txtNumeroLogradouro.getText(), rbtSimCadastro.isSelected());
                PessoaJuridica juridica = new PessoaJuridica(pessoa, txtCpfCnpj.getText(), txtRazaoSocial.getText(), txtfDataCadastro.getText(), txtCelRamal.getText());

                boolean cadastroSucedido = dao.DaoPessoa.cadastrarPessoaJuridica(juridica);
                verificarCpfCnpjEmUso();
                if (cadastroSucedido) {
                    atualizarTabela(null, juridica, rbtFisica.isSelected());
                    verificarCpfCnpjEmUso();
                }
            }

        } else {
            JOptionPane.showMessageDialog(null, "Preencha os dados corretamente.", "Erro - dados incompletos", 0);
        }
    }

}
