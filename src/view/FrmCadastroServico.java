/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import control.TextSize;
import dao.DaoEndereco;
import dao.DaoFuncionario;
import dao.DaoPessoa;
import dao.DaoServico;
import java.awt.Color;
import java.awt.Toolkit;
import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import model.Endereco;
import model.Funcionario;
import model.Pessoa;
import model.PessoaFisica;
import model.PessoaJuridica;
import model.Servico;

/**
 *
 * @author Luiz
 */
public class FrmCadastroServico extends javax.swing.JFrame {

    boolean cepCadastrado;
    boolean cpfCadastrado;
    boolean cnpjCadastrado;
    boolean servCadastrado;
    boolean flagContrato = false;
    Endereco endExibicao;
    PessoaFisica pessoaFisicaExibicao;
    PessoaJuridica pessoaJuridicaExibicao;
    Pessoa pessoaExibicao;
    boolean flagFuncionario;
    Funcionario f = new Funcionario();

    public FrmCadastroServico(int nivelAdm) {
        initComponents();
        modoFisica();
        txtfDataServico.setText("" + new Date(Calendar.getInstance().getTimeInMillis()));
        iniciarTabela();

        //Programação de controle de nível de acesso
        if (nivelAdm == 0) {
            btnCadastrar.setEnabled(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngTipoCliente = new javax.swing.ButtonGroup();
        db = new javax.swing.JFileChooser();
        grupoSexo = new javax.swing.ButtonGroup();
        panPrincipal = new javax.swing.JPanel();
        btnLimpar = new javax.swing.JButton();
        lblCampoCpfCnpj = new javax.swing.JLabel();
        lblExisteServico = new javax.swing.JLabel();
        lblCep = new javax.swing.JLabel();
        txtCpfCnpj = new javax.swing.JTextField();
        lblCep1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        rbtFisica = new javax.swing.JRadioButton();
        rbtJuridica = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        lblSelecionarFunc = new javax.swing.JLabel();
        btnArquivoRelatorio = new javax.swing.JButton();
        lblRelatorio = new javax.swing.JLabel();
        lblCep2 = new javax.swing.JLabel();
        txtCodFunc = new javax.swing.JTextField();
        lblCep3 = new javax.swing.JLabel();
        txtNomeFunc = new javax.swing.JTextField();
        btnCadastrar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFuncSelecionados = new javax.swing.JTable();
        panPessoa = new javax.swing.JPanel();
        lblNomeFicticio = new javax.swing.JLabel();
        txtNomePessoaFicticio = new javax.swing.JTextField();
        lblTelefone = new javax.swing.JLabel();
        txtTelefone = new javax.swing.JTextField();
        lblCelularRamal = new javax.swing.JLabel();
        lblLogradouro = new javax.swing.JLabel();
        txtLogradouro = new javax.swing.JTextField();
        lblCidade = new javax.swing.JLabel();
        txtCidade = new javax.swing.JTextField();
        lblEstado = new javax.swing.JLabel();
        txtEstado = new javax.swing.JTextField();
        Bairro = new javax.swing.JLabel();
        txtBairro = new javax.swing.JTextField();
        Bairro1 = new javax.swing.JLabel();
        txtNumero = new javax.swing.JTextField();
        txtCelularRamal = new javax.swing.JTextField();
        lblRazaoSocial = new javax.swing.JLabel();
        txtRazaoSocial = new javax.swing.JTextField();
        lblSexoDesc = new javax.swing.JLabel();
        lblSexoValor = new javax.swing.JLabel();
        cmbTipoServico = new javax.swing.JComboBox<>();
        btnCadastrarPessoaJ = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtCodigoServico = new javax.swing.JTextField();
        lblCodigoServico = new javax.swing.JLabel();
        btnListarFunc = new javax.swing.JButton();
        btnListarServico = new javax.swing.JButton();
        btnSelecionarfunc = new javax.swing.JButton();
        txtfDataServico = new javax.swing.JFormattedTextField();
        txtfCep = new javax.swing.JFormattedTextField();
        btnCadastrarCep = new javax.swing.JButton();
        lblCepExiste = new javax.swing.JLabel();
        lblCpfCnpjExiste = new javax.swing.JLabel();
        btnListarPessoa1 = new javax.swing.JButton();
        btnLimpaFunc = new javax.swing.JButton();
        btnRemoveLinhaFunc = new javax.swing.JButton();
        lblTabelaFunc = new javax.swing.JLabel();
        btnListarEndereco = new javax.swing.JButton();
        btnMenuPrincipal = new javax.swing.JButton();
        btnFecharFrame = new javax.swing.JButton();
        lblBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de Serviço");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/img/logopng32.png")));
        setMaximumSize(new java.awt.Dimension(1152, 648));
        setMinimumSize(new java.awt.Dimension(1152, 648));
        setResizable(false);
        getContentPane().setLayout(null);

        panPrincipal.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panPrincipal.setOpaque(false);
        panPrincipal.setLayout(null);

        btnLimpar.setText("Limpar");
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });
        panPrincipal.add(btnLimpar);
        btnLimpar.setBounds(800, 160, 100, 30);

        lblCampoCpfCnpj.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblCampoCpfCnpj.setText("CPF");
        panPrincipal.add(lblCampoCpfCnpj);
        lblCampoCpfCnpj.setBounds(340, 50, 60, 25);

        lblExisteServico.setText("Código livre.");
        panPrincipal.add(lblExisteServico);
        lblExisteServico.setBounds(293, 15, 120, 14);

        lblCep.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblCep.setText("CEP");
        panPrincipal.add(lblCep);
        lblCep.setBounds(730, 50, 60, 25);

        txtCpfCnpj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCpfCnpjActionPerformed(evt);
            }
        });
        txtCpfCnpj.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCpfCnpjKeyReleased(evt);
            }
        });
        panPrincipal.add(txtCpfCnpj);
        txtCpfCnpj.setBounds(380, 50, 120, 25);

        lblCep1.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblCep1.setText("Data de Cadastro");
        panPrincipal.add(lblCep1);
        lblCep1.setBounds(830, 10, 150, 25);

        jLabel4.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        jLabel4.setText("Tipo de Cliente:");
        panPrincipal.add(jLabel4);
        jLabel4.setBounds(30, 50, 160, 25);

        btngTipoCliente.add(rbtFisica);
        rbtFisica.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        rbtFisica.setSelected(true);
        rbtFisica.setText("Física");
        rbtFisica.setOpaque(false);
        rbtFisica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtFisicaActionPerformed(evt);
            }
        });
        panPrincipal.add(rbtFisica);
        rbtFisica.setBounds(160, 47, 69, 33);

        btngTipoCliente.add(rbtJuridica);
        rbtJuridica.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        rbtJuridica.setText("Jurídica");
        rbtJuridica.setOpaque(false);
        rbtJuridica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtJuridicaActionPerformed(evt);
            }
        });
        panPrincipal.add(rbtJuridica);
        rbtJuridica.setBounds(230, 47, 85, 33);

        jLabel5.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        jLabel5.setText("Relatório do serviço:");
        panPrincipal.add(jLabel5);
        jLabel5.setBounds(30, 130, 170, 25);

        lblSelecionarFunc.setForeground(java.awt.Color.red);
        lblSelecionarFunc.setText("Inválido");
        panPrincipal.add(lblSelecionarFunc);
        lblSelecionarFunc.setBounds(205, 115, 250, 14);

        btnArquivoRelatorio.setText("Procurar");
        btnArquivoRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArquivoRelatorioActionPerformed(evt);
            }
        });
        panPrincipal.add(btnArquivoRelatorio);
        btnArquivoRelatorio.setBounds(210, 130, 80, 30);

        lblRelatorio.setText("Nenhum arquivo selecionado.");
        panPrincipal.add(lblRelatorio);
        lblRelatorio.setBounds(292, 138, 790, 14);

        lblCep2.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblCep2.setText("Código Funcionário");
        panPrincipal.add(lblCep2);
        lblCep2.setBounds(30, 90, 170, 25);

        txtCodFunc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodFuncActionPerformed(evt);
            }
        });
        txtCodFunc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCodFuncKeyReleased(evt);
            }
        });
        panPrincipal.add(txtCodFunc);
        txtCodFunc.setBounds(200, 90, 120, 25);

        lblCep3.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblCep3.setText("Nome Func. ");
        panPrincipal.add(lblCep3);
        lblCep3.setBounds(630, 90, 110, 25);

        txtNomeFunc.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        txtNomeFunc.setEnabled(false);
        panPrincipal.add(txtNomeFunc);
        txtNomeFunc.setBounds(740, 90, 340, 25);

        btnCadastrar.setText("Criar e ativar serviço");
        btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });
        panPrincipal.add(btnCadastrar);
        btnCadastrar.setBounds(920, 160, 160, 30);

        tblFuncSelecionados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblFuncSelecionados);

        panPrincipal.add(jScrollPane1);
        jScrollPane1.setBounds(30, 200, 680, 140);

        panPessoa.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados da Pessoa"));
        panPessoa.setOpaque(false);
        panPessoa.setLayout(null);

        lblNomeFicticio.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblNomeFicticio.setText("Nome");
        panPessoa.add(lblNomeFicticio);
        lblNomeFicticio.setBounds(10, 10, 140, 25);

        txtNomePessoaFicticio.setEditable(false);
        panPessoa.add(txtNomePessoaFicticio);
        txtNomePessoaFicticio.setBounds(160, 10, 316, 25);

        lblTelefone.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblTelefone.setText("Telefone");
        panPessoa.add(lblTelefone);
        lblTelefone.setBounds(10, 70, 140, 25);

        txtTelefone.setEditable(false);
        panPessoa.add(txtTelefone);
        txtTelefone.setBounds(160, 70, 316, 25);

        lblCelularRamal.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblCelularRamal.setText("Celular");
        panPessoa.add(lblCelularRamal);
        lblCelularRamal.setBounds(530, 70, 140, 25);

        lblLogradouro.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblLogradouro.setText("Logradouro");
        panPessoa.add(lblLogradouro);
        lblLogradouro.setBounds(530, 10, 140, 25);

        txtLogradouro.setEditable(false);
        panPessoa.add(txtLogradouro);
        txtLogradouro.setBounds(700, 10, 316, 25);

        lblCidade.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblCidade.setText("Cidade");
        panPessoa.add(lblCidade);
        lblCidade.setBounds(10, 40, 140, 25);

        txtCidade.setEditable(false);
        panPessoa.add(txtCidade);
        txtCidade.setBounds(160, 40, 114, 25);

        lblEstado.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblEstado.setText("Estado");
        panPessoa.add(lblEstado);
        lblEstado.setBounds(280, 40, 73, 25);

        txtEstado.setEditable(false);
        panPessoa.add(txtEstado);
        txtEstado.setBounds(356, 40, 120, 25);

        Bairro.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        Bairro.setText("Bairro");
        panPessoa.add(Bairro);
        Bairro.setBounds(530, 40, 140, 25);

        txtBairro.setEditable(false);
        panPessoa.add(txtBairro);
        txtBairro.setBounds(700, 40, 178, 25);

        Bairro1.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        Bairro1.setText("N°");
        panPessoa.add(Bairro1);
        Bairro1.setBounds(900, 40, 39, 25);

        txtNumero.setEditable(false);
        panPessoa.add(txtNumero);
        txtNumero.setBounds(939, 40, 77, 25);

        txtCelularRamal.setEditable(false);
        panPessoa.add(txtCelularRamal);
        txtCelularRamal.setBounds(700, 70, 316, 25);

        lblRazaoSocial.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblRazaoSocial.setText("Razão Social");
        panPessoa.add(lblRazaoSocial);
        lblRazaoSocial.setBounds(10, 100, 140, 25);

        txtRazaoSocial.setEditable(false);
        panPessoa.add(txtRazaoSocial);
        txtRazaoSocial.setBounds(160, 100, 316, 25);

        lblSexoDesc.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblSexoDesc.setText("Sexo");
        panPessoa.add(lblSexoDesc);
        lblSexoDesc.setBounds(530, 100, 140, 18);

        lblSexoValor.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblSexoValor.setText("-");
        panPessoa.add(lblSexoValor);
        lblSexoValor.setBounds(700, 100, 190, 25);

        panPrincipal.add(panPessoa);
        panPessoa.setBounds(30, 350, 1056, 140);

        cmbTipoServico.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Preventivo", "Corretivo", "Emergencial" }));
        cmbTipoServico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTipoServicoActionPerformed(evt);
            }
        });
        panPrincipal.add(cmbTipoServico);
        cmbTipoServico.setBounds(700, 10, 110, 25);

        btnCadastrarPessoaJ.setText("Cadastrar CPF");
        btnCadastrarPessoaJ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarPessoaJActionPerformed(evt);
            }
        });
        panPrincipal.add(btnCadastrarPessoaJ);
        btnCadastrarPessoaJ.setBounds(627, 47, 103, 30);

        jLabel3.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        jLabel3.setText("Tipo de serviço");
        panPrincipal.add(jLabel3);
        jLabel3.setBounds(550, 10, 160, 25);

        txtCodigoServico.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCodigoServicoKeyReleased(evt);
            }
        });
        panPrincipal.add(txtCodigoServico);
        txtCodigoServico.setBounds(200, 10, 90, 25);

        lblCodigoServico.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblCodigoServico.setText("Código do serviço ");
        panPrincipal.add(lblCodigoServico);
        lblCodigoServico.setBounds(30, 10, 156, 25);

        btnListarFunc.setText("Listar Funcionários");
        btnListarFunc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarFuncActionPerformed(evt);
            }
        });
        panPrincipal.add(btnListarFunc);
        btnListarFunc.setBounds(490, 87, 140, 30);

        btnListarServico.setText("Listar Serviços");
        btnListarServico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarServicoActionPerformed(evt);
            }
        });
        panPrincipal.add(btnListarServico);
        btnListarServico.setBounds(420, 7, 110, 30);

        btnSelecionarfunc.setText("Selecionar Funcionário");
        btnSelecionarfunc.setEnabled(false);
        btnSelecionarfunc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelecionarfuncActionPerformed(evt);
            }
        });
        panPrincipal.add(btnSelecionarfunc);
        btnSelecionarfunc.setBounds(326, 87, 160, 30);

        txtfDataServico.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter()));
        panPrincipal.add(txtfDataServico);
        txtfDataServico.setBounds(990, 10, 90, 25);

        try {
            txtfCep.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#####-###")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtfCep.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtfCepFocusLost(evt);
            }
        });
        txtfCep.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtfCepKeyReleased(evt);
            }
        });
        panPrincipal.add(txtfCep);
        txtfCep.setBounds(770, 50, 110, 25);

        btnCadastrarCep.setText("Cadastrar CEP");
        btnCadastrarCep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarCepActionPerformed(evt);
            }
        });
        panPrincipal.add(btnCadastrarCep);
        btnCadastrarCep.setBounds(971, 47, 110, 30);

        lblCepExiste.setForeground(java.awt.Color.red);
        lblCepExiste.setText("Cep Inválido.");
        panPrincipal.add(lblCepExiste);
        lblCepExiste.setBounds(883, 56, 110, 14);

        lblCpfCnpjExiste.setForeground(java.awt.Color.red);
        lblCpfCnpjExiste.setText("CPF Inválido.");
        panPrincipal.add(lblCpfCnpjExiste);
        lblCpfCnpjExiste.setBounds(503, 56, 120, 14);

        btnListarPessoa1.setText("Listar Pessoas");
        btnListarPessoa1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarPessoa1ActionPerformed(evt);
            }
        });
        panPrincipal.add(btnListarPessoa1);
        btnListarPessoa1.setBounds(680, 160, 101, 30);

        btnLimpaFunc.setText("Remover Todos");
        btnLimpaFunc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpaFuncActionPerformed(evt);
            }
        });
        panPrincipal.add(btnLimpaFunc);
        btnLimpaFunc.setBounds(720, 290, 160, 30);

        btnRemoveLinhaFunc.setText("Remover Funcionário");
        btnRemoveLinhaFunc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveLinhaFuncActionPerformed(evt);
            }
        });
        panPrincipal.add(btnRemoveLinhaFunc);
        btnRemoveLinhaFunc.setBounds(720, 240, 160, 30);

        lblTabelaFunc.setText("Tabela de Funcionários Alocados ao serviço:");
        panPrincipal.add(lblTabelaFunc);
        lblTabelaFunc.setBounds(30, 186, 230, 14);

        btnListarEndereco.setText("Listar Endereços");
        btnListarEndereco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarEnderecoActionPerformed(evt);
            }
        });
        panPrincipal.add(btnListarEndereco);
        btnListarEndereco.setBounds(550, 160, 111, 30);

        getContentPane().add(panPrincipal);
        panPrincipal.setBounds(30, 30, 1100, 510);

        btnMenuPrincipal.setText("Menu Principal");
        btnMenuPrincipal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuPrincipalActionPerformed(evt);
            }
        });
        getContentPane().add(btnMenuPrincipal);
        btnMenuPrincipal.setBounds(900, 550, 130, 30);

        btnFecharFrame.setText("Fechar ");
        btnFecharFrame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFecharFrameActionPerformed(evt);
            }
        });
        getContentPane().add(btnFecharFrame);
        btnFecharFrame.setBounds(1050, 550, 80, 30);

        lblBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fundo.png"))); // NOI18N
        getContentPane().add(lblBackground);
        lblBackground.setBounds(0, -20, 1150, 650);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void rbtFisicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtFisicaActionPerformed
        modoFisica();
    }//GEN-LAST:event_rbtFisicaActionPerformed

    private void rbtJuridicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtJuridicaActionPerformed
        modoJuridica();
    }//GEN-LAST:event_rbtJuridicaActionPerformed

    private void btnCadastrarPessoaJActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarPessoaJActionPerformed
        control.Janelas.abrirCadastroPessoa();
    }//GEN-LAST:event_btnCadastrarPessoaJActionPerformed

    private void btnArquivoRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArquivoRelatorioActionPerformed
        FileFilter ft1 = new FileNameExtensionFilter("Documentos do Word", "docx");
        FileFilter ft2 = new FileNameExtensionFilter("Arquivos de texto", "txt");
        db.addChoosableFileFilter(ft1);
        db.addChoosableFileFilter(ft2);

        int returnVal = db.showOpenDialog(this);

        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            java.io.File file = db.getSelectedFile();
            String fileConvert = file.toString();
            lblRelatorio.setText(" " + fileConvert + " ");
        }
    }//GEN-LAST:event_btnArquivoRelatorioActionPerformed

    private void txtCpfCnpjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCpfCnpjActionPerformed

    }//GEN-LAST:event_txtCpfCnpjActionPerformed

    private void txtCpfCnpjKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCpfCnpjKeyReleased
        txtCpfCnpj.setText(TextSize.maxLenghtCPFCNPJ(txtCpfCnpj.getText(), rbtFisica.isSelected()));
        validarCPFCNPJ();

    }//GEN-LAST:event_txtCpfCnpjKeyReleased

    private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed
        validarCEP();
        validarCPFCNPJ();
        if (flagContrato && cepCadastrado && verificarFuncVazio() && (cnpjCadastrado || cpfCadastrado)) {
            ArrayList<Funcionario> lista = new ArrayList<>();

            DefaultTableModel model = (DefaultTableModel) tblFuncSelecionados.getModel();
            for (int i = 0; i < model.getRowCount(); i++) {
                Funcionario f = new Funcionario();
                f.setCodigoFuncionario(((String) model.getValueAt(i, 0)));
                lista.add(f);

            }

            Servico serv = new Servico(Integer.parseInt(txtCodigoServico.getText()), cmbTipoServico.getSelectedItem().toString(),
                    Date.valueOf(txtfDataServico.getText()), rbtFisica.isSelected(), txtCpfCnpj.getText(), txtCpfCnpj.getText(), f, lblRelatorio.getText(), true);
            DaoServico dao = new DaoServico();
            try {
                dao.cadastrarServico(serv.getCnpjCliente(), lista, serv.getCodigoServico(), serv.getTipoServico(),
                        serv.isTipoCliente(), serv.getDescricaoServicoFILE(), serv.getDataServico(), serv.isStatusServico());
                iniciarTabela();
                if (!serv.getTipoServico().equals("Preventivo")) {
                    int aux = 9;
                    aux = JOptionPane.showConfirmDialog(rootPane, "Deseja criar um orçamento para o serviço?");
                    if (aux == 0) {
                        FrmCadastroOrcamento tela = new FrmCadastroOrcamento(serv.getCodigoServico(), true);
                        tela.setVisible(true);
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(FrmCadastroServico.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FrmCadastroServico.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Erro! Preencha os campos corretamente.");
        }


    }//GEN-LAST:event_btnCadastrarActionPerformed

    private void txtCodFuncKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodFuncKeyReleased
        txtCodFunc.setText(TextSize.maxLenghtFuncionario(txtCodFunc.getText()));
        try {
            flagFuncionario = DaoFuncionario.existeFuncionario(txtCodFunc.getText());
            if (flagFuncionario) {
                f = DaoFuncionario.popularFuncionario(txtCodFunc.getText());
                txtNomeFunc.setText(f.getPessoa().getNome());
                lblSelecionarFunc.setText("Funcionário Livre");
                flagFuncionario = true;
                btnSelecionarfunc.setEnabled(true);
                if (DaoServico.isFuncionarioEmServico(Integer.parseInt(txtCodFunc.getText()))) {
                    lblSelecionarFunc.setText("Funcionário já vinculado a outro serviço");
                    flagFuncionario = true;
                    btnSelecionarfunc.setEnabled(true);
                }
            } else {
                txtNomeFunc.setText("");
                lblSelecionarFunc.setText("Funcionário Inexistente");
                flagFuncionario = false;
                btnSelecionarfunc.setEnabled(false);
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmCadastroServico.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FrmCadastroServico.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtCodFuncKeyReleased

    private void btnListarFuncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarFuncActionPerformed
        control.Janelas.abrirListagemFuncionario();
    }//GEN-LAST:event_btnListarFuncActionPerformed

    private void txtCodigoServicoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodigoServicoKeyReleased
        txtCodigoServico.setText(TextSize.maxLenghtServico(txtCodigoServico.getText()));
        DaoServico dao = new DaoServico();
        try {
            if (txtCodigoServico.getText().length() < 1) {
                lblExisteServico.setText("Código inválido.");
                lblExisteServico.setForeground(Color.red);
                servCadastrado = false;
            } else if (dao.existeServico(Integer.parseInt(txtCodigoServico.getText()))) {
                lblExisteServico.setText("Código já cadastrado.");
                lblExisteServico.setForeground(Color.red);
                servCadastrado = false;
            } else {
                lblExisteServico.setText("Código livre.");
                lblExisteServico.setForeground(Color.black);
                servCadastrado = true;
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmCadastroServico.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FrmCadastroServico.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtCodigoServicoKeyReleased

    private void cmbTipoServicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTipoServicoActionPerformed

    }//GEN-LAST:event_cmbTipoServicoActionPerformed

    private void btnListarServicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarServicoActionPerformed
        control.Janelas.abrirListagemServico();
    }//GEN-LAST:event_btnListarServicoActionPerformed

    private void btnSelecionarfuncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelecionarfuncActionPerformed
        boolean flag = true;
        if (flagFuncionario) {
            DefaultTableModel model = (DefaultTableModel) tblFuncSelecionados.getModel();
            Object rowData[] = new Object[3];
            rowData[0] = (String) txtCodFunc.getText();
            rowData[1] = (String) txtNomeFunc.getText();
            String codigos = "";
            try {
                codigos = DaoServico.listarServicosDoFuncionario(txtCodFunc.getText());
            } catch (SQLException ex) {
                Logger.getLogger(FrmCadastroServico.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FrmCadastroServico.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (codigos.equals("")) {
                rowData[2] = (String) "Livre";
            } else {
                codigos = codigos.substring(2);
                rowData[2] = (String) codigos;
            }
            String aux = (String) rowData[0];
            String aux2 = "";
            for (int i = 0; i < model.getRowCount(); i++) {
                aux2 = (String) model.getValueAt(i, 0);
                if (aux.equals(aux2)) {
                    flag = false;
                }
            }
            if (flag) {
                model.addRow(rowData);
                tblFuncSelecionados.setModel(model);
                txtCodFunc.setText("");
                txtCodFunc.requestFocus();
            }
        }
    }//GEN-LAST:event_btnSelecionarfuncActionPerformed

    private void txtCodFuncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodFuncActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodFuncActionPerformed

    private void btnRemoveLinhaFuncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveLinhaFuncActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblFuncSelecionados.getModel();
        if (model.getRowCount() != 0) {
            model.removeRow(tblFuncSelecionados.getSelectedRow());
            tblFuncSelecionados.setModel(model);
        }


    }//GEN-LAST:event_btnRemoveLinhaFuncActionPerformed

    private void btnLimpaFuncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpaFuncActionPerformed
        iniciarTabela();
    }//GEN-LAST:event_btnLimpaFuncActionPerformed

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed

    }//GEN-LAST:event_btnLimparActionPerformed

    private void btnMenuPrincipalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuPrincipalActionPerformed
        control.Janelas.focarPrincipal();
    }//GEN-LAST:event_btnMenuPrincipalActionPerformed

    private void btnFecharFrameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFecharFrameActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnFecharFrameActionPerformed

    private void txtfCepFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtfCepFocusLost
        verificarCepExistente();
    }//GEN-LAST:event_txtfCepFocusLost

    private void txtfCepKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtfCepKeyReleased
        verificarCepExistente();
    }//GEN-LAST:event_txtfCepKeyReleased

    private void btnCadastrarCepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarCepActionPerformed
        control.Janelas.abrirCadastroEnderecoParametrizada(txtfCep.getText().replace("-", ""));
    }//GEN-LAST:event_btnCadastrarCepActionPerformed

    private void btnListarPessoa1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarPessoa1ActionPerformed
        if (rbtFisica.isSelected()) {
            control.Janelas.abrirListagemPessoaFisica();
        } else {
            control.Janelas.abrirListagemPessoaJuridica();
        }
    }//GEN-LAST:event_btnListarPessoa1ActionPerformed

    private void btnListarEnderecoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarEnderecoActionPerformed
        control.Janelas.abrirListagemEndereco();
    }//GEN-LAST:event_btnListarEnderecoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmCadastroServico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmCadastroServico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmCadastroServico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmCadastroServico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmCadastroServico(control.SynchroSoft.getNvlAdm()).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Bairro;
    private javax.swing.JLabel Bairro1;
    private javax.swing.JButton btnArquivoRelatorio;
    private javax.swing.JButton btnCadastrar;
    private javax.swing.JButton btnCadastrarCep;
    private javax.swing.JButton btnCadastrarPessoaJ;
    private javax.swing.JButton btnFecharFrame;
    private javax.swing.JButton btnLimpaFunc;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JButton btnListarEndereco;
    private javax.swing.JButton btnListarFunc;
    private javax.swing.JButton btnListarPessoa1;
    private javax.swing.JButton btnListarServico;
    private javax.swing.JButton btnMenuPrincipal;
    private javax.swing.JButton btnRemoveLinhaFunc;
    private javax.swing.JButton btnSelecionarfunc;
    private javax.swing.ButtonGroup btngTipoCliente;
    private javax.swing.JComboBox<String> cmbTipoServico;
    private javax.swing.JFileChooser db;
    private javax.swing.ButtonGroup grupoSexo;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JLabel lblCampoCpfCnpj;
    private javax.swing.JLabel lblCelularRamal;
    private javax.swing.JLabel lblCep;
    private javax.swing.JLabel lblCep1;
    private javax.swing.JLabel lblCep2;
    private javax.swing.JLabel lblCep3;
    private javax.swing.JLabel lblCepExiste;
    private javax.swing.JLabel lblCidade;
    private javax.swing.JLabel lblCodigoServico;
    private javax.swing.JLabel lblCpfCnpjExiste;
    private javax.swing.JLabel lblEstado;
    private javax.swing.JLabel lblExisteServico;
    private javax.swing.JLabel lblLogradouro;
    private javax.swing.JLabel lblNomeFicticio;
    private javax.swing.JLabel lblRazaoSocial;
    private javax.swing.JLabel lblRelatorio;
    private javax.swing.JLabel lblSelecionarFunc;
    private javax.swing.JLabel lblSexoDesc;
    private javax.swing.JLabel lblSexoValor;
    private javax.swing.JLabel lblTabelaFunc;
    private javax.swing.JLabel lblTelefone;
    private javax.swing.JPanel panPessoa;
    private javax.swing.JPanel panPrincipal;
    private javax.swing.JRadioButton rbtFisica;
    private javax.swing.JRadioButton rbtJuridica;
    private javax.swing.JTable tblFuncSelecionados;
    private javax.swing.JTextField txtBairro;
    private javax.swing.JTextField txtCelularRamal;
    private javax.swing.JTextField txtCidade;
    private javax.swing.JTextField txtCodFunc;
    private javax.swing.JTextField txtCodigoServico;
    private javax.swing.JTextField txtCpfCnpj;
    private javax.swing.JTextField txtEstado;
    private javax.swing.JTextField txtLogradouro;
    private javax.swing.JTextField txtNomeFunc;
    private javax.swing.JTextField txtNomePessoaFicticio;
    private javax.swing.JTextField txtNumero;
    private javax.swing.JTextField txtRazaoSocial;
    private javax.swing.JTextField txtTelefone;
    private javax.swing.JFormattedTextField txtfCep;
    private javax.swing.JFormattedTextField txtfDataServico;
    // End of variables declaration//GEN-END:variables

    private void verificarCepExistente() {
        String cep = txtfCep.getText();
        cep = cep.replace("-", "");
        cep = cep.trim();
        if ((cep.length() < 8) || (cep.length() > 8)) {
            lblCepExiste.setText("Cep Inválido.");
            lblCepExiste.setForeground(Color.red);
            limparExibicaoEndereco();
        } else {
            this.cepCadastrado = dao.DaoEndereco.existeEndereco(cep);
            if (cepCadastrado) {
                lblCepExiste.setText("CEP Cadastrado.");
                lblCepExiste.setForeground(Color.black);
                Endereco end = new Endereco();
                end = dao.DaoEndereco.popularEndereco(cep);
                popularExibicaoEndereco(end);
            } else {
                lblCepExiste.setText("CEP Inexistente.");
                lblCepExiste.setForeground(Color.red);
                limparExibicaoEndereco();
            }
        }
    }
    
    public void modoFisica() {
        lblCampoCpfCnpj.setText("CPF");
        txtRazaoSocial.setVisible(false);
        lblRazaoSocial.setVisible(false);
        lblNomeFicticio.setText("Nome");
        lblCelularRamal.setText("Celular");
        lblSexoDesc.setVisible(true);
        lblSexoValor.setVisible(true);
    }

    public void modoJuridica() {
        lblCampoCpfCnpj.setText("CNPJ");
        txtRazaoSocial.setVisible(true);
        lblRazaoSocial.setVisible(true);
        lblNomeFicticio.setText("Nome Fictício");
        lblCelularRamal.setText("Ramal");
        lblSexoDesc.setVisible(false);
        lblSexoValor.setVisible(true);
    }

    public void validarCPFCNPJ() {
        if (rbtFisica.isSelected()) {
            if ((txtCpfCnpj.getText().length() < 11) || (txtCpfCnpj.getText().length() > 11)) {
                lblCpfCnpjExiste.setText("CPF Inválido");
                limparExibicaoPessoa();
            } else {
                cpfCadastrado = dao.DaoPessoa.existePessoaFisica(txtCpfCnpj.getText());
                if (cpfCadastrado) {
                    pessoaFisicaExibicao = dao.DaoPessoa.popularPessoaFisica(txtCpfCnpj.getText());
                    if (pessoaFisicaExibicao.getPessoa().getManterContrato() == 0) {
                        lblCpfCnpjExiste.setText("CPF Sem contrato!");
                        flagContrato = false;
                    } else {
                        lblCpfCnpjExiste.setText("CPF Cadastrado.");
                        flagContrato = true;
                    }

                    popularExibicaoPessoa(pessoaFisicaExibicao);
                } else {
                    lblCpfCnpjExiste.setText("CPF Inexistente.");
                    flagContrato = false;
                    limparExibicaoPessoa();
                }
            }
        } else if (rbtJuridica.isSelected()) {
            if ((txtCpfCnpj.getText().length() < 14) || (txtCpfCnpj.getText().length() > 14)) {
                lblCpfCnpjExiste.setText("CNPJ Inválido");
                limparExibicaoPessoa();
            } else {
                
                try {
                    cnpjCadastrado = dao.DaoPessoa.existePessoaJuridica(txtCpfCnpj.getText());
                    if (cnpjCadastrado) {

                        pessoaJuridicaExibicao = dao.DaoPessoa.popularPessoaJuridica(txtCpfCnpj.getText(), txtfCep.getText());
                        if (pessoaJuridicaExibicao.getPessoa().getManterContrato() == 0) {
                            lblCpfCnpjExiste.setText("CNPJ Sem contrato!");
                            flagContrato = false;
                        } else {
                            lblCpfCnpjExiste.setText("CNPJ Cadastrado.");
                            flagContrato = true;
                        }

                        popularExibicaoPessoaJuridica(pessoaJuridicaExibicao);
                    } else {
                        lblCpfCnpjExiste.setText("CNPJ Inexistente.");
                        flagContrato = false;
                        limparExibicaoPessoaJuridica();
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(FrmCadastroFuncionario.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(FrmCadastroFuncionario.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    public void validarCEP() {
        if ((txtfCep.getText().length() < 8) || (txtfCep.getText().length() > 8)) {
            lblCepExiste.setText("Cep Inválido.");
            limparExibicaoEndereco();
        } else {
            DaoEndereco de = new DaoEndereco();

            cepCadastrado = de.existeEndereco(txtfCep.getText());
            if (cepCadastrado) {
                lblCepExiste.setText("CEP Cadastrado.");
                endExibicao = de.popularEndereco(txtfCep.getText());
                popularExibicaoEndereco(endExibicao);
                if (rbtFisica.isSelected()) {
                    popularExibicaoPessoa(pessoaFisicaExibicao);
                } else if (rbtJuridica.isSelected()) {
                    popularExibicaoPessoaJuridica(pessoaJuridicaExibicao);
                }
            } else {
                lblCepExiste.setText("CEP Inexistente.");
                limparExibicaoEndereco();
            }

        }
    }

    public void popularExibicaoEndereco(Endereco end) {
        txtLogradouro.setText(end.getLogradouro());
        txtCidade.setText(end.getCidade());
        txtBairro.setText(end.getBairro());
        txtEstado.setText(end.getEstado());
    }

    public void limparExibicaoEndereco() {
        txtLogradouro.setText("");
        txtCidade.setText("");
        txtBairro.setText("");
        txtEstado.setText("");
    }

    public void popularExibicaoPessoa(PessoaFisica pf) {
        txtNomePessoaFicticio.setText(pf.getPessoa().getNome());
        txtLogradouro.setText(pf.getPessoa().getEndereco().getLogradouro());
        txtCidade.setText(pf.getPessoa().getEndereco().getCidade());
        txtEstado.setText(pf.getPessoa().getEndereco().getEstado());
        txtBairro.setText(pf.getPessoa().getEndereco().getBairro());
        txtNumero.setText(pf.getPessoa().getComplementoLogradouro());
        txtTelefone.setText("" + pf.getPessoa().getTelefone());
        txtCelularRamal.setText("" + pf.getCelular());

        if (pf.getSexoBanco() == 0) {
            lblSexoValor.setText("Masculino");
        } else {
            lblSexoValor.setText("Feminino");
        }

    }

    public void popularExibicaoPessoaJuridica(PessoaJuridica pj) {
        txtNomePessoaFicticio.setText(pj.getPessoa().getNome());
        txtLogradouro.setText(pj.getPessoa().getEndereco().getLogradouro());
        txtCidade.setText(pj.getPessoa().getEndereco().getCidade());
        txtEstado.setText(pj.getPessoa().getEndereco().getEstado());
        txtBairro.setText(pj.getPessoa().getEndereco().getBairro());
        txtNumero.setText(pj.getPessoa().getComplementoLogradouro());
        txtTelefone.setText("" + pj.getPessoa().getTelefone());
        txtCelularRamal.setText("" + pj.getRamalCliente());
        txtRazaoSocial.setText(pj.getRazaoSocial());
    }

    public void limparExibicaoPessoa() {
        txtNomePessoaFicticio.setText("");
        txtLogradouro.setText("");
        txtCidade.setText("");
        txtEstado.setText("");
        txtBairro.setText("");
        txtNumero.setText("");
        txtTelefone.setText("");
        txtCelularRamal.setText("");

    }

    public void limparExibicaoPessoaJuridica() {
        txtNomePessoaFicticio.setText("");
        txtLogradouro.setText("");
        txtCidade.setText("");
        txtEstado.setText("");
        txtBairro.setText("");
        txtNumero.setText("");
        txtTelefone.setText("");
        txtCelularRamal.setText("");
        txtRazaoSocial.setText("");

    }

    public void iniciarTabela() {
        String[] nomeColunas = {"Código", "Funcionário", "Cód. Serviços em execução"};
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {

                    return false;
                }
            };
            tblFuncSelecionados.setModel(model);
            model.setColumnIdentifiers(nomeColunas);
            model.setRowCount(0);
        } catch (Exception ex) {
            System.out.println("Erro ao reiniciar tabela.\n\n" + ex.getMessage());
        }
    }

    public boolean verificarFuncVazio() {
        if (tblFuncSelecionados.getRowCount() == 0) {
            return false;
        } else {
            return true;
        }
    }
}
