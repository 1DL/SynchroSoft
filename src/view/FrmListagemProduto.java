/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import control.TextSize;
import dao.DaoProduto;
import java.awt.Color;
import java.awt.Toolkit;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Produto;

/**
 *
 * @author Administrator
 */
public class FrmListagemProduto extends javax.swing.JFrame {
    
    private boolean existeProduto;
    private boolean ultimoTipoPesquisa;
    private String PK_REF;

    /**
     * Creates new form FrmListagemPeca
     */
    public FrmListagemProduto(int nvlAdm) {
        initComponents();
        inicializarTabela();
        definirNivelAcesso(nvlAdm);
    }
    
    public FrmListagemProduto (int nvlAdm, String codigoProduto) {
        initComponents();
        inicializarTabela();
        definirNivelAcesso(nvlAdm);
        txtPesquisa.setText(codigoProduto);
        pesquisarFiltrada();
        selecionarLinhaTabela(codigoProduto);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblListagemProduto = new javax.swing.JTable();
        panPrincipal = new javax.swing.JPanel();
        lblPesquisar = new javax.swing.JLabel();
        cmbFiltro = new javax.swing.JComboBox<>();
        lblDigiteODado = new javax.swing.JLabel();
        txtPesquisa = new javax.swing.JTextField();
        btnDeletar = new javax.swing.JButton();
        btnLimparTabela = new javax.swing.JButton();
        btnListarTodos = new javax.swing.JButton();
        btnAlterar = new javax.swing.JButton();
        panDadosProduto = new javax.swing.JPanel();
        lblCodigoPeca = new javax.swing.JLabel();
        lblCategoriaPeca = new javax.swing.JLabel();
        txtNomePeca = new javax.swing.JTextField();
        lblNomePeca = new javax.swing.JLabel();
        lblQuantidadePeca = new javax.swing.JLabel();
        lblValorUnitario = new javax.swing.JLabel();
        cmbCategoria = new javax.swing.JComboBox<>();
        txtQuantidadePeca = new javax.swing.JFormattedTextField();
        txtfValorUnitario = new javax.swing.JFormattedTextField();
        lblQuantidadeMinima = new javax.swing.JLabel();
        txtQuantidadeMinima = new javax.swing.JFormattedTextField();
        lblQuantidadeMaxima = new javax.swing.JLabel();
        txtQuantidadeMaxima = new javax.swing.JFormattedTextField();
        txtCodigoPeca = new javax.swing.JTextField();
        lblCodigoExiste = new javax.swing.JLabel();
        btnCadastrarProduto = new javax.swing.JButton();
        btnMenuPrincipal = new javax.swing.JButton();
        btnFecharFrame = new javax.swing.JButton();
        btnDeletarTodosRegistros = new javax.swing.JButton();
        lblProdutoEncontrado = new javax.swing.JLabel();
        lblBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Listar Produtos Cadastrados");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/img/logopng32.png")));
        setMinimumSize(new java.awt.Dimension(1152, 648));
        setResizable(false);
        getContentPane().setLayout(null);

        tblListagemProduto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblListagemProduto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblListagemProdutoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblListagemProduto);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 270, 1125, 270);

        panPrincipal.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panPrincipal.setOpaque(false);
        panPrincipal.setLayout(null);

        lblPesquisar.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblPesquisar.setText("Pesquisar por: ");
        panPrincipal.add(lblPesquisar);
        lblPesquisar.setBounds(10, 10, 120, 25);

        cmbFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Código", "Nome", "Categoria", "Quantidade", "Alerta Qtd Min", "Alerta Qtd Max", "Valor" }));
        cmbFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFiltroActionPerformed(evt);
            }
        });
        panPrincipal.add(cmbFiltro);
        cmbFiltro.setBounds(160, 10, 210, 25);

        lblDigiteODado.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblDigiteODado.setText("Digite o(a) Código");
        panPrincipal.add(lblDigiteODado);
        lblDigiteODado.setBounds(375, 10, 230, 25);

        txtPesquisa.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPesquisaFocusGained(evt);
            }
        });
        txtPesquisa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPesquisaKeyReleased(evt);
            }
        });
        panPrincipal.add(txtPesquisa);
        txtPesquisa.setBounds(620, 10, 490, 25);

        btnDeletar.setText("Deletar registro selecionado");
        btnDeletar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletarActionPerformed(evt);
            }
        });
        panPrincipal.add(btnDeletar);
        btnDeletar.setBounds(10, 190, 170, 30);

        btnLimparTabela.setText("Limpar tabela");
        btnLimparTabela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparTabelaActionPerformed(evt);
            }
        });
        panPrincipal.add(btnLimparTabela);
        btnLimparTabela.setBounds(410, 190, 120, 30);

        btnListarTodos.setText("Listar todos os registros");
        btnListarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarTodosActionPerformed(evt);
            }
        });
        panPrincipal.add(btnListarTodos);
        btnListarTodos.setBounds(550, 190, 147, 30);

        btnAlterar.setText("Alterar");
        btnAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarActionPerformed(evt);
            }
        });
        panPrincipal.add(btnAlterar);
        btnAlterar.setBounds(980, 190, 130, 30);

        panDadosProduto.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados do Produto"));
        panDadosProduto.setOpaque(false);
        panDadosProduto.setPreferredSize(new java.awt.Dimension(1100, 510));
        panDadosProduto.setLayout(null);

        lblCodigoPeca.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblCodigoPeca.setText("Cód. de Barras:");
        panDadosProduto.add(lblCodigoPeca);
        lblCodigoPeca.setBounds(10, 10, 154, 25);

        lblCategoriaPeca.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblCategoriaPeca.setText("Categoria:");
        panDadosProduto.add(lblCategoriaPeca);
        lblCategoriaPeca.setBounds(610, 10, 90, 25);

        txtNomePeca.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNomePecaKeyReleased(evt);
            }
        });
        panDadosProduto.add(txtNomePeca);
        txtNomePeca.setBounds(150, 50, 316, 25);

        lblNomePeca.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblNomePeca.setText("Nome da Peça:");
        panDadosProduto.add(lblNomePeca);
        lblNomePeca.setBounds(10, 50, 140, 25);

        lblQuantidadePeca.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblQuantidadePeca.setText("Quantidade:");
        panDadosProduto.add(lblQuantidadePeca);
        lblQuantidadePeca.setBounds(10, 90, 140, 25);

        lblValorUnitario.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblValorUnitario.setText("Valor Unitário:");
        panDadosProduto.add(lblValorUnitario);
        lblValorUnitario.setBounds(610, 50, 114, 25);

        cmbCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "Gerador", "Bombas", "Aquecedores", "Alarme de incêndio", "Pressurizadores de escada", "Alarme perimetral", "Cabine primária", "Redutoras de pressão" }));
        panDadosProduto.add(cmbCategoria);
        cmbCategoria.setBounds(750, 10, 175, 25);

        txtQuantidadePeca.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("####"))));
        txtQuantidadePeca.setText("0");
        txtQuantidadePeca.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtQuantidadePecaKeyReleased(evt);
            }
        });
        panDadosProduto.add(txtQuantidadePeca);
        txtQuantidadePeca.setBounds(150, 90, 100, 25);

        txtfValorUnitario.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("####0.00"))));
        txtfValorUnitario.setText("0,00");
        txtfValorUnitario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfValorUnitarioActionPerformed(evt);
            }
        });
        txtfValorUnitario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtfValorUnitarioKeyReleased(evt);
            }
        });
        panDadosProduto.add(txtfValorUnitario);
        txtfValorUnitario.setBounds(750, 50, 175, 25);

        lblQuantidadeMinima.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblQuantidadeMinima.setText("Alerta Qtd Mínima:");
        panDadosProduto.add(lblQuantidadeMinima);
        lblQuantidadeMinima.setBounds(260, 90, 156, 25);

        txtQuantidadeMinima.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("####"))));
        txtQuantidadeMinima.setText("0");
        txtQuantidadeMinima.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQuantidadeMinimaActionPerformed(evt);
            }
        });
        txtQuantidadeMinima.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtQuantidadeMinimaKeyReleased(evt);
            }
        });
        panDadosProduto.add(txtQuantidadeMinima);
        txtQuantidadeMinima.setBounds(420, 90, 100, 25);

        lblQuantidadeMaxima.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblQuantidadeMaxima.setText("Alerta Qtd Máxima:");
        panDadosProduto.add(lblQuantidadeMaxima);
        lblQuantidadeMaxima.setBounds(530, 90, 157, 25);

        txtQuantidadeMaxima.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("####"))));
        txtQuantidadeMaxima.setText("0");
        txtQuantidadeMaxima.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQuantidadeMaximaActionPerformed(evt);
            }
        });
        txtQuantidadeMaxima.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtQuantidadeMaximaKeyReleased(evt);
            }
        });
        panDadosProduto.add(txtQuantidadeMaxima);
        txtQuantidadeMaxima.setBounds(695, 90, 100, 25);

        txtCodigoPeca.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCodigoPecaKeyReleased(evt);
            }
        });
        panDadosProduto.add(txtCodigoPeca);
        txtCodigoPeca.setBounds(150, 10, 316, 25);

        lblCodigoExiste.setForeground(java.awt.Color.red);
        lblCodigoExiste.setText("Código inválido.");
        panDadosProduto.add(lblCodigoExiste);
        lblCodigoExiste.setBounds(470, 10, 151, 25);

        panPrincipal.add(panDadosProduto);
        panDadosProduto.setBounds(10, 50, 1100, 130);

        btnCadastrarProduto.setText("Cadastrar novo Produto");
        btnCadastrarProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarProdutoActionPerformed(evt);
            }
        });
        panPrincipal.add(btnCadastrarProduto);
        btnCadastrarProduto.setBounds(720, 190, 150, 30);

        getContentPane().add(panPrincipal);
        panPrincipal.setBounds(10, 10, 1125, 230);

        btnMenuPrincipal.setText("Menu Principal");
        btnMenuPrincipal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuPrincipalActionPerformed(evt);
            }
        });
        getContentPane().add(btnMenuPrincipal);
        btnMenuPrincipal.setBounds(900, 550, 130, 30);

        btnFecharFrame.setText("Fechar ");
        btnFecharFrame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFecharFrameActionPerformed(evt);
            }
        });
        getContentPane().add(btnFecharFrame);
        btnFecharFrame.setBounds(1055, 550, 80, 30);

        btnDeletarTodosRegistros.setText("Deletar todos os registros");
        btnDeletarTodosRegistros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletarTodosRegistrosActionPerformed(evt);
            }
        });
        getContentPane().add(btnDeletarTodosRegistros);
        btnDeletarTodosRegistros.setBounds(10, 550, 160, 30);

        lblProdutoEncontrado.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        lblProdutoEncontrado.setText("Produtos encontrados no banco de dados. Para visualizar ou alterar um registro, clique em um registro exibido na tabela.");
        getContentPane().add(lblProdutoEncontrado);
        lblProdutoEncontrado.setBounds(10, 240, 1040, 25);

        lblBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fundo.png"))); // NOI18N
        getContentPane().add(lblBackground);
        lblBackground.setBounds(0, -20, 1150, 650);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents


    private void txtPesquisaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisaKeyReleased
        limiteDigitosPesquisa(cmbFiltro.getSelectedItem().toString());
        pesquisarFiltrada();
    }//GEN-LAST:event_txtPesquisaKeyReleased

    private void btnMenuPrincipalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuPrincipalActionPerformed
        control.Janelas.focarPrincipal();
    }//GEN-LAST:event_btnMenuPrincipalActionPerformed

    private void btnFecharFrameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFecharFrameActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnFecharFrameActionPerformed

    private void btnDeletarTodosRegistrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletarTodosRegistrosActionPerformed
        removerTodosRegistros();
    }//GEN-LAST:event_btnDeletarTodosRegistrosActionPerformed

    private void cmbFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFiltroActionPerformed
        lblDigiteODado.setText("Digite o(a) " + cmbFiltro.getSelectedItem().toString() + ":");
        limiteDigitosPesquisa(cmbFiltro.getSelectedItem().toString());
        txtPesquisa.requestFocus();
    }//GEN-LAST:event_cmbFiltroActionPerformed

    private void txtNomePecaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNomePecaKeyReleased
        txtNomePeca.setText(TextSize.maxLenghtNomePeca(txtNomePeca.getText()));
    }//GEN-LAST:event_txtNomePecaKeyReleased

    private void txtQuantidadePecaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQuantidadePecaKeyReleased
        txtQuantidadePeca.setText(TextSize.maxLenghtQuantidadePeca(txtQuantidadePeca.getText()));
    }//GEN-LAST:event_txtQuantidadePecaKeyReleased

    private void txtfValorUnitarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfValorUnitarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtfValorUnitarioActionPerformed

    private void txtfValorUnitarioKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtfValorUnitarioKeyReleased
        txtfValorUnitario.setText(TextSize.maxLenghtValorPeca(txtfValorUnitario.getText()));
    }//GEN-LAST:event_txtfValorUnitarioKeyReleased

    private void txtQuantidadeMinimaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQuantidadeMinimaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQuantidadeMinimaActionPerformed

    private void txtQuantidadeMinimaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQuantidadeMinimaKeyReleased
        txtQuantidadeMinima.setText(TextSize.maxLenghtQuantidadePeca(txtQuantidadeMinima.getText()));
    }//GEN-LAST:event_txtQuantidadeMinimaKeyReleased

    private void txtQuantidadeMaximaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQuantidadeMaximaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQuantidadeMaximaActionPerformed

    private void txtQuantidadeMaximaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQuantidadeMaximaKeyReleased
        txtQuantidadeMaxima.setText(TextSize.maxLenghtQuantidadePeca(txtQuantidadeMaxima.getText()));
    }//GEN-LAST:event_txtQuantidadeMaximaKeyReleased

    private void txtCodigoPecaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodigoPecaKeyReleased
        txtCodigoPeca.setText(TextSize.maxLenghtCodigoPeca(txtCodigoPeca.getText()));
        verificarCodigoProduto();
    }//GEN-LAST:event_txtCodigoPecaKeyReleased

    private void btnDeletarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletarActionPerformed
        deletarRegistro();
    }//GEN-LAST:event_btnDeletarActionPerformed

    private void btnLimparTabelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparTabelaActionPerformed
        limparTabela();
    }//GEN-LAST:event_btnLimparTabelaActionPerformed

    private void btnListarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarTodosActionPerformed
        atualizarTabela(false);
    }//GEN-LAST:event_btnListarTodosActionPerformed

    private void btnAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarActionPerformed
        alterarRegistro();
    }//GEN-LAST:event_btnAlterarActionPerformed

    private void tblListagemProdutoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblListagemProdutoMouseClicked
        popularCampos();
    }//GEN-LAST:event_tblListagemProdutoMouseClicked

    private void txtPesquisaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPesquisaFocusGained
        limiteDigitosPesquisa(cmbFiltro.getSelectedItem().toString());
        pesquisarFiltrada();
        txtPesquisa.selectAll();
    }//GEN-LAST:event_txtPesquisaFocusGained

    private void btnCadastrarProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarProdutoActionPerformed
        control.Janelas.abrirCadastroProduto();
    }//GEN-LAST:event_btnCadastrarProdutoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmListagemProduto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmListagemProduto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmListagemProduto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmListagemProduto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmListagemProduto(control.SynchroSoft.getNvlAdm()).setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlterar;
    private javax.swing.JButton btnCadastrarProduto;
    private javax.swing.JButton btnDeletar;
    private javax.swing.JButton btnDeletarTodosRegistros;
    private javax.swing.JButton btnFecharFrame;
    private javax.swing.JButton btnLimparTabela;
    private javax.swing.JButton btnListarTodos;
    private javax.swing.JButton btnMenuPrincipal;
    private javax.swing.JComboBox<String> cmbCategoria;
    private javax.swing.JComboBox<String> cmbFiltro;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JLabel lblCategoriaPeca;
    private javax.swing.JLabel lblCodigoExiste;
    private javax.swing.JLabel lblCodigoPeca;
    private javax.swing.JLabel lblDigiteODado;
    private javax.swing.JLabel lblNomePeca;
    private javax.swing.JLabel lblPesquisar;
    private javax.swing.JLabel lblProdutoEncontrado;
    private javax.swing.JLabel lblQuantidadeMaxima;
    private javax.swing.JLabel lblQuantidadeMinima;
    private javax.swing.JLabel lblQuantidadePeca;
    private javax.swing.JLabel lblValorUnitario;
    private javax.swing.JPanel panDadosProduto;
    private javax.swing.JPanel panPrincipal;
    private javax.swing.JTable tblListagemProduto;
    private javax.swing.JTextField txtCodigoPeca;
    private javax.swing.JTextField txtNomePeca;
    private javax.swing.JTextField txtPesquisa;
    private javax.swing.JFormattedTextField txtQuantidadeMaxima;
    private javax.swing.JFormattedTextField txtQuantidadeMinima;
    private javax.swing.JFormattedTextField txtQuantidadePeca;
    private javax.swing.JFormattedTextField txtfValorUnitario;
    // End of variables declaration//GEN-END:variables

    /**
     * Atualiza os dados da tabela. Um novo DefaultTableModel é instanciado,
     * recebendo atributos do tableModel atual. Então, é forçado que a tabela
     * possua nenhuma linha. Isso é para evitar repetição de valores em
     * múltiplas pesquisas. Um ArrayList do tipo Produto é instanciado. É
     * verificado se o tipo de pesquisa é filtrada ou listagem geral. Caso seja
     * pesquisa filtrada, o metodo de listagem via pesquisa filtrada é chamada
     * <code>listarPecaFiltrada</code> recebendo o termo do filtro como
     * parâmetro, populando o ArrayList. Caso não, o método
     * <code>listarPeca()</code> é chamado, populando o ArrayList. Um array de
     * tipo Object (genérico) dadosLinha é instanciado, com a quantidade de
     * colunas da tabela. O For percorre até a quantidade de elementos presente
     * no ArrayList, e cada posição do array dadosLinha é populado com os
     * valores dos atributos do objeto presente no índice atual do ArrayList. Em
     * seguida, uma linha é adicionada a tabela através dos dados continhos no
     * array dadosLinha. Por fim, chama o método <code> limparCampos </code>
     * para limpar os dados do registro selecionado anteriormente.
     *
     * @param filtrada booleano que define se a pesquisa é filtrada ou não. true
     * = filtrada. false = atualiza a tabela com todos os dados registrados no
     * banco.
     */
    private void atualizarTabela(boolean filtrada) {
        /*
        Cria um novo modelo de tabela do tipo DefaultTableModel, baseado no modelo
        atual da tabela, definido no metodo inicializarTabela.
         */
        DefaultTableModel model = new DefaultTableModel();
        model = (DefaultTableModel) tblListagemProduto.getModel();
        model.setRowCount(0);
        /*
        Instanciamento do ArrayList lista, do tipo Produto.
         */
        ArrayList<Produto> lista = new ArrayList<>();
        /*
        Caso seja uma atualização por filtro, chama o metodo listarPecaFiltrada() 
        e define que o último tipo de pesquisa foi por filtro (ultimoTipoPesquisa = true).
        Caso não, chama o método listarPeca, que popula a lista com todos os dados
        armazenados no banco de dados, e define que o último tipo de pesquisa foi listar todos
        (ultimoTipoPesquisa = false).
         */
        if (filtrada) {
            lista = DaoProduto.listarPecaFiltrada((String) cmbFiltro.getSelectedItem(), txtPesquisa.getText().toLowerCase().trim());
            ultimoTipoPesquisa = true;
        } else {
            lista = DaoProduto.listarPeca();
            ultimoTipoPesquisa = false;
        }
        /*
        Instanciamento do array dadosLinha do tipo Object. O tipo Object é genérico.
        Nele será atribuido cada atributo do objeto Produto.
         */
        Object dadosLinha[] = new Object[7];
        /*
        Um laço de repetição para adicionar linhas a tabela.
        O for percorre até o último índice da lista, especificado pela chamada do 
        método .size(), que retorna o tamanho do ArrayList lista.
        Cada posição do array dadosLinha é populado com os dados do objeto Produto
        presente na lista.
         */
        for (int i = 0; i < lista.size(); i++) {
            dadosLinha[0] = lista.get(i).getCodigoPeca();
            dadosLinha[1] = lista.get(i).getNomePeca();
            dadosLinha[2] = lista.get(i).getCategoriaPeca();
            dadosLinha[3] = lista.get(i).getQuantidadePeca();
            dadosLinha[4] = lista.get(i).getAlertaQtdMin();
            dadosLinha[5] = lista.get(i).getAlertaQtdMax();
            dadosLinha[6] = lista.get(i).getValorUnitarioSTR();
            model.addRow(dadosLinha);
        }
        //String[] nomeColunas = {"Código", "Nome", "Categoria", "Quantidade", "Alerta Qtd Mínima", "Alerta Qtd Máxima", "Valor Unitário", "PK Ref"};
        /*
        Remove os dados do campo selecionado anteriormente.
         */
        limparCampos();
    }

    /**
     * Limpa todos os campos da janela e atualiza o status do Código informado,
     * para fins estéticos e de validação.
     */
    private void limparCampos() {
        txtCodigoPeca.setText("");
        cmbCategoria.setSelectedItem("-");
        txtNomePeca.setText("");
        txtfValorUnitario.setText("0,00");
        txtQuantidadePeca.setText("0");
        txtQuantidadeMinima.setText("0");
        txtQuantidadeMaxima.setText("0");
        verificarCodigoProduto();
        PK_REF = null;
    }

    /**
     * Define dinamicamente o limite de caracteres do campo de pesquisa
     * filtrada. O metodo apropriado da classe TextSize é chamado com base no
     * ítem selecionado na combo box que define o filtro.
     *
     * @param filtro Texto do filtro selecionado. Valores possíveis: Código,
     * Nome, Categoria, Quantidade, Alerta Qtd Min, Alerta Qtd Max, Valor
     */
    private void limiteDigitosPesquisa(String filtro) {
        switch (filtro) {
            case "Código":
                txtPesquisa.setText(control.TextSize.maxLenghtCodigoPeca(txtPesquisa.getText()));
                break;
            case "Nome":
                txtPesquisa.setText(control.TextSize.maxLenghtNomePeca(txtPesquisa.getText()));
                break;
            case "Quantidade":
                txtPesquisa.setText(control.TextSize.maxLenghtQuantidadePeca(txtPesquisa.getText()));
                break;
            case "Alerta Qtd Min":
                txtPesquisa.setText(control.TextSize.maxLenghtQuantidadePeca(txtPesquisa.getText()));
                break;
            case "Alerta Qtd Max":
                txtPesquisa.setText(control.TextSize.maxLenghtQuantidadePeca(txtPesquisa.getText()));
                break;
            case "Valor":
                txtPesquisa.setText(control.TextSize.maxLenghtValorPeca(txtPesquisa.getText()));
                break;
            case "Categoria":
                txtPesquisa.setText(control.TextSize.maxLenghtCategoriaProduto(txtPesquisa.getText()));
                break;
            default:
                JOptionPane.showMessageDialog(this, "Erro ao definir limite de caracteres do campo de pesquisa.",
                        "Erro - limite de dígitos dinâmico", 0);
                break;
        }
    }

    /**
     * A tabela é modelada e inicializada no JFrame. Um array de Strings
     * <code>nomeColunas[]</code> é instanciado com o nome de cada coluna a ser
     * utilizado pela tabela. Cria um objeto do tipo DefaultTableModel de acordo
     * com as necessidades dessa janela. Em seguida, a edição das células da
     * tabela é desativada. As colunas são definidas, e é forçado que a tabela
     * inicie com nenhuma linha. A coluna da chave primária para utilização de
     * referência (PK_REF) é ocultada da exibição. Também é definido largura
     * para colunas individualmente.
     */
    private void inicializarTabela() {

        String[] nomeColunas = {"Código", "Nome", "Categoria", "Quantidade", "Alerta Qtd Mínima", "Alerta Qtd Máxima", "Valor Unitário"};
        try {
            /*
            Desativando a edição da tabela.
             */
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };

            tblListagemProduto.setModel(model);

            model.setColumnIdentifiers(nomeColunas);

            model.setRowCount(0);

            limparCampos();

            /*
            Captura de qualquer tipo de excessão que aconteça.
             */
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Erro ao inicializar a tabela. \n\n"
                    + ex, "Erro - Inicialização de tabela.", 0);
        }
    }

    private void verificarCodigoProduto() {
        if (txtCodigoPeca.getText().equals("")) {
            lblCodigoExiste.setText("Código Inválido.");
            lblCodigoExiste.setForeground(Color.red);
            existeProduto = true;
        } else {
            this.existeProduto = dao.DaoProduto.existePeca(txtCodigoPeca.getText());
            if (this.existeProduto) {
                lblCodigoExiste.setText("Produto já cadastrado.");
                lblCodigoExiste.setForeground(Color.black);
                existeProduto = false;
            } else {
                lblCodigoExiste.setText("Código Disponível.");
                lblCodigoExiste.setForeground(Color.black);
                existeProduto = false;
            }
        }
    }

    /**
     * Popula os campos com dados salvos no banco de dados. Ao selecionar uma
     * linha na tabela, um objeto do tipoProduto é instanciado. Uma variavel
     * string de controle também é isntanciada, recebendo o valor do código do
     * produto da linha selecionada atualmente. Então o objeto produto é
     * populado através do método <code> popularPeca(codigo)</code> onde o
     * codigo da linha selecionada é vasculhado no banco populando o objeto
     * produto de acordo com os registros relacionados ao código passado como
     * parâmetro. Os campos da interface são populados com o valor atribuido aos
     * atributos desse objeto produto.
     */
    private void popularCampos() {

        Produto produto = new Produto();

        String codigo = (String) tblListagemProduto.getValueAt(tblListagemProduto.getSelectedRow(), 0);

        produto = dao.DaoProduto.popularPeca(codigo);

        txtCodigoPeca.setText(produto.getCodigoPeca());
        cmbCategoria.setSelectedItem((String) produto.getCategoriaPeca());
        txtNomePeca.setText(produto.getNomePeca());
        txtfValorUnitario.setText(produto.getValorUnitarioSTR());
        txtQuantidadePeca.setText(String.valueOf(produto.getQuantidadePeca()));
        txtQuantidadeMinima.setText(String.valueOf(produto.getAlertaQtdMin()));
        txtQuantidadeMaxima.setText(String.valueOf(produto.getAlertaQtdMax()));
        PK_REF = produto.getCodigoPeca();

        verificarCodigoProduto();
    }

    /**
     * Remove o registro atualmente selecionado do banco de dados. Interroga o
     * usuário se realmente deseja remover o registro selecionado na tabela. O
     * retorno do JOPtionPane é guardado na variavel de controle opcao. Caso sim
     * (opcao == 0), chama o metodo <code>deletarPeca</code> no qual remove do
     * banco de dados todos os registros relacionados ao código infromado por
     * parâmetro, código no qual é o código da linha selecionada da tabela.
     */
    private void deletarRegistro() {
        /*
        Variável de controle opcao. Armazena o retorno do JOPtionPane.
        O mesmo retorna 0 quando a opção SIM/YES é selecionada,
        1 para quando a opção NÃO/NO é selecionada.
         */
        int opcao;
        opcao = JOptionPane.showConfirmDialog(this, "Atenção! Todos os registros relacionados ao código "
                + ((String) tblListagemProduto.getValueAt(tblListagemProduto.getSelectedRow(), 0))
                + " serão permanentemente removidos.\n\nDeseja realmente excluir o registro?",
                "Confirmação de exclusão",
                JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        /*
        Caso a opção SIM seja selecionada, o atributo código é populado do objeto 
        produto, e o mesmo é passado como parâmetro para o metodo deletarPeca.
        Após a execução do método, a tabela é atualizada de acordo com o último
        tipo de pesquisa realizada.
        ultimoTipoPesquisa - true = filtrada. false = listar todos.
         */
        if (opcao == 0) {
            Produto produto = new Produto();
            produto.setCodigoPeca((String) tblListagemProduto.getValueAt(tblListagemProduto.getSelectedRow(), 0));
            dao.DaoProduto.deletarPeca(produto.getCodigoPeca());
            atualizarTabela(ultimoTipoPesquisa);
            limparCampos();
        }
    }

    /**
     * Esvazia todo o conteúdo da tabela e limpa os campos.
     */
    private void limparTabela() {
        DefaultTableModel model = new DefaultTableModel();
        model = (DefaultTableModel) tblListagemProduto.getModel();
        model.setRowCount(0);
        /*
        Chama o metodo limparCampos para limpar os dados do registro anteriormente
        selecionado.
         */
        limparCampos();
    }

    /**
     * Altera o registro no banco de dados, com base nos valores informados nos
     * campos. Utiliza o valor oculto PK_REF da tabela, como referência para o
     * código original, caso o mesmo seja alterado. PK_REF será usado na
     * cláusula WHERE da QUERY de UPDATE do banco.
     *
     * Antes de chamar o método <code>alterarPeca</code>, o metodo
     * <code>validarCampos</code> é chamado para validar todos os campos
     * preenchidos. Sendo o metodo alterarPeca retornando true, um objeto do
     * tipo Produto é instanciado e enfim, o método alterarProduto é chamado.
     * Após a chamada, a tabela é atualizada de acordo com o último tipo de
     * pesquisa e os dados dos campos são limpados.
     */
    private void alterarRegistro() {
        if (validarCampos()) {
            Produto produto = new Produto();

            produto.setCodigoPeca(txtCodigoPeca.getText());
            produto.setCategoriaPeca(cmbCategoria.getSelectedItem().toString());
            produto.setNomePeca(txtNomePeca.getText());
            produto.setValorUnitario(txtfValorUnitario.getText());
            produto.setQuantidadePeca(txtQuantidadePeca.getText());
            produto.setAlertaQtdMin(txtQuantidadeMinima.getText());
            produto.setAlertaQtdMax(txtQuantidadeMaxima.getText());
            /*
            String de controle PK_REF. Seu valor é baseado no campo oculto PK_REF da tabela.
            Irá armazenar o código original, inalterado, da linha selecionada. Esse valor
            será utilizado na cláusula WHERE da query no banco, pois é possível que
            usuário altere o código do registro selecionado, sendo o PK_REF
            a referência da Primary Key (código original)
             */
            boolean alteracaoSucedida;
            alteracaoSucedida = dao.DaoProduto.alterarPeca(produto, PK_REF);

            if (alteracaoSucedida) {
                atualizarTabela(ultimoTipoPesquisa);
                limparCampos();
            }
        }
    }

    private boolean validarCampos() {
        boolean selectionEmpty = tblListagemProduto.getSelectionModel().isSelectionEmpty();
        if (selectionEmpty) {
            JOptionPane.showMessageDialog(this, "Nenhum registro selecionado da tabela.\n\n"
                    + "Pesquise por algum registro e clique em alguma linha da tabela.", "Erro - Não há registro selecionado", 0);
            return false;
        } else if (txtCodigoPeca.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Código do Produto em branco.\n\n"
                    + "Informe corretamente o Código do Produto a ser alterado.", "Erro - Código do Produto Inválido", 0);
            txtCodigoPeca.requestFocus();
            return false;
        } else if (this.existeProduto) {
            JOptionPane.showMessageDialog(this, "Código do Produto inválido.\n\n"
                    + "Informe um código do produto diferente.", "Erro - Código do Produto Inválido", 0);
            txtCodigoPeca.requestFocus();
            return false;
        } else if (txtNomePeca.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Nome do Produto em branco.\n\n"
                    + "Informe corretamente o Nome do Produto a ser alterado.", "Erro - Nome do Produto Inválido", 0);
            txtNomePeca.requestFocus();
            return false;
        } else if (txtQuantidadePeca.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Quantidade de produto em branco.\n\n"
                    + "Informe corretamente o a quantidade do Produto a ser alterado.", "Erro - Quantidade Inválida", 0);
            txtQuantidadePeca.requestFocus();
            return false;
        } else if (txtQuantidadeMinima.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Alerta mínimo em branco.\n\n"
                    + "Informe corretamente o alerta mínimo a ser alterado.", "Erro - Alerta mínimo Inválido", 0);
            txtQuantidadeMinima.requestFocus();
            return false;
        } else if (txtQuantidadeMaxima.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Alerta máximo em branco.\n\n"
                    + "Informe corretamente o alerta máximo do Produto a ser alterado.", "Alerta máximo Inválido", 0);
            txtQuantidadeMaxima.requestFocus();
            return false;
        } else if (txtfValorUnitario.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Valor unitário em branco.\n\n"
                    + "Informe corretamente o valor unitário do Produto a ser alterado.", "Erro - Valor unitário Inválido", 0);
            txtQuantidadeMaxima.requestFocus();
            return false;
        } else if (cmbCategoria.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Categoria inválida. \n\nSelecione uma categoria.", "Erro - Categoria Inválida", 0);
            cmbCategoria.requestFocus();
            return false;
        } else {
            return true;
        }
    }

    /**
     * Inicia o procedimento para atualizar a tabela através de uma busca
     * filtrada. O método da listagemFiltrada só é chamado caso o campo de texto
     * não esteja vazio.
     */
    private void pesquisarFiltrada() {
        try {
            /*
            Caso o campo de pesquisa esteja populado, o método de atualização é chamado.
            Caso não, a tabela é esvaziada.
             */
            if (!"".equals(txtPesquisa.getText().trim())) {
                atualizarTabela(true);
            } else {
                limparTabela();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Ocorreu um erro ao atualizar a tabela por filtro.\n\n"
                    + ex, "Erro ao popular tabela", 0);
        }
    }

    /**
     * Remove todos os registros da tabela Produto do banco de dados. Essa
     * operacao não utiliza do parâmetro CASCADE, ou seja, se houver algum
     * registro relacionado com alguma outra tabela, a operação irá falhar.
     * Interroga o usuário duas vezes, alertando sobre a operação a ser
     * realizada. Caso o usuário selecione SIM, irá armazenar 0 na variavel de
     * controle opcao. Caso digite não, irá armazenar 1 na variável de controle
     * opcao. Selecionando SIM duas vezes, finalmente o metodo
     * <code>deletarTodasPecas</code> é chamado. Uma variável de controle
     * booleana <code>exclusaoSucedida</code> armazena caso a operação tenha
     * sido concluída com sucesso - true, ou não - false. Caso tenha sido
     * sucedida, a tabela é atualizada com base no ultimo tipo de pesquisa e os
     * campos do registro previamente selecionado são limpados.
     */
    private void removerTodosRegistros() {
        int opcao;
        opcao = JOptionPane.showConfirmDialog(this, "Deseja REALMENTE remover todos os produtos do banco de dados?\n\n",
                "Alerta - remoção de todos os registros", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (opcao == 0) {
            opcao = JOptionPane.showConfirmDialog(this, "Essa operação tem grandes chances de falhar, devido a existência\n"
                    + "de restrições de chaves estrangeiras no banco de dados.\n\n"
                    + "Deseja REALMENTE tentar excluir todos os registros do banco de dados?\n\n"
                    + "Caso a operação suceda, todos os dados serão permanentemente excluídos.\n"
                    + "Caso ela falhe, talvez alguns registros possam ter sidos excluidos, e outros não."
                    + "\n\n"
                    + "Deseja prosseguir?",
                    "Alerta - remoção de todos os registros", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (opcao == 0) {
                boolean exclusaoSucedida;
                exclusaoSucedida = dao.DaoProduto.deletarTodasPecas();
                if (exclusaoSucedida) {
                    atualizarTabela(ultimoTipoPesquisa);
                }
            }
        }
    }
    
    /**
     * Define os elementos gráficos e funções disponíveis de acordo com o nível
     * de acesso do usuário logado no sistema.
     *
     * @param nvlAdm nível de acesso do usuario logado. 0 = Visualização. 1 =
     * Completo. Visualização só pode pesquisar e visualizar registros.
     * Completo, alem da visualização, pode alterar deletar e chamar a tela de
     * cadastro.
     */
    private void definirNivelAcesso(int nvlAdm) {
        if (nvlAdm == 0) {
            btnDeletarTodosRegistros.setEnabled(false);
            btnAlterar.setEnabled(false);
            btnDeletar.setEnabled(false);
            btnCadastrarProduto.setEnabled(false);
            txtCodigoPeca.setEditable(false);
            txtNomePeca.setEditable(false);
            txtfValorUnitario.setEditable(false);
            cmbCategoria.setEnabled(false);
            txtQuantidadePeca.setEditable(false);
            txtQuantidadeMaxima.setEditable(false);
            txtQuantidadeMinima.setEditable(false);
        }
    }

    private void selecionarLinhaTabela(String codigoProduto) {
        int indiceTabela = 0;
        for (int i = 0; i < tblListagemProduto.getModel().getRowCount(); i++) {
            String codigoDaLinha = String.valueOf(tblListagemProduto.getModel().getValueAt(i, 0));
            if (codigoProduto.equals(codigoDaLinha)) {
                indiceTabela = i;
            }
        }
        tblListagemProduto.getSelectionModel().setSelectionInterval(indiceTabela, indiceTabela);
        popularCampos();
    }
}
